OBJECT Report 88058 A01 Sales Invoice Chart
{
  OBJECT-PROPERTIES
  {
    Date=20-03-19;
    Time=10:25:59;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount,Amount Including VAT }

    { 2   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 3   ;1   ;DataItem;VATAmountLine       ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 4   ;1   ;DataItem;VATClause           ;
               DataItemTable=Table560 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"VAT Base");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"Line Amount");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Converted in the training
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
XbZlfReflx9Wl5ubheb/9P8B</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

