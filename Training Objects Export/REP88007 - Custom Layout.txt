OBJECT Report 88008 B03 - Sales Invoice Finished
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=25-11-18;
    Time=20:33:33;
    Version List=FORNAV3.2.0.1492/1492;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemTable=Table113;
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1492, Version=3.2.0.1492, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1492, Version=3.2.0.1492, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);
    
      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;
    
    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report(); 
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN 
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;
    
    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


