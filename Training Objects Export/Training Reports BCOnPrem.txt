OBJECT Table 88000 Translations
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:53:56;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Nr.;
                                                              ENU=No.;
                                                              NLD=Nr.] }
    { 2   ;   ;Description         ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Beschreibung;
                                                              ENU=Description;
                                                              NLD=Omschrijving] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 88050 100 Top Customer Overview
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:54:07;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No            ;Integer       ;DataClassification=ToBeClassified }
    { 2   ;   ;No.                 ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=No. }
    { 3   ;   ;Name                ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Name }
    { 4   ;   ;Sales (LCY)         ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Sales (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5   ;   ;Profit (LCY)        ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Profit (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 6   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country/Region Code }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 9   ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 10  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Code }
    { 11  ;   ;Salesperson Name    ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Name }
    { 12  ;   ;Country Region Name ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country Region Name }
  }
  KEYS
  {
    {    ;Entry No                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 88051 100 Top Customer Overview Args
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:54:20;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;DataClassification=ToBeClassified }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Customer No. }
    { 3   ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 4   ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 5   ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Code }
    { 6   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country/Region Code }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Report 88000 B02 Customer Top 10
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:54:42;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;List                ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Balance (LCY))
                                 ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY),Sales (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88001 B02 Vendor Top 10
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:54:54;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;List                ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(Balance (LCY))
                                 ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
m3U365z1d/z3h5/+BA==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88002 I02 Sales Invoice Start
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=08:22:48;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112 }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88003 I02 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=21:35:34;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               CalcFields=Amount }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
                ReportForNav.AddTotal(DataItemId,4,"Line Amount");
                ReportForNav.AddTotal(DataItemId,5,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,6,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88004 I03 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=22:08:05;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=VAR
                  MyFile@1000 : File;
                  MyInStream@1001 : InStream;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                  MyFile.OPEN('C:\Temp\Append.pdf');
                  MyFile.CREATEINSTREAM(MyInStream);
                  ReportForNav.GetDataItem('Header').AppendPdf(MyInStream);
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
                ReportForNav.AddTotal(DataItemId,4,"Line Amount");
                ReportForNav.AddTotal(DataItemId,5,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,6,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88005 Cust. Entries List (Classic)
{
  OBJECT-PROPERTIES
  {
    Date=28-03-19;
    Time=20:33:51;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               PrintOnlyIfDetail=Yes }

    { 2   ;1   ;Column  ;CustomerFIELDCAPTION_Name;
               SourceExpr=Customer.FIELDCAPTION(Name) }

    { 3   ;1   ;Column  ;CustomerFIELDCAPTION_No;
               SourceExpr=Customer.FIELDCAPTION("No.") }

    { 4   ;1   ;Column  ;Customer_No         ;
               SourceExpr="No." }

    { 5   ;1   ;Column  ;Customer_Name       ;
               SourceExpr=Name }

    { 6   ;1   ;DataItem;                    ;
               DataItemTable=Table21;
               CalcFields=Amount;
               DataItemLink=Customer No.=FIELD(No.) }

    { 7   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_Amount;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION(Amount) }

    { 8   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_PostingDate;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Posting Date") }

    { 9   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_EntryNo;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Entry No.") }

    { 10  ;2   ;Column  ;CustLedgerEntry_EntryNo;
               SourceExpr="Entry No." }

    { 11  ;2   ;Column  ;CustLedgerEntry_PostingDate;
               SourceExpr="Posting Date" }

    { 12  ;2   ;Column  ;CustLedgerEntry_Amount;
               SourceExpr=Amount;
               AutoCalcField=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body6@5012(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount >= 0)
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body7@5013(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount < 0)
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
      CASE DataItemId OF
        'CustLedgerEntry': CASE SectionId OF
          'Body6': OnPreSectionCustLedgerEntry_Body6("Cust. Ledger Entry");
          'Body7': OnPreSectionCustLedgerEntry_Body7("Cust. Ledger Entry");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'CustLedgerEntry': WITH "Cust. Ledger Entry" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
+/8B</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88006 I04 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=21:48:49;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
                ReportForNav.AddTotal(DataItemId,4,"Line Amount");
                ReportForNav.AddTotal(DataItemId,5,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,6,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88007 B03 - Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=28-03-19;
    Time=20:33:21;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112 }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
ct498bvbh/8A</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88050 JavaScript Demo
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:55:40;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table2000000026;
               MaxIteration=1 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88051 A02 JavaScript Finish
{
  OBJECT-PROPERTIES
  {
    Date=28-03-19;
    Time=20:16:20;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
                ReportForNav.AddTotal(DataItemId,4,"Line Amount");
                ReportForNav.AddTotal(DataItemId,5,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,6,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88052 A04 Template Finish
{
  OBJECT-PROPERTIES
  {
    Date=28-03-19;
    Time=20:28:15;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=VAR
                  MyFile@1000 : File;
                  MyInStream@1001 : InStream;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                  MyFile.OPEN('C:\Temp\Append.pdf');
                  MyFile.CREATEINSTREAM(MyInStream);
                  ReportForNav.GetDataItem('Header').AppendPdf(MyInStream);
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No. }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               DataItemLink=Document Type=FIELD(Document Type),
                            Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
                ReportForNav.AddTotal(DataItemId,4,"Line Amount");
                ReportForNav.AddTotal(DataItemId,5,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,6,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
4fz+fw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88054 A03 Footers Finish
{
  OBJECT-PROPERTIES
  {
    Date=28-03-19;
    Time=20:06:33;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
                ReportForNav.AddTotal(DataItemId,4,"Line Amount");
                ReportForNav.AddTotal(DataItemId,5,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,6,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88055 A05 100 Top Customer Overview
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:56:16;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  FillTempListTable();
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;List                ;
               DataItemTable=Table88050;
               DataItemTableView=SORTING(Sales (LCY))
                                 ORDER(Descending);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE FillTempListTable@1();
    VAR
      TopCustomerOverview@1000 : Query 100;
    BEGIN
      WITH TopCustomerOverview DO BEGIN
        OPEN();
        WHILE READ() DO BEGIN
          List."Entry No" := List."Entry No" + 1;
          List."No." := No;
          List.Name := Name;
          List."Sales (LCY)" := Sales_LCY;
          List."Profit (LCY)" := Profit_LCY;
          List."Country/Region Code" := Country_Region_Code;
          List.City := City;
          List."Global Dimension 1 Code" := Global_Dimension_1_Code;
          List."Global Dimension 2 Code" := Global_Dimension_2_Code;
          List."Salesperson Code" := Salesperson_Code;
          List."Salesperson Name" := SalesPersonName;
          List."Country Region Name" := CountryRegionName;
          List.INSERT();
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88056 A06 100 Top Cust Overview Args
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:56:26;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 3   ;    ;DataItem;Args                ;
               DataItemTable=Table88051;
               OnPreDataItem=BEGIN
                               INSERT();
                             END;

               OnAfterGetRecord=BEGIN
                                  FillTempListTable();
                                END;

               Temporary=Yes }

    { 2   ;1   ;DataItem;List                ;
               DataItemTable=Table88050;
               DataItemTableView=SORTING(Sales (LCY))
                                 ORDER(Descending);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1   ;1   ;Group     ;
                  CaptionML=ENU=Filter Fields;
                  GroupType=Group }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=Customer No.;
                  SourceExpr=Args."Customer No.";
                  TableRelation=Customer }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Dimension 1 Code;
                  SourceExpr=Args."Global Dimension 1 Code";
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1)) }

      { 4   ;2   ;Field     ;
                  CaptionML=ENU=Dimension 2 Code;
                  SourceExpr=Args."Global Dimension 2 Code";
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2)) }

      { 5   ;2   ;Field     ;
                  CaptionML=ENU=Salesperson Code;
                  SourceExpr=Args."Salesperson Code";
                  TableRelation=Salesperson/Purchaser }

      { 6   ;2   ;Field     ;
                  CaptionML=ENU=Country Region Code;
                  SourceExpr=Args."Country/Region Code";
                  TableRelation=Country/Region }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE FillTempListTable@1();
    VAR
      TopCustomerOverview@1000 : Query 100;
    BEGIN
      WITH TopCustomerOverview DO BEGIN
        SETFILTER(No, Args."Customer No.");
        SETFILTER(Global_Dimension_1_Code, Args."Global Dimension 1 Code");
        SETFILTER(Global_Dimension_2_Code, Args."Global Dimension 2 Code");
        SETFILTER(Salesperson_Code, Args."Salesperson Code");
        SETFILTER(Country_Region_Code, Args."Country/Region Code");
        OPEN();
        WHILE READ() DO BEGIN
          List."Entry No" := List."Entry No" + 1;
          List."No." := No;
          List.Name := Name;
          List."Sales (LCY)" := Sales_LCY;
          List."Profit (LCY)" := Profit_LCY;
          List."Country/Region Code" := Country_Region_Code;
          List.City := City;
          List."Global Dimension 1 Code" := Global_Dimension_1_Code;
          List."Global Dimension 2 Code" := Global_Dimension_2_Code;
          List."Salesperson Code" := Salesperson_Code;
          List."Salesperson Name" := SalesPersonName;
          List."Country Region Name" := CountryRegionName;
          List.INSERT();
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88057 A01 Customer Top 10 Chart
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:56:42;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;List                ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Balance (LCY))
                                 ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY),Sales (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
juzrPEHLntd013QOhj2/+vvdvwE=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88058 A01 Sales Invoice Chart
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=22:02:23;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
                ReportForNav.AddTotal(DataItemId,4,"Line Amount");
                ReportForNav.AddTotal(DataItemId,5,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,6,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88101 Customer - List(101)
{
  OBJECT-PROPERTIES
  {
    Date=28-03-19;
    Time=20:33:38;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer - List;
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=VAR
                  CaptionManagement@1000 : Codeunit 42;
                BEGIN
                  CustFilter := CaptionManagement.GetRecordFiltersWithCaptions(Customer);
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 6836;    ;DataItem;                    ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Balance (LCY)");
                                  FormatAddr.FormatAddr(
                                    CustAddr,Name,"Name 2",'',Address,"Address 2",
                                    City,"Post Code",County,"Country/Region Code");
                                END;

               ReqFilterFields=No.,Search Name,Customer Posting Group }

    { 3   ;1   ;Column  ;COMPANYNAME         ;
               SourceExpr=COMPANYPROPERTY.DISPLAYNAME }

    { 5   ;1   ;Column  ;CurrReport_PAGENO   ;
               SourceExpr=ReportForNav.PageNo }

    { 8   ;1   ;Column  ;Customer_TABLECAPTION__________CustFilter;
               SourceExpr=TABLECAPTION + ': ' + CustFilter }

    { 7   ;1   ;Column  ;CustFilter          ;
               SourceExpr=CustFilter }

    { 20  ;1   ;Column  ;Customer__No__      ;
               SourceExpr="No." }

    { 21  ;1   ;Column  ;Customer__Customer_Posting_Group_;
               SourceExpr="Customer Posting Group" }

    { 22  ;1   ;Column  ;Customer__Customer_Disc__Group_;
               SourceExpr="Customer Disc. Group" }

    { 23  ;1   ;Column  ;Customer__Invoice_Disc__Code_;
               SourceExpr="Invoice Disc. Code" }

    { 24  ;1   ;Column  ;Customer__Customer_Price_Group_;
               SourceExpr="Customer Price Group" }

    { 25  ;1   ;Column  ;Customer__Fin__Charge_Terms_Code_;
               SourceExpr="Fin. Charge Terms Code" }

    { 26  ;1   ;Column  ;Customer__Payment_Terms_Code_;
               SourceExpr="Payment Terms Code" }

    { 27  ;1   ;Column  ;Customer__Salesperson_Code_;
               SourceExpr="Salesperson Code" }

    { 28  ;1   ;Column  ;Customer__Currency_Code_;
               SourceExpr="Currency Code" }

    { 29  ;1   ;Column  ;Customer__Credit_Limit__LCY__;
               DecimalPlaces=0:0;
               SourceExpr="Credit Limit (LCY)" }

    { 30  ;1   ;Column  ;Customer__Balance__LCY__;
               SourceExpr="Balance (LCY)" }

    { 31  ;1   ;Column  ;CustAddr_1_         ;
               SourceExpr=CustAddr[1] }

    { 32  ;1   ;Column  ;CustAddr_2_         ;
               SourceExpr=CustAddr[2] }

    { 33  ;1   ;Column  ;CustAddr_3_         ;
               SourceExpr=CustAddr[3] }

    { 34  ;1   ;Column  ;CustAddr_4_         ;
               SourceExpr=CustAddr[4] }

    { 35  ;1   ;Column  ;CustAddr_5_         ;
               SourceExpr=CustAddr[5] }

    { 37  ;1   ;Column  ;Customer_Contact    ;
               SourceExpr=Contact }

    { 39  ;1   ;Column  ;Customer__Phone_No__;
               SourceExpr="Phone No." }

    { 40  ;1   ;Column  ;CustAddr_6_         ;
               SourceExpr=CustAddr[6] }

    { 43  ;1   ;Column  ;CustAddr_7_         ;
               SourceExpr=CustAddr[7] }

    { 1   ;1   ;Column  ;Customer___ListCaption;
               SourceExpr=Customer___ListCaptionLbl }

    { 4   ;1   ;Column  ;CurrReport_PAGENOCaption;
               SourceExpr=CurrReport_PAGENOCaptionLbl }

    { 9   ;1   ;Column  ;Customer__No__Caption;
               SourceExpr=FIELDCAPTION("No.") }

    { 10  ;1   ;Column  ;Customer__Customer_Posting_Group_Caption;
               SourceExpr=Customer__Customer_Posting_Group_CaptionLbl }

    { 11  ;1   ;Column  ;Customer__Customer_Disc__Group_Caption;
               SourceExpr=Customer__Customer_Disc__Group_CaptionLbl }

    { 12  ;1   ;Column  ;Customer__Invoice_Disc__Code_Caption;
               SourceExpr=Customer__Invoice_Disc__Code_CaptionLbl }

    { 13  ;1   ;Column  ;Customer__Customer_Price_Group_Caption;
               SourceExpr=Customer__Customer_Price_Group_CaptionLbl }

    { 14  ;1   ;Column  ;Customer__Fin__Charge_Terms_Code_Caption;
               SourceExpr=FIELDCAPTION("Fin. Charge Terms Code") }

    { 15  ;1   ;Column  ;Customer__Payment_Terms_Code_Caption;
               SourceExpr=Customer__Payment_Terms_Code_CaptionLbl }

    { 16  ;1   ;Column  ;Customer__Salesperson_Code_Caption;
               SourceExpr=FIELDCAPTION("Salesperson Code") }

    { 17  ;1   ;Column  ;Customer__Currency_Code_Caption;
               SourceExpr=Customer__Currency_Code_CaptionLbl }

    { 18  ;1   ;Column  ;Customer__Credit_Limit__LCY__Caption;
               SourceExpr=FIELDCAPTION("Credit Limit (LCY)") }

    { 19  ;1   ;Column  ;Customer__Balance__LCY__Caption;
               SourceExpr=FIELDCAPTION("Balance (LCY)") }

    { 36  ;1   ;Column  ;Customer_ContactCaption;
               SourceExpr=FIELDCAPTION(Contact) }

    { 38  ;1   ;Column  ;Customer__Phone_No__Caption;
               SourceExpr=FIELDCAPTION("Phone No.") }

    { 41  ;1   ;Column  ;Total__LCY_Caption  ;
               SourceExpr=Total__LCY_CaptionLbl }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FormatAddr@1002 : Codeunit 365;
      CustFilter@1000 : Text;
      CustAddr@1001 : ARRAY [8] OF Text[50];
      Customer___ListCaptionLbl@1458 : TextConst 'ENU=Customer - List';
      CurrReport_PAGENOCaptionLbl@8565 : TextConst 'ENU=Page';
      Customer__Customer_Posting_Group_CaptionLbl@8050 : TextConst 'ENU=Customer Posting Group';
      Customer__Customer_Disc__Group_CaptionLbl@8520 : TextConst 'ENU=Cust./Item Disc. Gr.';
      Customer__Invoice_Disc__Code_CaptionLbl@5201 : TextConst 'ENU=Invoice Disc. Code';
      Customer__Customer_Price_Group_CaptionLbl@3738 : TextConst 'ENU=Price Group Code';
      Customer__Payment_Terms_Code_CaptionLbl@5049 : TextConst 'ENU=Payment Terms Code';
      Customer__Currency_Code_CaptionLbl@7330 : TextConst 'ENU=Currency Code';
      Total__LCY_CaptionLbl@4467 : TextConst 'ENU=Total (LCY)';
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Balance (LCY)");
              END;
           'Restore': BEGIN
                 "Balance (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

