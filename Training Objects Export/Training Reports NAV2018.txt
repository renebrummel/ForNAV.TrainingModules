OBJECT Table 88050 100 Top Customer Overview
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No            ;Integer       ;DataClassification=ToBeClassified }
    { 2   ;   ;No.                 ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=No. }
    { 3   ;   ;Name                ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Name }
    { 4   ;   ;Sales (LCY)         ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Sales (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5   ;   ;Profit (LCY)        ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Profit (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 6   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country/Region Code }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 9   ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 10  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Code }
    { 11  ;   ;Salesperson Name    ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Name }
    { 12  ;   ;Country Region Name ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country Region Name }
  }
  KEYS
  {
    {    ;Entry No                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 88051 100 Top Customer Overview Args
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;DataClassification=ToBeClassified }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Customer No. }
    { 3   ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 4   ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 5   ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Code }
    { 6   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country/Region Code }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Report 88000 B02 Customer Top 10
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;List                ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Balance (LCY)) ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
4Y7/BfHTHw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88001 B02 Vendor Top 10
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;List                ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(Balance (LCY)) ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
PMSO+npeXbO7hgxbuls6p8M9/yvi5/8C</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88002 I02 Sales Invoice Start
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               ReqFilterFields=No.;
               CalcFields=Amount Including VAT,Amount }

    { 2   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Amount Including VAT");
                ReportForNav.AddTotal(DataItemId,1,Amount);
              END;
           'Restore': BEGIN
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 Amount := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88003 I02 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount,Amount Including VAT }

    { 2   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 3   ;1   ;DataItem;VATAmountLine       ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 4   ;1   ;DataItem;VATClause           ;
               DataItemTable=Table560 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"VAT Base");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"Line Amount");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88004 I03 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;

                   MyFile.OPEN('C:\Temp\Append.pdf');
                   MyFile.CREATEINSTREAM(MyInStream);
                   ReportForNav.GetDataItem('Header').AppendPdf(MyInStream);
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount,Amount Including VAT }

    { 2   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 3   ;1   ;DataItem;VATAmountLine       ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 4   ;1   ;DataItem;VATClause           ;
               DataItemTable=Table560 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"VAT Base");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"Line Amount");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
tzO++y8=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88005 Cust. Entries List (Classic)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               PrintOnlyIfDetail=Yes }

    { 2   ;1   ;Column  ;CustomerFIELDCAPTION_Name;
               SourceExpr=Customer.FIELDCAPTION(Name) }

    { 3   ;1   ;Column  ;CustomerFIELDCAPTION_No;
               SourceExpr=Customer.FIELDCAPTION("No.") }

    { 4   ;1   ;Column  ;Customer_No         ;
               SourceExpr="No." }

    { 5   ;1   ;Column  ;Customer_Name       ;
               SourceExpr=Name }

    { 6   ;1   ;DataItem;                    ;
               DataItemTable=Table21;
               CalcFields=Amount;
               DataItemLink=Customer No.=FIELD(No.) }

    { 7   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_Amount;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION(Amount) }

    { 8   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_PostingDate;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Posting Date") }

    { 9   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_EntryNo;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Entry No.") }

    { 10  ;2   ;Column  ;CustLedgerEntry_EntryNo;
               SourceExpr="Entry No." }

    { 11  ;2   ;Column  ;CustLedgerEntry_PostingDate;
               SourceExpr="Posting Date" }

    { 12  ;2   ;Column  ;CustLedgerEntry_Amount;
               SourceExpr=Amount;
               AutoCalcField=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body6@5012(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount >= 0)
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body7@5013(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount < 0)
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
      CASE DataItemId OF
        'CustLedgerEntry': CASE SectionId OF
          'Body6': OnPreSectionCustLedgerEntry_Body6("Cust. Ledger Entry");
          'Body7': OnPreSectionCustLedgerEntry_Body7("Cust. Ledger Entry");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'CustLedgerEntry': WITH "Cust. Ledger Entry" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>UyYAAO1abW/iOBD+ftL9B8vS3bYSF5KQAN1rdkWhXNFRqArs3beTS0zr2xBziUFlf/2NE16SkISX
Urar3apqk0lizzx+nvHYyeXH57GDZtTzGXctrCkqRtQdcpu5jxaeitFvVfzxw88/Xf4tPHJPJ9wT
fpvM+VT0qMeIw75QD60PP60aMhRdMWVrMRNGHTKmFl601OReh8wwqnNXeNzpzydwrUFn188Tj/q+
EulUGbQip3oBZdw2k90Ulr0iCy09KaD61BFTj4LNpVN4xCmgu+mDw4Z/0nmff6bybrsyJFVa1dXK
yKCGCv43mD9xyDz0uz71hYKuwVtGfdRmvkBndYf4PhueYxSLahV3CfpXFc2sXGDUffiXDkWHW7ha
VVUToyajjv0XfQAIZ2xIB55j4SchJu+Lxfta/31FNatF2V7tE8Rb7DaIIMU6H0+IOz97V7/vdga9
X3S15QrquURAf8SB87awlXfgUGPCLKybxtK1gcuEhfvUFU9+d1S7ZY7DxhSexegPm91yO4B/RAAo
jO485oo6n0Ckt1Q8cTty7ZZ4j8z1oXENgIVfXQ3/QEQwlhauSUYUUGUiMLAHocsr4tp+cAgnLUHH
GlpDysfShRgLQhBlvPJm+fTCo67rzFujBhWEAVbCm1KIc3Fbnzw48GzwT6ti1AKfNbzoNeFExJGU
jm8osakXdhv6GVq0KKg3lD0+iaaFDV0pYdSmMwouqTjSA/SxaN2PWfP67tNnccWflx3HjJq6+ClF
HWnzYTD4TYcTAF8rmwUYiR4oUjpnqoXQQQlTj4qAc3Hwm63rdqNeu+u3up1/5KVAt6LmsEdg8BUX
cBeMOow9azOXLnEPWwI265vjXkC+mMNoXHHHxonYIfqevAgDyj0m5mjg0/D5EXF8aLiYBKsYoJUG
oX4whFoOhGoEQG1vAPme8GkngU+P87KYQsxNnHMw9ojrb+okYta3i0U7iVjM72ykjywU4zvMNTuL
RU+KpZSG8xW351GVyPPSdnnoJ5GHekR5KFISUbpvwPsyLupH5aIS8i/KreKuA19KDrwRqWja1H6k
niwU5zsUNnXiDAMfoKKqjfnUhRKrzwVxlkatlF7k6NraDmL5vI4MdbhiBVI7g6PzsBYqQw1FPCj/
ls9I46oAiweerJXyeZZVLxl710t5PH8517W8Sd8oRfmjVfP5ExniWEpbDuAN974sktq9jHvfmaK0
b54L0Nkv163ZnJwyjiDVixyodTMGNQj3EKjvuC9goQoP0RfjbZwUbj0L7tTZYye4Kzlwl9UjEDuw
yPT+UmafFOnSZnZJy+nZSnhJBWzuXQEHPb5e+ssr5X6kvxSoD05/Wt4K/Uf6O3b60/IKwx/pL2bP
TX/JodlvTVPeZU2Dbojfde882qNDEeyRBhCdMA/qeWXgoWxRVgzJW/+snD84s+h567WDM4sSyybR
vJAZweFizSsND56GlOXUE5tENr3fIoCkYhZrux0FUNkugNIbEICWx6Ejj0BWtmvBApcN3/xErla/
dbmp5a+Y7baozUhTm5lZbTc5FynVdmiupmqvaijllfaMY4msTR6oE0c9MK0Elrccy2JNnUzkXbdt
C193BlYQWrgRlF8zFL4RKWl5G/Enyjqvh9dmUbuF+2Ya98tp4G7SPrRcbGe8eTLGH5Ink4zfzvW3
T/K8bHtCkn9tdpcTG+mbG8rAQ2c6djN2mSUkIfYD16YjWEoB+Xt86g2p/PDDwr/+N+Xi9/CTjBCp
4MuMeWhXoou3sxC980M3M+Q+eSXzXcZRPQ1ti+pANk1Dy96+xwoMGUA1I4DSawQQXJYvIQ70flVd
SM8v0l7LJKmTrCeSjEth265MW70uigUqg8iMK+NNp4wm8ZJpVxKlOxHCux3n1FfX0pvYEimJazRH
rvG8LOZ8Dfbhfw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88006 I04 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount,Amount Including VAT }

    { 2   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 3   ;1   ;DataItem;VATAmountLine       ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 4   ;1   ;DataItem;VATClause           ;
               DataItemTable=Table560 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"VAT Base");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"Line Amount");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>rK0AAO297Y4cR5rf+93AuYcGDXt2bZqK98hcDW1ImtGMYI1GR9TMroEGjIjICLE9zW5OdXFG2oEA
X40vwl/PnZwr8e+f1U1Wd1eTbJEQdg2SM1R3VlZWvDzP/+WJyMpf/pfvn50e/aVvLk7Ozx4/sI/M
g6N+1s6Xk7PvHj94sR3/aXrwX/7z//NvfvlP2035pj8/32wvviw/nL/YPumbk3J68s99c/Tqxz++
vFB45B5FXe3aoQdHX5Vn/fGDyyt9fr75qvzlwdFn52fbzfnptz8857Vf9b/8+vvnm35x8WjvQx/9
4Yu9X93DoztO+4s+5uHVpx49PrpqycOjz16cbl9sOsfO+gvecvrw6OsX9fSk/df+w7fnf+o6e8mt
TH1yJo/Qg6H9vzq5eH5afti1+wsTjp6U035x9MXZX85PWj/6/OTs5OLpg6NrPXrZZ89nm0c25vnB
0e/r/+ht+9X54wfTZEx6wFv76fKPvTJ8f+FSf9icPn7wdLt9/g8fffTNJ9/+QzZx+kjX++SP9PWj
3/+qbMtHn50/e17Ofvi7X3z2ze+/+sOTf+fMF2fbvjkrWz6vnPL7l9vl0S/+/qpBfzg72T5+8G0/
2z69+P345Hcnp6cnzzrveHD0u7L57uTs4vEDZ+aHR1N8eOQMo2Rdsg+Ovi7f9X88WbZPedlqGHTg
t/3ku6dczs1ZA/P8hB9joCNM3+MHnygIHh7l51v6evb1pu9a8KRtTp7z8mXLvzgb55tna3Mf/aZv
/+7vP/73//b7X+mfT/Z+2nX7Sd++eH7rrP3XPiunbR3Gi7/7xZfn353/4u8/fkC0Hh398tNytlys
P/LLF9v+zF6G3m97WdT9azG3mzaNsE7Ve4nU/ld1+uu++aa3883y+MF286LzxpefSZ+fnb842z7c
/YeYaKcvlDlHf/zk2wdH355vy+nVmck81Lj+ZnP+4vm1Fzwjefm5fyyb6228euHbUk85vP7HWnfj
hT+e9L8+fvDk9998+8VXv/m7r84frbP/589PTplnXYoW/e7Lxw/2jl59OCc/OPqCrlm9eNG36vFX
L57Vvrns7uUQ3hjRvVH9po+1EwfGc9eNy9Hc65jdD54nJ98RveTl4wdhbsZPU6qOFPR19CWMFFy2
tvUl1bxkG4J1XO3rzcnZ9vdnvwa4flCTr+bmk9PT87/uIu7Xm8355uLqhSekHiF3oxW7gP6cTzb5
UYiTD+HBXg/p42WvLq4dvd73cLDv3/bvt5+ef3/V8ctfk/r7z/3zte8P4/QoMJlfnrc1Hz4/PS8k
CjnorXs025TttD9SusbjB/////xf/+38BTE5+gak7rtgIB3WOd192mcvNptd9j16smX4y2b5rDzX
Z1w8uvHmjw71zO16Fu/Rs/CyZ8nYRzN/Hjrhxo3OWWfCw6Nr6PHb880/f3JKFEALmo69jiqld7+u
JzzrwpnfnSzLab889Xbf9+Fhff+NDtLFJ9sfTjshdL452f6w6yoT84eLfuOTRjm9ODREH61jdGjg
/O5q+R4DZ18OHKH9KB4cNXNjyHYDtAvjR2vfV1y5ePQp+P7ft+efLIuI8dDwvMWbDoZE2PVsepue
vQq//34Zdi/7CJcAhAd76OIu6L2/YpQn/bvzfvSHLyAl83z78OhC8/b40/PTRWds+mfnp+fg1Ken
pf3pjoj6so+XAbWXFZfNOvqPR7/4h6Nf8J/LYfnqrnDbXee1mfaaa75VCM5rCO56fhl56+8v+/nq
4H3iNFwHtI8OINruRHsT2y9RwJqDc/75+fn2OrjvjlwD97tweg/0S5yWlLPzc8htlLi4lsMcO5Hg
lmhCBJtL7GYPrR0IYybv3XQD2K9acG8Mt/ZgH78stZ9edW/9xb2K5MlE4dw03Y3jU37kDP1I1wbl
MlBEyb/+6g+P//2fX5xvP/7b8WY77PHSxzB/Ox60ZVtP+cFIb5zUzcnHP/74t+OmSOCFo4+PN30x
x99tej8zx/X0RXcx7o7yw/5xw9FWyZDvyPaz5fysHzNiZ1ud1i6eEqL6af99+uHlFfnQ/6BWtafP
j47HhXMcWPPw4mnv26O/Hf/5dD189JVk3anOv7DHF7VcdD7LHF+cEatWZ23/3I6334doPT9u+HE2
Lu3e+3TNlN1ntQu3O/irPgqKHeW5Kd9tyvOnKypcneRffsbl6V+enPWjnXS5Oiccv9g17rgNe/Rb
JnZzenL2p93L24vI/zfnf112p6iFF62fnj4vyzJO/d5vp9ZM+y/W/RfHZv+3zY1Tt3qR6EfwbY/b
6fb7U6bvcqyOVvV21Zp01ZqrfsVX7drUzbLZHuvfi/Xfv1pzefT04NF68Ojm4NGnB4/+5ebRtxyb
Q6Nxq/9rx0mkZ8/5j10j+z8cn55cbM85dXOy9K1O4OgJboGo33QS69nxDxsyfzp+dj4dLz+4ePx0
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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88007 B03 - Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112 }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
Ans/JGS1NnHbdo2qjc2X0+6RX+4+/Ac=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88050 JavaScript Demo
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table2000000026;
               MaxIteration=1 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
2wvJ9tvPXMv8+n8=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88051 A02 JavaScript Finished
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount,Amount Including VAT }

    { 2   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 3   ;1   ;DataItem;VATAmountLine       ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 4   ;1   ;DataItem;VATClause           ;
               DataItemTable=Table560 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"VAT Base");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"Line Amount");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88052 A04 Template Start
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount,Amount Including VAT }

    { 2   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 3   ;1   ;DataItem;VATAmountLine       ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 4   ;1   ;DataItem;VATClause           ;
               DataItemTable=Table560 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"VAT Base");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"Line Amount");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88053 A04 Template Finished
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.) WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No. }

    { 2   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               DataItemLink=Document Type=FIELD(Document Type), Document No.=FIELD(No.) }

    { 3   ;1   ;DataItem;VATAmountLine       ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 4   ;1   ;DataItem;VATClause           ;
               DataItemTable=Table560 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"VAT Base");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"Line Amount");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
3/JXRL7/Lw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88054 A03 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount,Amount Including VAT }

    { 2   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 3   ;1   ;DataItem;VATAmountLine       ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 4   ;1   ;DataItem;VATClause           ;
               DataItemTable=Table560 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"VAT Base");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"Line Amount");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>xLMAAO297XIcx7nn+X0j9h6w3FhbnuWhKt+rjsyZkGTL1o5MaUXJPhuDiYnMrEwRxyCabjT0chyK
mKuZi5ivcydzJfv7VwNkAWxQhMjQnrNB0qaA6urqfHme/8uTWV2//Q/fPz09+rZtz082Zw/vmQfD
vaN2Vjfzydk3D+9d7Po/jPf+w7//X/+X3/7Tbpu/bM822935Z/mHzcXucdue5NOTf2nboxc//vn5
hfwD+yDoatcO3Tt6lJ+2h/cur/TJZvsof3vv6OPN2W67Of3qh2e89rv27e+/f7Zt5+cPVh/64OtP
V7/a+0e3nPatPub+1acePTy6asn9o48vTncX28axs3bBW07vH31xUU5P6n9sP3y1+WvT2XOqeWyj
HVL3zQ+0/3cn589O8w/7dn84uKPH+bSdH3169u3mpLajT07OTs6f3Du61qPnfXZ89vDAhDTdO/q8
/HOru0ebh/fGcQj+Hm9tp/NfWmH4vuVSX29PH957sts9+8f33//yw6/+MQ1hfF/X+/DP9PX9z3+X
d/n9jzdPn+WzH9779cdffv7o68f/hx0+Pdu17Vne8Xn5lN8/280Pfv2bqwZ9fXaye3jvq3a2e3L+
ef/wTyenpydPG++4d/SnvP3m5Oz84T07TPePxnD/yA6MkrHR3Dv6In/T/nIy757wstEw6MAf28k3
T7icnZIG5tkJPy4dYfoYGwXB/aP0bEdfz77Ytn0LHtftyTNevmz5p2d9s326NPfBH9ruvd988Kv/
/fvf6Z8PVz/tu/247S6evXTW+rWP82ldhvH8vV9/tvlm8+vffHCPaD06+u1H+Ww+X37kl0937am5
DL0/tjyr+9dibj9tGmGdqvcSqe07dfqLtv2y1c12fnhvt71ovPH5Z9Lnp5uLs939/X+IiXp6ocw5
+vOHX907+mqzy6dXZ8bhvsb1D9vNxbNrLzhG8vJz/5y319t49cJXuZxyePmPMfbGC38+ad89vPf4
8y+/+vTRH957tHmwzP7fPjk5ZZ51KVr0p88e3lsdvfpwTr539CldM3rxvO3U40cXT0vbXnX387MP
O+9gFvbDcDWf3+bt0Zx37eMnrf51yanv1Kz2nv55cLb57r3f/ObBbvN/Pf780Xu/eXBOmrX3FF4D
vzw7Pdm996u/XWx2H/zD/j+/ebBtQqHGuf+8OTm7fPX9y1dX06/PrcrUq8++drkDb7j+1r7dPF23
1hDLtMosLfvg6Oj994/+wRyVVvPFeTt6ulHiHGVQY3njcLTbcPL1S3Lo6PAlbXip5TdHa3/ys0zX
yeT36n8y//k3/8Bb638a/vPtvTg5//jJ9uR89zSfc7H39lf91Te7D/bN/FV++uyD5Z/LD/zVKS/t
NlfZsSTFOkNWWfJl60tQHsiPfVheZscqUM0aDB6ffAMagbMP7/mpDm4cY7FAqiu9zb5Hb5Mxtc2x
pDkZ743lal9sT852n5/9nhD4QSF4FXwfnp5uvttH3O+32832/OqFx0ApEHKjFXuA+oRPHtIDH0bn
/b1VD+njZa/Orx293nd/sO9fte93H22+v+r45a9R/f2X9snS9/thfOBJzs82dcG3T043mURhep2x
DyYTkxnXI6VrPLz3P//rf/t/NhdgTG9bmLftkxt4W3J0/2kfX2y3ezR98HjH8Oft/HF+ps84f3Dj
ze8f6pnd9yzcoWf+ec/iYB5M/LlvxQM3Omfs4O8fXWODP262//LhKVEAzWs6Vh0VRO9/XU542sQb
fzqZ59N2eerLfV/D/fL+Gx2ki493P5w2QmizPdn9sO8qE/P1ebvxST2fnh8aoveXMTo0cG5/tXSH
gTPPB47QfhAOjtpwY8j2A7QP4wdL3xeeOH/wEXz9X3abD+dZQufQ8LzGmw6GhN/3bHydnr0Iv/9y
GXbP+4g2gNgO9tCGfdA7d6UQHrdvNu3o60+Ftc9294/ONW8PP9qczjpj2z7enG7gnY9Oc/3rLRH1
WevPA2qVFZfNOvo/j379j0e/5j+Xw/LotnDbX+eVmfaKa75WCE5LCO57fhl5y+/P+/ni4F3i1F8H
tPcPINr+RHMT2y9RwAwH5/yTzWZ3Hdz3R66B+6fnf4G00G/bvz5H4ieb7z6/2D27oOH/24qXbgf1
FUMMaS55jkM3fTK1zuMc4jz0MkMQzrk4lSnGMJUVtFvgaBids+MNFrhq7p0B35g7pHd6EfrjEB8Q
/sbeT+ZB9JNJr5noB6TwEoLPMf2LJ5uz9mij0Dvax96Bt1yedDCK3+4HvP+6IWdvhtwlfkqy3iHk
7B1C7q4RZ8vYurfdlhBrKKPLOc+htp56Ct6NxfgxTUNaR9wia14ONfszQu2wsPosl3Z6NQbLL3Yd
ZkH8O4636wvj7YMxhfWwXU61dP/vH339cC+L/3683XVzPLfeh78fdxqyK6f8MMjUnJTtyQc//vj3
4yp44oWjD463bR6Ov9m2djYcl9OLZkPYH+WH9fGBo7UA299AQWczcXPMcJ3tdFo9fwJu6qf1+/TD
8yvyof9OrapPnh0d93NrObCQw/mT1nZHfz/+2+ly+OiRgvNU55+b4/OSzxufNRyfn5FXRmft/laP
d9/7YBw/bvlxGmzcv/fJAt/7z6rndn/wd63ni9Md9nabv9nmZ08Wqro6yT3/jMvTPzs5a0d7f3R1
jj++2DfuuHZz9EdmdXt6cvbX/cu788D/t5vv5v0pauF5baenz/I891O3+u3UDOP6xbJ+sW/Xv21v
nLrTi8Q8rnJ3XE93358yfZdjdbRYxKvWxKvWXPUrvGjXtmzn7e5Y/54v/35nhsujpwePloNHtweP
Pjl49NubR19zbA6Nxkv9XzpOFj19xn/MEtn/7vgUqNhw6vZkbjudwNETMI+o3zay6unxD1sYZjx+
uhmP5x9sOH6yTcdPT87MxJmXdTLz44/HZ5uLkyrM3B3jP3/YfXdGaBw/AYcudufPjs+Bi/kY0Prm
9Pz7M2zOsPyyXf+yW/9SLn/5+/E+TrfHeML5+NlpPjlTsN8W2+rU+ZNnz07q7u/H+vf42dk35fTk
mX75zpvB6Icn6LSwHPlmk0+ts8svT/RLSIN+Pq/5tH3Pac9/+YFfjl7YznEKg28+DfOQTR7ysP8z
+8mP3ge7/3Uq+//aOIzD5bFQQ0otXb5h8DF542cv6TgUM/ah9BrNEPS7CTlxRWxh8GkMrYVQhin2
UOeUwhynboY8uTHF6CofGwfOH+acox3DkBnAuYTRWD+FaWxmrm4oNlsuNRkbE1LiRY9qLANYmec6
RhxpMx4KmOdqw5jHUsahTamZ0ibXrLVj7kX/8nNOsMjQ3TRVM9VW2th7LnOZfM+uQiRzG2sew2gz
5+fqRkMzMsdr4wNan1pytZcJHDYMhJvTNPK3ttqmNmfXe3Mo51jKPFsbJucr1nkaTcrRqwHRJ+Om
yNUmm170yEbrSI82w2S2hZRrnpFXPdbYnPWh2GL464rzjouPdaimmpG4szYalxh4ej30ocdpnJub
h5hLaOMUc/Cd6Q82M7A5j3WKfEQc4xxr57+5+WJ94U8qkm3jHMdks5lTK9lUF7MPdao0hJHKIxwb
DEOmkU6QcbbNmIGjYxyZ+NUcZbphYRbrQquB5jRLuHRT0uyqCaERTYxIyK07x3ldyBmbRT8yDN3N
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
94sT55/lHzYXu8dte5JP4eHtv/9/AQ==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88055 A05 100 Top Customer Overview
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  FillTempListTable();
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;List                ;
               DataItemTable=Table88050;
               DataItemTableView=SORTING(Sales (LCY)) ORDER(Descending);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE FillTempListTable@1();
    VAR
      TopCustomerOverview@1000 : Query 100;
    BEGIN
      WITH TopCustomerOverview DO BEGIN
        OPEN();
        WHILE READ() DO BEGIN
          List."Entry No" := List."Entry No" + 1;
          List."No." := No;
          List.Name := Name;
          List."Sales (LCY)" := Sales_LCY;
          List."Profit (LCY)" := Profit_LCY;
          List."Country/Region Code" := Country_Region_Code;
          List.City := City;
          List."Global Dimension 1 Code" := Global_Dimension_1_Code;
          List."Global Dimension 2 Code" := Global_Dimension_2_Code;
          List."Salesperson Code" := Salesperson_Code;
          List."Salesperson Name" := SalesPersonName;
          List."Country Region Name" := CountryRegionName;
          List.INSERT();
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88056 A06 100 Top Cust Overview Args
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 3   ;    ;DataItem;Args                ;
               DataItemTable=Table88051;
               OnPreDataItem=BEGIN
                               INSERT();
                             END;

               OnAfterGetRecord=BEGIN
                                  FillTempListTable();
                                END;

               Temporary=Yes }

    { 2   ;1   ;DataItem;List                ;
               DataItemTable=Table88050;
               DataItemTableView=SORTING(Sales (LCY)) ORDER(Descending);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1   ;1   ;Group     ;
                  CaptionML=ENU=Filter Fields;
                  GroupType=Group }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=Customer No.;
                  SourceExpr=Args."Customer No.";
                  TableRelation=Customer }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Dimension 1 Code;
                  SourceExpr=Args."Global Dimension 1 Code";
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1)) }

      { 4   ;2   ;Field     ;
                  CaptionML=ENU=Dimension 2 Code;
                  SourceExpr=Args."Global Dimension 2 Code";
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2)) }

      { 5   ;2   ;Field     ;
                  CaptionML=ENU=Salesperson Code;
                  SourceExpr=Args."Salesperson Code";
                  TableRelation=Salesperson/Purchaser }

      { 6   ;2   ;Field     ;
                  CaptionML=ENU=Country Region Code;
                  SourceExpr=Args."Country/Region Code";
                  TableRelation=Country/Region }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE FillTempListTable@1();
    VAR
      TopCustomerOverview@1000 : Query 100;
    BEGIN
      WITH TopCustomerOverview DO BEGIN
        SETFILTER(No, Args."Customer No.");
        SETFILTER(Global_Dimension_1_Code, Args."Global Dimension 1 Code");
        SETFILTER(Global_Dimension_2_Code, Args."Global Dimension 2 Code");
        SETFILTER(Salesperson_Code, Args."Salesperson Code");
        SETFILTER(Country_Region_Code, Args."Country/Region Code");
        OPEN();
        WHILE READ() DO BEGIN
          List."Entry No" := List."Entry No" + 1;
          List."No." := No;
          List.Name := Name;
          List."Sales (LCY)" := Sales_LCY;
          List."Profit (LCY)" := Profit_LCY;
          List."Country/Region Code" := Country_Region_Code;
          List.City := City;
          List."Global Dimension 1 Code" := Global_Dimension_1_Code;
          List."Global Dimension 2 Code" := Global_Dimension_2_Code;
          List."Salesperson Code" := Salesperson_Code;
          List."Salesperson Name" := SalesPersonName;
          List."Country Region Name" := CountryRegionName;
          List.INSERT();
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
+x3/X/P9/wA=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88057 A01 Customer Top 10 Chart
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;List                ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Balance (LCY))
                                 ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY),Sales (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Converted in the training
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88058 A01 Sales Invoice Chart
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV4.0.0.1596/1596;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;

               ReqFilterFields=No.;
               CalcFields=Amount,Amount Including VAT }

    { 2   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 3   ;1   ;DataItem;VATAmountLine       ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes }

    { 4   ;1   ;DataItem;VATClause           ;
               DataItemTable=Table560 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.0.0.1596, Version=4.0.0.1596, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"VAT Base");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"Line Amount");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Converted in the training
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
XbZlfReflx9Wl5ubheb/9P8B</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 88101 Customer - List(101)
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Modified=Yes;
    Version List=TRN1.0.0,FORNAV3.2.0.1579/1579;
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer - List;
    OnInitReport=BEGIN
                   ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=VAR
                  CaptionManagement@1000 : Codeunit 42;
                BEGIN
                  CustFilter := CaptionManagement.GetRecordFiltersWithCaptions(Customer);
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 6836;    ;DataItem;                    ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Balance (LCY)");
                                  FormatAddr.FormatAddr(
                                    CustAddr,Name,"Name 2",'',Address,"Address 2",
                                    City,"Post Code",County,"Country/Region Code");
                                END;

               ReqFilterFields=No.,Search Name,Customer Posting Group }

    { 3   ;1   ;Column  ;COMPANYNAME         ;
               SourceExpr=COMPANYPROPERTY.DISPLAYNAME }

    { 5   ;1   ;Column  ;CurrReport_PAGENO   ;
               SourceExpr=ReportForNav.PageNo }

    { 8   ;1   ;Column  ;Customer_TABLECAPTION__________CustFilter;
               SourceExpr=TABLECAPTION + ': ' + CustFilter }

    { 7   ;1   ;Column  ;CustFilter          ;
               SourceExpr=CustFilter }

    { 20  ;1   ;Column  ;Customer__No__      ;
               SourceExpr="No." }

    { 21  ;1   ;Column  ;Customer__Customer_Posting_Group_;
               SourceExpr="Customer Posting Group" }

    { 22  ;1   ;Column  ;Customer__Customer_Disc__Group_;
               SourceExpr="Customer Disc. Group" }

    { 23  ;1   ;Column  ;Customer__Invoice_Disc__Code_;
               SourceExpr="Invoice Disc. Code" }

    { 24  ;1   ;Column  ;Customer__Customer_Price_Group_;
               SourceExpr="Customer Price Group" }

    { 25  ;1   ;Column  ;Customer__Fin__Charge_Terms_Code_;
               SourceExpr="Fin. Charge Terms Code" }

    { 26  ;1   ;Column  ;Customer__Payment_Terms_Code_;
               SourceExpr="Payment Terms Code" }

    { 27  ;1   ;Column  ;Customer__Salesperson_Code_;
               SourceExpr="Salesperson Code" }

    { 28  ;1   ;Column  ;Customer__Currency_Code_;
               SourceExpr="Currency Code" }

    { 29  ;1   ;Column  ;Customer__Credit_Limit__LCY__;
               DecimalPlaces=0:0;
               SourceExpr="Credit Limit (LCY)" }

    { 30  ;1   ;Column  ;Customer__Balance__LCY__;
               SourceExpr="Balance (LCY)" }

    { 31  ;1   ;Column  ;CustAddr_1_         ;
               SourceExpr=CustAddr[1] }

    { 32  ;1   ;Column  ;CustAddr_2_         ;
               SourceExpr=CustAddr[2] }

    { 33  ;1   ;Column  ;CustAddr_3_         ;
               SourceExpr=CustAddr[3] }

    { 34  ;1   ;Column  ;CustAddr_4_         ;
               SourceExpr=CustAddr[4] }

    { 35  ;1   ;Column  ;CustAddr_5_         ;
               SourceExpr=CustAddr[5] }

    { 37  ;1   ;Column  ;Customer_Contact    ;
               SourceExpr=Contact }

    { 39  ;1   ;Column  ;Customer__Phone_No__;
               SourceExpr="Phone No." }

    { 40  ;1   ;Column  ;CustAddr_6_         ;
               SourceExpr=CustAddr[6] }

    { 43  ;1   ;Column  ;CustAddr_7_         ;
               SourceExpr=CustAddr[7] }

    { 1   ;1   ;Column  ;Customer___ListCaption;
               SourceExpr=Customer___ListCaptionLbl }

    { 4   ;1   ;Column  ;CurrReport_PAGENOCaption;
               SourceExpr=CurrReport_PAGENOCaptionLbl }

    { 9   ;1   ;Column  ;Customer__No__Caption;
               SourceExpr=FIELDCAPTION("No.") }

    { 10  ;1   ;Column  ;Customer__Customer_Posting_Group_Caption;
               SourceExpr=Customer__Customer_Posting_Group_CaptionLbl }

    { 11  ;1   ;Column  ;Customer__Customer_Disc__Group_Caption;
               SourceExpr=Customer__Customer_Disc__Group_CaptionLbl }

    { 12  ;1   ;Column  ;Customer__Invoice_Disc__Code_Caption;
               SourceExpr=Customer__Invoice_Disc__Code_CaptionLbl }

    { 13  ;1   ;Column  ;Customer__Customer_Price_Group_Caption;
               SourceExpr=Customer__Customer_Price_Group_CaptionLbl }

    { 14  ;1   ;Column  ;Customer__Fin__Charge_Terms_Code_Caption;
               SourceExpr=FIELDCAPTION("Fin. Charge Terms Code") }

    { 15  ;1   ;Column  ;Customer__Payment_Terms_Code_Caption;
               SourceExpr=Customer__Payment_Terms_Code_CaptionLbl }

    { 16  ;1   ;Column  ;Customer__Salesperson_Code_Caption;
               SourceExpr=FIELDCAPTION("Salesperson Code") }

    { 17  ;1   ;Column  ;Customer__Currency_Code_Caption;
               SourceExpr=Customer__Currency_Code_CaptionLbl }

    { 18  ;1   ;Column  ;Customer__Credit_Limit__LCY__Caption;
               SourceExpr=FIELDCAPTION("Credit Limit (LCY)") }

    { 19  ;1   ;Column  ;Customer__Balance__LCY__Caption;
               SourceExpr=FIELDCAPTION("Balance (LCY)") }

    { 36  ;1   ;Column  ;Customer_ContactCaption;
               SourceExpr=FIELDCAPTION(Contact) }

    { 38  ;1   ;Column  ;Customer__Phone_No__Caption;
               SourceExpr=FIELDCAPTION("Phone No.") }

    { 41  ;1   ;Column  ;Total__LCY_Caption  ;
               SourceExpr=Total__LCY_CaptionLbl }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FormatAddr@1002 : Codeunit 365;
      CustFilter@1000 : Text;
      CustAddr@1001 : ARRAY [8] OF Text[50];
      Customer___ListCaptionLbl@1458 : TextConst 'ENU=Customer - List';
      CurrReport_PAGENOCaptionLbl@8565 : TextConst 'ENU=Page';
      Customer__Customer_Posting_Group_CaptionLbl@8050 : TextConst 'ENU=Customer Posting Group';
      Customer__Customer_Disc__Group_CaptionLbl@8520 : TextConst 'ENU=Cust./Item Disc. Gr.';
      Customer__Invoice_Disc__Code_CaptionLbl@5201 : TextConst 'ENU=Invoice Disc. Code';
      Customer__Customer_Price_Group_CaptionLbl@3738 : TextConst 'ENU=Price Group Code';
      Customer__Payment_Terms_Code_CaptionLbl@5049 : TextConst 'ENU=Payment Terms Code';
      Customer__Currency_Code_CaptionLbl@7330 : TextConst 'ENU=Currency Code';
      Total__LCY_CaptionLbl@4467 : TextConst 'ENU=Total (LCY)';
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
      LayoutId := ReportLayoutSelection."Custom Report Layout Code";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout Code";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Balance (LCY)");
              END;
           'Restore': BEGIN
                 "Balance (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page />
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

