OBJECT Table 70000 ForNAV Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=ForNAV Opsëtning;
               DEU=ForNAV Einrichtung;
               ENU=ForNAV Setup;
               ESP=Configuraci¢n ForNAV;
               FIN=ForNAV asetukset;
               FRA=Configuration ForNAV;
               ISL=Uppsetning ForNAV;
               ITA=Setup ForNAV;
               NLD=ForNAV Instellingen;
               NOR=ForNAV oppsett;
               SVE=ForNAV instÑllning];
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Primërnõgle;
                                                              DEU=PrimÑrschlÅssel;
                                                              ENU=Primary Key;
                                                              ESP=Clave primaria;
                                                              FIN=Perusavain;
                                                              FRA=ClÇ primaire;
                                                              ISL=A–allykill;
                                                              ITA=Chiave primaria;
                                                              NLD=Primaire sleutel;
                                                              NOR=Primërnõkkel;
                                                              RUS=Áå§ïÖÉóäàä - ãÜ˜ÉÖò ÑÜ§òïàÖ;
                                                              SVE=PrimÑrnyckel] }
    { 9   ;   ;Region              ;Option        ;ObsoleteState=Removed;
                                                   ObsoleteReason=Too complex;
                                                   DataClassification=CustomerContent;
                                                   CaptionML=[DAN=Land/omrÜde;
                                                              DEU=Region;
                                                              ENU=Region;
                                                              ESP=Regi¢n;
                                                              FIN=Alue;
                                                              FRA=RÇgion;
                                                              ISL=Svë–i;
                                                              ITA=Paese;
                                                              NLD=Regio;
                                                              NOR=Region;
                                                              SVE=Region];
                                                   OptionCaptionML=[DAN=W1,Nordamerika,Andet;
                                                                    DEU=W1,Nordamerika,Andere;
                                                                    ENU=World Wide,North America,Other;
                                                                    NLD=W1,Noord Amerika,Overige];
                                                   OptionString=World Wide,North America,Other }
    { 10  ;   ;VAT Report Type     ;Option        ;DataClassification=CustomerContent;
                                                   CaptionML=[DAN=Momsrapporttype;
                                                              DEU=MwSt.-Berichtstyp;
                                                              ENU=VAT Report Type;
                                                              ESP=Tipo informe IVA;
                                                              FIN=VAT-raporttityyppi;
                                                              FRA=Type dÇclaration TVA;
                                                              ISL=Ger– VSK-skÏrslu;
                                                              ITA=Tipo report IVA;
                                                              NLD=Btw-rapporttype;
                                                              NOR=Mva-rapporttype;
                                                              SVE=Momsrapporttyp];
                                                   OptionCaptionML=[DAN=Flere koder,Altid,Aldrig;
                                                                    DEU=Mehrere Codes,Immer,Noch nie;
                                                                    ENU=Multiple Lines,Always,Never;
                                                                    ESP=C¢digos M£ltiples,Siempre,Nunca;
                                                                    FIN=Useita koodeja,Aina,Ei koskaan;
                                                                    FRA=Codes multiples,Toujours,Jamais;
                                                                    ISL=Mîrg k¢–ar,Alltaf,Aldrei;
                                                                    ITA=Codici multipli,Sempre,Mai;
                                                                    NLD=Meerdere BTW Codes,Altijd,Nooit;
                                                                    NOR=Flere koder,Alltid,Aldri;
                                                                    SVE=Flera koder,Alltid,Aldrig];
                                                   OptionString=Multiple Lines,Always,Never,N/A. (Sales Tax) }
    { 14  ;   ;Inherit Language Code;Boolean      ;InitValue=Yes;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Overfõr sprogkode;
                                                              DEU=Sprachcode Åbernehmen;
                                                              ENU=Inherit Language Code;
                                                              ESP=Hereda c¢d. idioma;
                                                              FIN=Peri kielikoodi;
                                                              FRA=Copier code langue;
                                                              ISL=Afrita tungum†lsk¢ta;
                                                              ITA=Eredita codice lingua;
                                                              NLD=Taalcode overnemen;
                                                              NOR=Arv sprÜkkode;
                                                              SVE=érva sprÜkkod] }
    { 15  ;   ;Use Preprinted Paper;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Brug fortrykt papir;
                                                              DEU=Verwenden Sie vorgedrucktes Papier;
                                                              ENU=Use Preprinted Paper;
                                                              ESP=Usa papel preimpreso;
                                                              FIN=KÑytÑ Esipainettua paperia;
                                                              FRA=Utiliser du papier prÇimprimÇ;
                                                              ISL=Nota–u fyrirframprenta– papp°r;
                                                              ITA=Usa carta prestampata;
                                                              NLD=Gebruik voorbedrukt papier;
                                                              NOR=Bruk fortrykt papir;
                                                              SVE=AnvÑnd fîrtryckt papper] }
    { 20  ;   ;Logo                ;BLOB          ;DataClassification=OrganizationIdentifiableInformation;
                                                   CaptionML=[DAN=Logo;
                                                              DEU=Logo;
                                                              ENU=Logo;
                                                              ESP=Logotipo;
                                                              FIN=Logo;
                                                              FRA=Logo;
                                                              ISL=Kennimerki;
                                                              ITA=Logo;
                                                              NLD=Logo;
                                                              NOR=Logo;
                                                              SVE=Logo] }
    { 21  ;   ;Logo File Name      ;Text250       ;InitValue=Click to import...;
                                                   DataClassification=OrganizationIdentifiableInformation;
                                                   CaptionML=ENU=Logo File Name;
                                                   Editable=No }
    { 50  ;   ;Document Watermark File Name;Text250;
                                                   InitValue=Click to import...;
                                                   DataClassification=OrganizationIdentifiableInformation;
                                                   CaptionML=ENU=Document Watermark File Name;
                                                   Editable=No }
    { 51  ;   ;List Report Watermark File N.;Text250;
                                                   InitValue=Click to import...;
                                                   DataClassification=OrganizationIdentifiableInformation;
                                                   CaptionML=ENU=List Report Watermark File Name;
                                                   Editable=No }
    { 60  ;   ;Document Watermark  ;BLOB          ;DataClassification=OrganizationIdentifiableInformation;
                                                   CaptionML=[DAN=Dokument Vandmërke;
                                                              DEU=Dokument Wasserzeichen;
                                                              ENU=Document Watermark;
                                                              ESP=Marca de agua del documento;
                                                              FIN=Asiakirjan vesileima;
                                                              FRA=Filigrane de document;
                                                              ISL=Document Watermark;
                                                              ITA=Documento Watermark;
                                                              NLD=Document watermerk;
                                                              NOR=Dokument vannmerke;
                                                              SVE=Dokument vattenstÑmpel] }
    { 61  ;   ;List Report Watermark;BLOB         ;DataClassification=OrganizationIdentifiableInformation;
                                                   CaptionML=[DAN=Rapport Vandmërke;
                                                              DEU=Berichts Wasserzeichen;
                                                              ENU=List Report Watermark;
                                                              ESP=Marca de agua de informe;
                                                              FIN=Raportin vesileima;
                                                              FRA=Filigrane du Çtat;
                                                              ISL=List Report Watermark;
                                                              ITA=Watermark Report;
                                                              NLD=Rapport watermerk;
                                                              NOR=Rapport vannmerke;
                                                              SVE=Lista Rapport VattenmÑrke] }
    { 70  ;   ;Payment Note        ;Text250       ;DataClassification=OrganizationIdentifiableInformation;
                                                   CaptionML=[DAN=Betalingsreference;
                                                              DEU=Zahlungsreferenz;
                                                              ENU=Payment Note;
                                                              ESP=Referencia pago;
                                                              FIN=Maksuviittaus;
                                                              FRA=RÇfÇrence paiement;
                                                              ISL=Grei–slutilv°sun;
                                                              ITA=Riferimento pagamento;
                                                              NLD=Betalingsreferentie;
                                                              NOR=Betalingsreferanse;
                                                              SVE=Betalningsnot] }
    { 80  ;   ;Legal Conditions    ;Text250       ;DataClassification=OrganizationIdentifiableInformation;
                                                   CaptionML=[DAN=VilkÜr og betingelser;
                                                              DEU=Bedingungen;
                                                              ENU=Legal Conditions;
                                                              ESP=TÇrminos y condiciones;
                                                              FIN=Ehdot;
                                                              FRA=Conditions gÇnÇrales;
                                                              ISL=µkvë–i og skilm†lar;
                                                              ITA=Termini e condizioni;
                                                              NLD=Voorwaarden;
                                                              NOR=VilkÜr og betingelser;
                                                              SVE=Juridiska villkor] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE InitSetup@1000000000();
    BEGIN
      IF GET THEN
        EXIT;

      INIT;
      INSERT;
    END;

    PROCEDURE ReplaceReportSelection@1(HideDialog@1000 : Boolean);
    VAR
      DoYouWantToQst@1001 : TextConst 'CSY=Vuoi sostituire i rapporti correnti con i rapporti ForNAV?;DAN=Voulez-vous remplacer les rapports actuels par les rapports ForNAV?;ENU=Do you want to replace the current reports with the ForNAV reports?;ESP=Mîchten Sie die aktuellen Berichte durch die ForNAV-Berichte ersetzen?;FIN=Vuoi sostituire i rapporti correnti con i rapporti ForNAV?;FRA=Vil du erstatte de nuvërende rapporter med ForNAV-rapporterne?;ISL=Vil du erstatte de nÜvërende rapportene med ForNAV-rapportene?;NLD=®Desea reemplazar los informes actuales con los informes de ForNAV?;NOR=Wilt u de huidige rapporten vervangen door de ForNAV rapporten?;SVE=Vill du ersÑtta de aktuella rapporterna med ForNAV-rapporterna?';
      ReplaceReportSel@1002 : Codeunit 70029;
    BEGIN
      IF NOT HideDialog THEN
        IF NOT CONFIRM(DoYouWantToQst, TRUE) THEN
          EXIT;

      ReplaceReportSel.RUN;
    END;

    PROCEDURE DesignTemplatePortrait@1000000003();
    VAR
      Template@1000 : Report 70527;
    BEGIN
      Template.RUNMODAL;
    END;

    PROCEDURE DesignTemplateLandscape@9();
    VAR
      Template@1000 : Report 70526;
    BEGIN
      Template.RUNMODAL;
    END;

    PROCEDURE DesignSalesTemplate@3();
    VAR
      SalesTemplateVAT@1000 : Report 70529;
      SalesTemplSalesTax@1001 : Report 70519;
    BEGIN
      IF CheckIsSalesTax THEN
        SalesTemplSalesTax.RUNMODAL
      ELSE
        SalesTemplateVAT.RUNMODAL;
    END;

    PROCEDURE DesignPurchaseTemplate@1000000001();
    VAR
      PurchaseTemplVAT@1000 : Report 70528;
      PurchaseTemplTax@1001 : Report 70518;
    BEGIN
      IF CheckIsSalesTax THEN
        PurchaseTemplTax.RUNMODAL
      ELSE
        PurchaseTemplVAT.RUNMODAL;
    END;

    PROCEDURE DesignReminderTemplate@2();
    VAR
      Template@1000 : Report 70525;
    BEGIN
      Template.RUNMODAL;
    END;

    PROCEDURE ImportWatermarkFromClientFile@21(Which@1000 : Integer) : Boolean;
    VAR
      ForNAVReadWatermarks@1002 : Codeunit 70006;
    BEGIN
      EXIT(ForNAVReadWatermarks.ReadFromFile(Rec, Which));
    END;

    PROCEDURE GetLegalConditions@1000000002(LanguageCode@1000000001 : Code[10]) : Text;
    VAR
      LegalCondTranslation@1000000000 : Record 70001;
    BEGIN
      IF LegalCondTranslation.GET(LanguageCode) THEN
        EXIT(LegalCondTranslation."Legal Conditions");

      EXIT("Legal Conditions");
    END;

    PROCEDURE DownloadWatermarks@6();
    BEGIN
      HYPERLINK('http://www.fornav.com/report-watermarks/');
    END;

    PROCEDURE DownloadDesigner@10();
    VAR
      DownloadDesigner@1000 : Codeunit 70014;
    BEGIN
      DownloadDesigner.RUN;
    END;

    PROCEDURE CreateWebService@7();
    VAR
      CreateWebServices@1000000000 : Codeunit 70011;
    BEGIN
      CreateWebServices.RUN;
    END;

    PROCEDURE GetCompanyLogo@8();
    VAR
      CompanyInformation@1000 : Record 79;
    BEGIN
      CompanyInformation.GET;
      CompanyInformation.CALCFIELDS(Picture);
      Logo := CompanyInformation.Picture;
    END;

    PROCEDURE GetDocumentWatermark@1000000005() : Text;
    VAR
      TempBlob@1000000000 : Record 99008535;
    BEGIN
      CALCFIELDS("Document Watermark");
      TempBlob.Blob := "Document Watermark";
      EXIT(TempBlob.ToBase64String);
    END;

    PROCEDURE GetListReportWatermark@4() : Text;
    VAR
      TempBlob@1000000000 : Record 99008535;
    BEGIN
      CALCFIELDS("List Report Watermark");
      TempBlob.Blob := "List Report Watermark";
      EXIT(TempBlob.ToBase64String);
    END;

    PROCEDURE CheckIsSalesTax@5() : Boolean;
    VAR
      IsSalesTax@1000 : Codeunit 70005;
    BEGIN
      EXIT(IsSalesTax.CheckIsSalesTax);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70001 ForNAV Legal Cond. Translation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=VilkÜr og betingelser;
               DEU=Bedingungen;
               ENU=ForNAV Legal Cond. Translation;
               ESP=TÇrminos y condiciones;
               FIN=Ehdot;
               FRA=Conditions gÇnÇrales;
               ISL=µkvë–i og skilm†lar;
               ITA=Termini e condizioni;
               NLD=Voorwaarden;
               NOR=VilkÜr og betingelser;
               SVE=Juridisk fîrklaring. ôversÑttning];
  }
  FIELDS
  {
    { 2   ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   DataClassification=CustomerContent;
                                                   CaptionML=[DAN=Sprogkode;
                                                              DEU=Sprachcode;
                                                              ENU=Language Code;
                                                              ESP=C¢d. idioma;
                                                              FIN=Kielikoodi;
                                                              FRA=Code langue;
                                                              ISL=K¢ti tungum†ls;
                                                              ITA=Cod. lingua;
                                                              NLD=Taalcode;
                                                              NOR=SprÜkkode;
                                                              SVE=SprÜkkod] }
    { 80  ;   ;Legal Conditions    ;Text250       ;DataClassification=OrganizationIdentifiableInformation;
                                                   CaptionML=[DAN=VilkÜr og betingelser;
                                                              DEU=Bedingungen;
                                                              ENU=Legal Conditions;
                                                              ESP=TÇrminos y condiciones;
                                                              FIN=Ehdot;
                                                              FRA=Conditions gÇnÇrales;
                                                              ISL=µkvë–i og skilm†lar;
                                                              ITA=Termini e condizioni;
                                                              NLD=Voorwaarden;
                                                              NOR=VilkÜr og betingelser;
                                                              SVE=Juridiska villkor] }
  }
  KEYS
  {
    {    ;Language Code                           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70002 ForNAV Web Service
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Web Service;
               ENU=Web Service;
               ESP=Servicio Web;
               FIN=WWW-palvelu;
               FRA=Service web;
               ISL=VefÁj¢nusta;
               ITA=Servizio Web;
               NLD=Webservice;
               NOR=Webtjeneste;
               SVE=Web Service];
  }
  FIELDS
  {
    { 3   ;   ;Object Type         ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Object Type;
                                                   OptionCaptionML=ENU=,,,,,Codeunit,,,Page,Query;
                                                   OptionString=,,,,,Codeunit,,,Page,Query }
    { 6   ;   ;Object ID           ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=FIELD(Object Type));
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Object ID }
    { 9   ;   ;Service Name        ;Text240       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Service Name }
    { 12  ;   ;Published           ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Published }
  }
  KEYS
  {
    {    ;Object Type,Service Name                ;Clustered=Yes }
    {    ;Object Type,Object ID                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70003 ForNAV Object
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;DataClassification=SystemMetadata }
    { 2   ;   ;Name                ;Text50        ;DataClassification=SystemMetadata }
  }
  KEYS
  {
    {    ;ID                                      ;Clustered=Yes }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70004 ForNAV Reports
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=ForNAV Rapport;
               DEU=Fornav Berichten;
               ENU=ForNAV Reports;
               ESP=ForNAV informes;
               FIN=ForNAV Raportti;
               FRA=ForNAV Rapport;
               ISL=ForNAV SkÏrsla;
               ITA=ForNAV report;
               NLD=ForNAV Rapport;
               NOR=ForNAV Rapport;
               SVE=ForNAV Rapportera];
  }
  FIELDS
  {
    { 1   ;   ;Category            ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Kategori;
                                                              DEU=Kategorie;
                                                              ENU=Category;
                                                              ESP=Clase;
                                                              FIN=Luokka;
                                                              FRA=CatÇgorie;
                                                              ISL=Flokkur;
                                                              ITA=Categoria;
                                                              NLD=Categorie;
                                                              NOR=Kategori;
                                                              SVE=Kategori];
                                                   OptionCaptionML=[DAN=Resten,Salg,Kõb,Finans,Skabelon,Eksempel,Lagersted,Lager;
                                                                    DEU=Andere,Verkauf,Einkauf,Finanzen,Schablone,Beispiel,Lager,Lagerbestand;
                                                                    ENU=Other,Sales,Purchase,Finance,Template,Example,Warehouse,Inventory;
                                                                    ESP=Otro,Ventas,Compras,Finanzas,Plantilla,AlmacÇn,Inventario;
                                                                    FIN=Myynti,Ostot,Finances,Sapluuna,Esimerkki,Fyysinen varastointi,Varasto;
                                                                    FRA=Autre,Vente,Achat,Financement,Modäle,Exemple,Entrepìt,Stocks;
                                                                    ISL=Anna–,Sala,Innkaup,Fj†rm†l,Sni–m†t,Dëmi,Vîruh£s,Birg–ir;
                                                                    ITA=Resto,Vendite,Acquisti,Finanza,Sagoma,Esempio,Warehouse,Magazzino;
                                                                    NLD=Overige,Verkoop,Inkoop,Financieel,Sjabloon,Voorbeeld,Magazijn,Voorraad;
                                                                    NOR=Resten,Salg,Kjõp,Finans,Mal,Eksempel,Lager,Beholdning;
                                                                    SVE=Andra,FîrsÑljning,Inkîp,Finansiera,Mall,Exempel,Lager,Inventarier];
                                                   OptionString=Other,Sales,Purchase,Finance,Template,Example,Warehouse,Inventory }
    { 2   ;   ;ID                  ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Id;
                                                              DEU=ID;
                                                              ENU=Id;
                                                              ESP=Id.;
                                                              FIN=Tunnus;
                                                              FRA=Id;
                                                              ISL=Kenni;
                                                              ITA=ID;
                                                              NLD=Id;
                                                              NOR=ID;
                                                              SVE=ID] }
    { 10  ;   ;Name                ;Text250       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Navn;
                                                              DEU=Name;
                                                              ENU=Name;
                                                              ESP=Nombre;
                                                              FIN=Nimi;
                                                              FRA=Nom;
                                                              ISL=Heiti;
                                                              ITA=Nome;
                                                              NLD=Naam;
                                                              NOR=Navn;
                                                              SVE=Namn] }
  }
  KEYS
  {
    {    ;Category,ID                             ;Clustered=Yes }
    {    ;ID                                       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE GetCategory@1(Value@1000 : Text) : Integer;
    BEGIN
      IF STRPOS(Value, 'Example') <> 0 THEN
        EXIT(Category::Example);

      IF STRPOS(Value, 'Templ') <> 0 THEN
        EXIT(Category::Template);

      IF STRPOS(Value, 'Warehouse') <> 0 THEN
        EXIT(Category::Warehouse);

      IF STRPOS(Value, 'Purch') <> 0 THEN
        EXIT(Category::Purchase);

      IF (STRPOS(Value, 'Order Confirmation') <> 0) OR
        (STRPOS(Value, 'Sales') <> 0) OR
        (STRPOS(Value, 'Salesperson') <> 0) OR
        (STRPOS(Value, 'Credit Memo') <> 0)
      THEN
        EXIT(Category::Sales);

      IF (STRPOS(Value, 'Inventory') <> 0) OR
        (STRPOS(Value, 'Item') <> 0)
      THEN
        EXIT(Category::Finance);

      IF (STRPOS(Value, 'Top 10') <> 0) OR
        (STRPOS(Value, 'Balance') <> 0) OR
        (STRPOS(Value, 'Reconcile') <> 0) OR
        (STRPOS(Value, 'Payments') <> 0) OR
        (STRPOS(Value, 'Statement') <> 0) OR
        (STRPOS(Value, 'Reminder') <> 0) OR
        (STRPOS(Value, 'Finance') <> 0) OR
        (STRPOS(Value, 'Aged Accounts') <> 0)
      THEN
        EXIT(Category::Finance);
    END;

    PROCEDURE IsValidForLocalization@2(Value@1000 : Text) : Boolean;
    VAR
      ForNAVSetup@1001 : Record 70000;
    BEGIN
      IF Category = Category::Example THEN
        EXIT(FALSE);

      ForNAVSetup.GET;
      IF (STRPOS(Value, 'US Check') <> 0) AND (ForNAVSetup."VAT Report Type" <> ForNAVSetup."VAT Report Type"::"N/A. (Sales Tax)") THEN
        EXIT(FALSE);

      IF NOT (Category IN [Category::Sales, Category::Purchase, Category::Template]) THEN
        EXIT(TRUE);

      IF (STRPOS(Value, 'VAT') <> 0) AND (ForNAVSetup."VAT Report Type" = ForNAVSetup."VAT Report Type"::"N/A. (Sales Tax)") THEN
        EXIT(FALSE);

      IF (STRPOS(Value, 'Tax') <> 0) AND (ForNAVSetup."VAT Report Type" <> ForNAVSetup."VAT Report Type"::"N/A. (Sales Tax)") THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70016 ForNAV Report Replacement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    DataClassification=CustomerContent;
    CaptionML=[DAN=Erstat med Rapport;
               DEU=Ersetzen mit Berichts;
               ENU=Replace With Report;
               ESP=Id. de informe;
               FIN=Korvata Raportin tunnus;
               FRA=Remplacer par Çtat;
               ISL=Skipta £t fyrir SkÏrslukenni;
               ITA=Sostituirlo con report;
               NLD=Vervang door Rapport;
               NOR=Erstatt med Rapport;
               SVE=ErsÑtta med Rapport];
  }
  FIELDS
  {
    { 1   ;   ;Report ID           ;Integer       ;DataClassification=CustomerContent;
                                                   CaptionML=[DAN=Rapport-id;
                                                              DEU=Berichts-ID;
                                                              ENU=Report ID;
                                                              ESP=Id. de informe;
                                                              FIN=Raportin tunnus;
                                                              FRA=ID Çtat;
                                                              ISL=SkÏrslukenni;
                                                              ITA=ID report;
                                                              NLD=Rapport-id;
                                                              NOR=Rapport-ID;
                                                              SVE=Rapport-ID] }
    { 2   ;   ;User-ID             ;Code50        ;DataClassification=CustomerContent;
                                                   CaptionML=[DAN=Bruger ID;
                                                              DEU=Nutzer ID;
                                                              ENU=User ID;
                                                              ESP=Usuario ID;
                                                              FIN=KÑyttÑjÑ ID;
                                                              FRA=Utilisateur ID;
                                                              ISL=Notandi ID;
                                                              ITA=Utente ID;
                                                              NLD=Gebruikers ID;
                                                              NOR=Bruker ID;
                                                              SVE=AnvÑndar-ID] }
    { 3   ;   ;Responsibility Center;Code20       ;TableRelation="Responsibility Center";
                                                   DataClassification=CustomerContent;
                                                   CaptionML=[DAN=Responsibility Center;
                                                              DEU=Responsibility Center;
                                                              ENU=Responsibility Center;
                                                              ESP=Responsibility Center;
                                                              FIN=Responsibility Center;
                                                              FRA=Responsibility Center;
                                                              ISL=Responsibility Center;
                                                              ITA=Responsibility Center;
                                                              NLD=Responsibility Center;
                                                              NOR=Responsibility Center;
                                                              SVE=Responsibility Center] }
    { 4   ;   ;Replace-With Report ID;Integer     ;OnValidate=BEGIN
                                                                CALCFIELDS("Report Name");
                                                              END;

                                                   DataClassification=CustomerContent;
                                                   CaptionML=[DAN=Erstat med Rapport-id;
                                                              DEU=Ersetzen mit Berichts-ID;
                                                              ENU=Replace With Report ID;
                                                              ESP=Id. de informe;
                                                              FIN=Korvata Raportin tunnus;
                                                              FRA=Remplacer par ID Çtat;
                                                              ISL=Skipta £t fyrir SkÏrslukenni;
                                                              ITA=Sostituirlo con ID report;
                                                              NLD=Vervang door Rapport-id;
                                                              NOR=Erstatt med Rapport-ID;
                                                              SVE=ErsÑtta med Rapport-ID] }
    { 5   ;   ;Report Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Report),
                                                                                                                Object ID=FIELD(Report ID)));
                                                   Editable=No }
    { 6   ;   ;Replace-With Report Name;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Caption" WHERE (Object Type=CONST(Report),
                                                                                                                Object ID=FIELD(Replace-With Report ID)));
                                                   CaptionML=[DAN=Rapportnavn;
                                                              DEU=Berichtsnamen;
                                                              ENU=Report Name;
                                                              ESP=Nombre de informe;
                                                              FIN=Raportin nimi;
                                                              FRA=Nom Çtat;
                                                              ISL=SkÏrsluheiti;
                                                              ITA=Nome report;
                                                              NLD=Rapportnaam;
                                                              NOR=Rapport Navn;
                                                              SVE=Rapportnamn];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Report ID,User-ID,Responsibility Center ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE TestReport@1();
    BEGIN
      REPORT.RUN("Report ID");
    END;

    PROCEDURE CreateForNAVDefaultReportReplacement@2();
    BEGIN
      // To Do - Different List for Each Localization

      ReplaceReport(111, REPORT::"ForNAV Customer Top 10 List");
      ReplaceReport(311, REPORT::"ForNAV Vendor Top 10 List");
      ReplaceReport(6, REPORT::"ForNAV Trial Balance");
      //ReplaceReport( ,70207); //ForNAV Reconcile A/P to G/L
      //ReplaceReport( ,70210); //ForNAV Customer Payments
      //ReplaceReport( ,70211); //ForNAV Vendor Payments
      ReplaceReport(115, REPORT::"ForNAV Salesperson-Commission");
      ReplaceReport(120, REPORT::"ForNAV Aged Accounts Receivbl.");
      ReplaceReport(322, REPORT::"ForNAV Aged Accounts Payables");
      ReplaceReport(112, REPORT::"ForNAV Sales Statistics");
      ReplaceReport(312, REPORT::"ForNAV Purchase Statistics");
      //ReplaceReport( ,70240); //ForNAV Inv. to G/L Reconcile
      ReplaceReport(1001, REPORT::"ForNAV Inventory Valuation");
      ReplaceReport(712, REPORT::"ForNAV Cust./Item Statistics");
    END;

    LOCAL PROCEDURE ReplaceReport@3(ID@1001 : Integer;WithID@1000 : Integer);
    BEGIN
      "Report ID" := ID;
      "Replace-With Report ID" := WithID;
      INSERT;
    END;

    BEGIN
    END.
  }
}

OBJECT Table 70205 ForNAV Trial Balance Args.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Show by             ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Vis efter;
                                                              DEU=Anzeigen nach;
                                                              ENU=Show by;
                                                              ESP=Mostrar por;
                                                              FIN=NÑyttîperuste;
                                                              FRA=Afficher par;
                                                              ISL=SÏna eftir;
                                                              ITA=Mostra per;
                                                              NLD=Tonen op;
                                                              NOR=Vis etter;
                                                              SVE=Visa per];
                                                   OptionCaptionML=[DAN=Sidste Ür,Budget;
                                                                    DEU=Vorjahr,Budget;
                                                                    ENU=Last Year,Budget;
                                                                    ESP=El a§o pasado,Presupuesto;
                                                                    FIN=Edellinen vuosi,Budjetti;
                                                                    FRA=L'annÇe derniäre,Budget;
                                                                    ISL=S°–asta †r,µëtlun;
                                                                    ITA=Anno prec.,Budget;
                                                                    NLD=Vorig jaar,Budget;
                                                                    NOR=I fjor,Budsjett;
                                                                    SVE=FîregÜende Ür,Budget];
                                                   OptionString=Last Year,Budget }
    { 2   ;   ;Net Change Actual   ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Faktisk bevëgelse;
                                                              DEU=NettoÑnderung - Ist;
                                                              ENU=Net Change Actual;
                                                              ESP=Saldo periodo real;
                                                              FIN=Nettomuutos, toteutunut;
                                                              FRA=Solde pÇriode - RÇel;
                                                              ISL=Raunveruleg nett¢breyting;
                                                              ITA=Saldo periodo effettivo;
                                                              NLD=Mutatie werkelijk;
                                                              NOR=Faktisk bevegelse;
                                                              SVE=Faktisk nettofîrÑndring] }
    { 3   ;   ;Net Change Actual Last Year;Boolean;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Faktisk bevëgelse sidste Ür;
                                                              DEU=NettoÑnderung - Ist - Vorjahr;
                                                              ENU=Net Change Actual Last Year;
                                                              ESP=Saldo periodo real el a§o anterior;
                                                              FIN=Nettomuutos, toteutunut edellisenÑ vuonna;
                                                              FRA=Solde pÇriode - RÇel dernier exercice;
                                                              ISL=Raunveruleg nett¢breyting s°–asta †rs;
                                                              ITA=Saldo periodo effettivo anno precedente;
                                                              NLD=Mutatie werkelijk vorig jaar;
                                                              NOR=Faktisk bevegelse i fjor;
                                                              SVE=Faktisk nettofîrÑndring, fîregÜende Ür] }
    { 4   ;   ;Variance in Changes ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Difference;
                                                              DEU=Abweichung;
                                                              ENU=Difference;
                                                              ESP=Diferencia;
                                                              FIN=Ero;
                                                              FRA=DiffÇrence;
                                                              ISL=Mismunur;
                                                              ITA=Differenza;
                                                              NLD=Verschil;
                                                              NOR=Differanse;
                                                              SVE=Differens] }
    { 5   ;   ;% Variance in Changes;Boolean      ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Variansprocent;
                                                              DEU=Abweichung %;
                                                              ENU=Variance %;
                                                              ESP=% de desviaci¢n;
                                                              FIN=Vaihtelu-%;
                                                              FRA=% Çcart;
                                                              ISL=Fr†vik ° %;
                                                              ITA=% scostamento;
                                                              NLD=Verschil %;
                                                              NOR=Avviks-%;
                                                              SVE=Varians %] }
    { 6   ;   ;Balance at Date Actual;Boolean     ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Faktisk saldo til dato;
                                                              DEU=Saldo bis Datum - Ist;
                                                              ENU=Balance at Date Actual;
                                                              ESP=Saldo a la fecha real;
                                                              FIN=Pvm:n saldo, toteutunut;
                                                              FRA=Solde au - RÇel;
                                                              ISL=Raunsta–a til dags;
                                                              ITA=Saldo alla data effettivo;
                                                              NLD=Saldo op datum werkelijk;
                                                              NOR=Faktisk saldo per dato;
                                                              SVE=Faktiskt saldo t.o.m. datum] }
    { 7   ;   ;Balance at Date Act. Last Year;Boolean;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Faktisk saldo til dato sidste Ür;
                                                              DEU=Saldo bis Datum - Ist - Vorjahr;
                                                              ENU=Balance at Date Act. Last Year;
                                                              ESP=Saldo a la fecha real del a§o anterior;
                                                              FIN=Pvm:n saldo, toteutunut edellisenÑ vuonna;
                                                              FRA=Solde au - RÇel dernier exercice;
                                                              ISL=Nett¢sta–a til dags fyrir s°–asta †r;
                                                              ITA=Saldo alla data anno precedente effet.;
                                                              NLD=Saldo op datum werkelijk vorig jaar;
                                                              NOR=Fakt. saldo per dato i fjor;
                                                              SVE=Faktiskt saldo t.o.m. datum, fîregÜende Ür] }
    { 8   ;   ;Variance in Balances;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Difference;
                                                              DEU=Abweichung;
                                                              ENU=Difference;
                                                              ESP=Diferencia;
                                                              FIN=Ero;
                                                              FRA=DiffÇrence;
                                                              ISL=Mismunur;
                                                              ITA=Differenza;
                                                              NLD=Verschil;
                                                              NOR=Differanse;
                                                              SVE=Differens] }
    { 9   ;   ;% Variance in Balances;Boolean     ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Variansprocent;
                                                              DEU=Abweichung %;
                                                              ENU=Variance %;
                                                              ESP=% de desviaci¢n;
                                                              FIN=Vaihtelu-%;
                                                              FRA=% Çcart;
                                                              ISL=Fr†vik ° %;
                                                              ITA=% scostamento;
                                                              NLD=Verschil %;
                                                              NOR=Avviks-%;
                                                              SVE=Varians %] }
    { 10  ;   ;Rounding Factor     ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Afrundingsfaktor;
                                                              DEU=Rundungsfaktor;
                                                              ENU=Rounding Factor;
                                                              ESP=Factor redondeo;
                                                              FIN=Pyîristyskerroin;
                                                              FRA=UnitÇ d'affichage;
                                                              ISL=SlÇttunarstu–ull;
                                                              ITA=Fattore arrotondamento;
                                                              NLD=Afrondingsfactor;
                                                              NOR=Avrundingsfaktor;
                                                              SVE=Avrundningsfaktor];
                                                   OptionCaptionML=[DAN=Ingen,1,1000,1000000;
                                                                    DEU=Kein,1,1000,1000000;
                                                                    ENU=None,1,1000,1000000;
                                                                    ESP=Ninguno,1,1000,1000000;
                                                                    FIN=Ei,1,1000,1000000;
                                                                    FRA=Aucun,1,1000,1000000;
                                                                    ISL=Ekkert,1,1000,1000000;
                                                                    ITA=No,1,1000,1000000;
                                                                    NLD=Geen,1,1000,1000000;
                                                                    NOR=Ikke,1,1000,1000000;
                                                                    SVE=Ingen,1,1000,1000000];
                                                   OptionString=None,1,1000,1000000 }
    { 11  ;   ;Skip Accounts with all zero;Boolean;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Spring over konti med alle nul;
                                                              DEU=Konten mit allen Nullen Åberspringen;
                                                              ENU=Skip Accounts with all zero Amounts;
                                                              ESP=Saltar cuentas con todo cero;
                                                              FIN=Ohita tilit kaikkiin nollaan;
                                                              FRA=Ignorer les comptes avec tous les zÇro;
                                                              ISL=Slepptu reikningum me– îllum n£lli;
                                                              ITA=Salta gli account con zero;
                                                              NLD=Accounts overslaan met nul;
                                                              NOR=Hopp over kontoer med null;
                                                              SVE=Hoppa îver konton med all noll] }
    { 12  ;   ;All Amounts in LCY  ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                GetReportingCurrency;
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Alle belõb i RV;
                                                              DEU=Alle BetrÑge in MW;
                                                              ENU=All Amounts in LCY;
                                                              ESP=Todas las cantidades en LCY;
                                                              FIN=Kaikki summat PVA;
                                                              FRA=Tous les montants DS;
                                                              ISL=Allar upphë–ir ° SGM;
                                                              ITA=Tutti gli importi in VL;
                                                              NLD=Alle bedragen in LV;
                                                              NOR=Alle belõp i NOK;
                                                              SVE=Alla belopp i BVA] }
    { 13  ;   ;From Date           ;Date          ;DataClassification=SystemMetadata }
    { 14  ;   ;To Date             ;Date          ;DataClassification=SystemMetadata }
    { 15  ;   ;Currency Code       ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Valutakode;
                                                              DEU=WÑhrungscode;
                                                              ENU=Currency Code;
                                                              ESP=C¢d. divisa;
                                                              FIN=Valuutan koodi;
                                                              FRA=Code devise;
                                                              ISL=Gjaldmi–ilsk¢ti;
                                                              ITA=Cod. valuta;
                                                              NLD=Valutacode;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
  }
  KEYS
  {
    {    ;Show by                                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE GetNoOfColumns@1000000000() : Integer;
    VAR
      NoOfColumns@1000000000 : Integer;
    BEGIN
      IF "Net Change Actual" THEN
        NoOfColumns += 1;
      IF "Net Change Actual Last Year" THEN
        NoOfColumns += 1;
      IF "Variance in Changes" THEN
        NoOfColumns += 1;
      IF "% Variance in Changes" THEN
        NoOfColumns += 1;
      IF "Balance at Date Actual" THEN
        NoOfColumns += 1;
      IF "Balance at Date Act. Last Year" THEN
        NoOfColumns += 1;
      IF "Variance in Balances" THEN
        NoOfColumns += 1;
      IF "% Variance in Balances" THEN
        NoOfColumns += 1;

      EXIT(NoOfColumns);
    END;

    LOCAL PROCEDURE GetReportingCurrency@1000000001();
    VAR
      GLSetup@1000000000 : Record 98;
    BEGIN
      "Currency Code" := '';

      IF "All Amounts in LCY" THEN
        EXIT;

      GLSetup.GET;
      GLSetup.TESTFIELD("Additional Reporting Currency");
      "Currency Code" := GLSetup."Additional Reporting Currency";
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70206 ForNAV Trial Balance
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;G/L Account No.     ;Code20        ;DataClassification=SystemMetadata }
    { 4   ;   ;Description         ;Text80        ;DataClassification=SystemMetadata }
    { 11  ;   ;Net Change Actual   ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Faktisk bevëgelse;
                                                              DEU=NettoÑnderung - Ist;
                                                              ENU=Net Change Actual;
                                                              ESP=Saldo periodo real;
                                                              FIN=Nettomuutos, toteutunut;
                                                              FRA=Solde pÇriode - RÇel;
                                                              ISL=Raunveruleg nett¢breyting;
                                                              ITA=Saldo periodo effettivo;
                                                              NLD=Mutatie werkelijk;
                                                              NOR=Faktisk bevegelse;
                                                              SVE=Faktisk nettofîrÑndring] }
    { 13  ;   ;Net Change Actual Last Year;Decimal;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Faktisk bevëgelse sidste Ür;
                                                              DEU=NettoÑnderung - Ist - Vorjahr;
                                                              ENU=Net Change Actual Last Year;
                                                              ESP=Saldo periodo real el a§o anterior;
                                                              FIN=Nettomuutos, toteutunut edellisenÑ vuonna;
                                                              FRA=Solde pÇriode - RÇel dernier exercice;
                                                              ISL=Raunveruleg nett¢breyting s°–asta †rs;
                                                              ITA=Saldo periodo effettivo anno precedente;
                                                              NLD=Mutatie werkelijk vorig jaar;
                                                              NOR=Faktisk bevegelse i fjor;
                                                              SVE=Faktisk nettofîrÑndring, fîregÜende Ür] }
    { 14  ;   ;Variance in Changes ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Difference;
                                                              DEU=Abweichung;
                                                              ENU=Difference;
                                                              ESP=Diferencia;
                                                              FIN=Ero;
                                                              FRA=DiffÇrence;
                                                              ISL=Mismunur;
                                                              ITA=Differenza;
                                                              NLD=Verschil;
                                                              NOR=Differanse;
                                                              SVE=Differens] }
    { 15  ;   ;% Variance in Changes;Decimal      ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Variansprocent;
                                                              DEU=Abweichung %;
                                                              ENU=Variance %;
                                                              ESP=% de desviaci¢n;
                                                              FIN=Vaihtelu-%;
                                                              FRA=% Çcart;
                                                              ISL=Fr†vik ° %;
                                                              ITA=% scostamento;
                                                              NLD=Verschil %;
                                                              NOR=Avviks-%;
                                                              SVE=Varians %] }
    { 17  ;   ;Balance at Date Actual;Decimal     ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Faktisk saldo til dato;
                                                              DEU=Saldo bis Datum - Ist;
                                                              ENU=Balance at Date Actual;
                                                              ESP=Saldo a la fecha real;
                                                              FIN=Pvm:n saldo, toteutunut;
                                                              FRA=Solde au - RÇel;
                                                              ISL=Raunsta–a til dags;
                                                              ITA=Saldo alla data effettivo;
                                                              NLD=Saldo op datum werkelijk;
                                                              NOR=Faktisk saldo per dato;
                                                              SVE=Faktiskt saldo t.o.m. datum] }
    { 19  ;   ;Balance at Date Act. Last Year;Decimal;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Faktisk saldo til dato sidste Ür;
                                                              DEU=Saldo bis Datum - Ist - Vorjahr;
                                                              ENU=Balance at Date Act. Last Year;
                                                              ESP=Saldo a la fecha real del a§o anterior;
                                                              FIN=Pvm:n saldo, toteutunut edellisenÑ vuonna;
                                                              FRA=Solde au - RÇel dernier exercice;
                                                              ISL=Nett¢sta–a til dags fyrir s°–asta †r;
                                                              ITA=Saldo alla data anno precedente effet.;
                                                              NLD=Saldo op datum werkelijk vorig jaar;
                                                              NOR=Fakt. saldo per dato i fjor;
                                                              SVE=Faktiskt saldo t.o.m. datum, fîregÜende Ür] }
    { 21  ;   ;Print Amount 1      ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(1) }
    { 22  ;   ;Print Amount 2      ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(2) }
    { 23  ;   ;Print Amount 3      ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(3) }
    { 24  ;   ;Print Amount 4      ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(4) }
    { 25  ;   ;Print Amount 5      ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(5) }
    { 26  ;   ;Print Amount 6      ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(6) }
    { 27  ;   ;Print Amount 7      ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(7) }
    { 28  ;   ;Print Amount 8      ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(8) }
    { 31  ;   ;RoundTo             ;Option        ;DataClassification=SystemMetadata;
                                                   OptionString=Pennies,Dollars,Thousands }
    { 32  ;   ;No. of Columns      ;Integer       ;DataClassification=SystemMetadata }
    { 41  ;   ;Variance in Balances;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Difference;
                                                              DEU=Abweichung;
                                                              ENU=Difference;
                                                              ESP=Diferencia;
                                                              FIN=Ero;
                                                              FRA=DiffÇrence;
                                                              ISL=Mismunur;
                                                              ITA=Differenza;
                                                              NLD=Verschil;
                                                              NOR=Differanse;
                                                              SVE=Differens] }
    { 42  ;   ;% Variance in Balances;Decimal     ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Variansprocent;
                                                              DEU=Abweichung %;
                                                              ENU=Variance %;
                                                              ESP=% de desviaci¢n;
                                                              FIN=Vaihtelu-%;
                                                              FRA=% Çcart;
                                                              ISL=Fr†vik ° %;
                                                              ITA=% scostamento;
                                                              NLD=Verschil %;
                                                              NOR=Avviks-%;
                                                              SVE=Varians %] }
    { 43  ;   ;Bold                ;Boolean       ;DataClassification=SystemMetadata }
    { 102 ;   ;Caption 1           ;Text80        ;DataClassification=SystemMetadata }
    { 103 ;   ;Caption 2           ;Text80        ;DataClassification=SystemMetadata }
    { 104 ;   ;Caption 3           ;Text80        ;DataClassification=SystemMetadata }
    { 105 ;   ;Caption 4           ;Text80        ;DataClassification=SystemMetadata }
    { 106 ;   ;Caption 5           ;Text80        ;DataClassification=SystemMetadata }
    { 107 ;   ;Caption 6           ;Text80        ;DataClassification=SystemMetadata }
    { 108 ;   ;Caption 7           ;Text80        ;DataClassification=SystemMetadata }
    { 109 ;   ;Caption 8           ;Text80        ;DataClassification=SystemMetadata }
  }
  KEYS
  {
    {    ;G/L Account No.                         ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateForGLAccount@1(VAR GLAccount@1000000000 : Record 15;Args@1000000001 : Record 70205);
    VAR
      TrialBalance@1000000004 : Codeunit 70206;
    BEGIN
      INIT;
      "G/L Account No." := GLAccount."No.";

      TrialBalance.GetDataFromGLAccount(Rec, GLAccount, Args);

      Description := PADSTR('',GLAccount.Indentation) + GLAccount.Name;

      IF HasNumbers THEN BEGIN
        FormatAmounts(Args);
        "No. of Columns" := Args.GetNoOfColumns;
        Bold := GLAccount."Account Type" <> GLAccount."Account Type"::Posting;//GLA.AccountType != 0)
        INSERT;
      END;
    END;

    LOCAL PROCEDURE FormatAmounts@1000000000(VAR Args@1000000000 : Record 70205);
    VAR
      i@1000000001 : Integer;
    BEGIN
      IF Args."Net Change Actual" THEN
        AddToNext(FormatAsNumber(Args, "Net Change Actual"), FIELDCAPTION("Net Change Actual"), i);
      IF Args."Net Change Actual Last Year" THEN
        AddToNext(FormatAsNumber(Args, "Net Change Actual Last Year"), FIELDCAPTION("Net Change Actual Last Year"), i);
      IF Args."Variance in Changes" THEN
        AddToNext(FormatAsNumber(Args, "Variance in Changes"), FIELDCAPTION("Variance in Changes"), i);
      IF Args."% Variance in Changes" THEN
        AddToNext(FormatAsPct("% Variance in Changes"), FIELDCAPTION("% Variance in Changes"), i);
      IF Args."Balance at Date Actual" THEN
        AddToNext(FormatAsNumber(Args, "Balance at Date Actual"), FIELDCAPTION("Balance at Date Actual"), i);
      IF Args."Balance at Date Act. Last Year" THEN
        AddToNext(FormatAsNumber(Args, "Balance at Date Act. Last Year"), FIELDCAPTION("Balance at Date Act. Last Year"), i);
      IF Args."Variance in Balances" THEN
        AddToNext(FormatAsNumber(Args, "Variance in Changes"), FIELDCAPTION("Variance in Balances"), i);
      IF Args."% Variance in Balances" THEN
        AddToNext(FormatAsPct("% Variance in Changes"), FIELDCAPTION("% Variance in Balances"), i);
    END;

    LOCAL PROCEDURE AddToNext@1000000005(Value@1000000001 : Text;Caption@1000000002 : Text;VAR i@1000000000 : Integer);
    BEGIN
      i += 1;
      CASE i OF
        1:
          BEGIN
            "Print Amount 1" := Value;
            "Caption 1" := Caption;
          END;
        2:
          BEGIN
            "Print Amount 2" := Value;
            "Caption 2" := Caption;
          END;
        3:
          BEGIN
            "Print Amount 3" := Value;
            "Caption 3" := Caption;
          END;
        4:
          BEGIN
            "Print Amount 4" := Value;
            "Caption 4" := Caption;
          END;
        5:
          BEGIN
            "Print Amount 5" := Value;
            "Caption 5" := Caption;
          END;
        6:
          BEGIN
            "Print Amount 6" := Value;
            "Caption 6" := Caption;
          END;
        7:
          BEGIN
            "Print Amount 7" := Value;
            "Caption 7" := Caption;
          END;
        8:
          BEGIN
            "Print Amount 8" := Value;
            "Caption 8" := Caption;
          END;
      END;
    END;

    LOCAL PROCEDURE RoundAmounts@1000000001(Value@1000000001 : Decimal;Args@1000000000 : Record 70205) : Decimal;
    BEGIN
      CASE Args."Rounding Factor" OF
        Args."Rounding Factor"::None:
          EXIT(ROUND(Value, 0.01));
        Args."Rounding Factor"::"1":
          EXIT(ROUND(Value, 1));
        Args."Rounding Factor"::"1000":
          EXIT(ROUND(Value / 1000, 1));
        Args."Rounding Factor"::"1000000":
          EXIT(ROUND(Value / 10000000, 0.01));
      END;
    END;

    LOCAL PROCEDURE HasNumbers@1000000002() : Boolean;
    BEGIN
      EXIT(("Net Change Actual" <> 0) OR
        ("Net Change Actual Last Year" <> 0) OR
        ("Balance at Date Actual" <> 0) OR
        ("Balance at Date Act. Last Year" <> 0) OR
        ("Variance in Changes" <> 0) OR
        ("% Variance in Changes" <> 0));
    END;

    LOCAL PROCEDURE FormatAsNumber@1000000003(Args@1000000002 : Record 70205;Value@1000000000 : Decimal) TheText : Text;
    VAR
      j@1000000001 : Integer;
    BEGIN
      IF Value = 0 THEN
        TheText := ''
      ELSE
        TheText := FORMAT(RoundAmounts(Value, Args));
    END;

    LOCAL PROCEDURE FormatAsPct@1000000004(Value@1000000000 : Decimal) : Text;
    VAR
      Args@1000000001 : Record 70205;
    BEGIN
      IF Value = 0 THEN
        EXIT('');

      EXIT(FormatAsNumber(Args, Value) + '%');
    END;

    PROCEDURE GetCaptionClass@1000000007(FieldNo@1000000000 : Integer) : Text;
    BEGIN
      CASE FieldNo OF
        1:
          EXIT('3,' + "Caption 1");
        2:
          EXIT('3,' + "Caption 2");
        3:
          EXIT('3,' + "Caption 3");
        4:
          EXIT('3,' + "Caption 4");
        5:
          EXIT('3,' + "Caption 5");
        6:
          EXIT('3,' + "Caption 6");
        7:
          EXIT('3,' + "Caption 7");
        8:
          EXIT('3,' + "Caption 8");
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70207 ForNAV Reconcile AP to GL Buf.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 10  ;   ;Account No.         ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Nummer;
                                                              DEU=Nr.;
                                                              ENU=No.;
                                                              ESP=Nß;
                                                              FIN=Nro;
                                                              FRA=N¯;
                                                              ISL=Nr.;
                                                              ITA=Nr.;
                                                              NLD=Nr.;
                                                              NOR=Nr.;
                                                              SVE=Nr] }
    { 20  ;   ;Account Name        ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Navn;
                                                              DEU=Name;
                                                              ENU=Name;
                                                              ESP=Nombre;
                                                              FIN=Nimi;
                                                              FRA=Nom;
                                                              ISL=Heiti;
                                                              ITA=Nome;
                                                              NLD=Naam;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 30  ;   ;Debit Amount        ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Debetbelõb;
                                                              DEU=Sollbetrag;
                                                              ENU=Debit Amount;
                                                              ESP=Importe debe;
                                                              FIN=Debet-summa;
                                                              FRA=Montant dÇbit;
                                                              ISL=Debetupphë–;
                                                              ITA=Dare;
                                                              NLD=Debetbedrag;
                                                              NOR=Debetbelõp;
                                                              SVE=Debetbelopp] }
    { 40  ;   ;Credit Amount       ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Kreditbelõb;
                                                              DEU=Habenbetrag;
                                                              ENU=Credit Amount;
                                                              ESP=Importe haber;
                                                              FIN=Kredit-summa;
                                                              FRA=Montant crÇdit;
                                                              ISL=Kreditupphë–;
                                                              ITA=Avere;
                                                              NLD=Creditbedrag;
                                                              NOR=Kreditbelõp;
                                                              SVE=Kreditbelopp] }
  }
  KEYS
  {
    {    ;Account No.                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70211 ForNAV Vendor Payments Args.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Consider Discount   ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Regn med kontant rabat;
                                                              DEU=Skonto berÅcksichtigen;
                                                              ENU=Consider Discount;
                                                              ESP=Considerar descuento;
                                                              FIN=Harkitse alennusta;
                                                              FRA=Envisager remise;
                                                              ISL=‰huga afsl†tt;
                                                              ITA=Valuta sconto;
                                                              NLD=Korting in aanmerking nemen;
                                                              NOR=Vurder rabatt;
                                                              SVE=Beakta rabatt] }
    { 2   ;   ;Payment Date        ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Betalingsdato;
                                                              DEU=Zahlungsdatum;
                                                              ENU=Payment Date;
                                                              ESP=Fecha de pago;
                                                              FIN=Maksupvm;
                                                              FRA=Date de paiement;
                                                              ISL=Grei–sludagur;
                                                              ITA=Data pagamento;
                                                              NLD=Betaaldatum;
                                                              NOR=Betalingsdato;
                                                              SVE=Betalningsdatum] }
    { 3   ;   ;Due Date Filter     ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Forfaldsdatofilter;
                                                              DEU=FÑlligkeitsdatumsfilter;
                                                              ENU=Due Date Filter;
                                                              ESP=Filtro fecha vto.;
                                                              FIN=ErÑpÑivÑsuodatus;
                                                              FRA=Filtre ÇchÇance;
                                                              ISL=Gjalddagaafmîrkun;
                                                              ITA=Filtro data scadenza;
                                                              NLD=Vervaldatumfilter;
                                                              NOR=Filter for forfallsdato;
                                                              SVE=Fîrfallodatumfilter] }
    { 4   ;   ;Payment Discount Date;Date         ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Kontantrabatdato;
                                                              DEU=Skontodatum;
                                                              ENU=Payment Discount Date;
                                                              ESP=Fecha descuento pago;
                                                              FIN=Maksualennuksen pÑivÑmÑÑrÑ;
                                                              FRA=Date d'escompte;
                                                              ISL=Dags. grei–sluafsl†ttar;
                                                              ITA=Data sconto pagamento;
                                                              NLD=Kortingsvervaldatum betaling;
                                                              NOR=Kontantrabattdato;
                                                              SVE=Kassarabattdatum] }
    { 5   ;   ;Print Amounts in LCY;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Udskriv belõb i RV;
                                                              DEU=BetrÑge in MW drucken;
                                                              ENU=Print Amounts in LCY;
                                                              ESP=Imprimir importes en DL;
                                                              FIN=Tulosta summat PVA;
                                                              FRA=Imprimer montants DS;
                                                              ISL=Prenta upphë–ir ° SGM;
                                                              ITA=Stampa importi in VL;
                                                              NLD=Bedragen in LV afdrukken;
                                                              NOR=Skriv ut belõp i NOK;
                                                              SVE=Skriv ut belopp i BVA] }
    { 6   ;   ;External Document No.;Boolean      ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Eksternt bilagsnr.;
                                                              DEU=Externe Belegnummer;
                                                              ENU=External Document No.;
                                                              ESP=Nß documento externo;
                                                              FIN=Ulkoisen asiakirjan nro;
                                                              FRA=N¯ doc. externe;
                                                              ISL=N£mer utana–k. skjals;
                                                              ITA=Nr. documento esterno;
                                                              NLD=Extern documentnr.;
                                                              NOR=Eksterndokumentnr.;
                                                              SVE=Externt dokumentnr] }
    { 7   ;   ;Total Amount (LCY)  ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=I alt (RV);
                                                              DEU=Gesamtbetrag (MW);
                                                              ENU=Total Amount (LCY);
                                                              ESP=Importe total (DL);
                                                              FIN=Summa yhteensÑ (PVA);
                                                              FRA=Montant total DS;
                                                              ISL=Heildarupphë– (SGM);
                                                              ITA=Importo totale (VL);
                                                              NLD=Totaalbedrag (LV);
                                                              NOR=Belõp i alt (NOK);
                                                              SVE=Totalt belopp (BVA)] }
  }
  KEYS
  {
    {    ;Consider Discount                       ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70215 ForNAV Salesperson-Comm. Args.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;New Page per Person ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Skift side pr. sëlger;
                                                              DEU=Neue Seite pro VerkÑufer;
                                                              ENU=New Page per Person;
                                                              ESP=Nueva p†gina por persona;
                                                              FIN=Uusi sivu per henkilî;
                                                              FRA=Nouvelle page par personne;
                                                              ISL=NÏ s°–a † mann;
                                                              ITA=Nuova pagina per persona;
                                                              NLD=Nieuwe pagina per persoon;
                                                              NOR=Ny side per person;
                                                              SVE=Ny sida per person] }
  }
  KEYS
  {
    {    ;New Page per Person                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70219 ForNAV Aged Accounts Args.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Print Amounts in LCY;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Udskriv belõb i RV;
                                                              DEU=BetrÑge in MW drucken;
                                                              ENU=Print Amounts in LCY;
                                                              ESP=Imprimir importes en DL;
                                                              FIN=Tulosta summat PVA;
                                                              FRA=Imprimer montants DS;
                                                              ISL=Prenta upphë–ir ° SGM;
                                                              ITA=Stampa importi in VL;
                                                              NLD=Bedragen in LV afdrukken;
                                                              NOR=Skriv ut belõp i NOK;
                                                              SVE=Skriv ut belopp i BVA] }
    { 2   ;   ;Ending Date         ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Slutdato;
                                                              DEU=Enddatum;
                                                              ENU=Ending Date;
                                                              ESP=Fecha final;
                                                              FIN=Lopetuspvm;
                                                              FRA=Date fin;
                                                              ISL=Lokadagsetning;
                                                              ITA=Data fine;
                                                              NLD=Einddatum;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 3   ;   ;Aging By            ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Aldersford.intv. efter;
                                                              DEU=SaldenrÅckblick nach;
                                                              ENU=Aging Band by;
                                                              ESP=Rango antigÅedad por;
                                                              FIN=ErÑÑntymisjakso per;
                                                              FRA=Cumul par;
                                                              ISL=T°mabil aldursgreiningar eftir;
                                                              ITA=Periodo scadenziario per;
                                                              NLD=Vervaldatuminterval per;
                                                              NOR=Aldersfordeling pÜ basis av;
                                                              SVE=èldersspann per];
                                                   OptionCaptionML=[DAN=Forfaldsdato,Bogfõringsdato,Bilagsdato;
                                                                    DEU=FÑlligkeitsdatum,Buchungsdatum,Belegdatum;
                                                                    ENU=Due Date,Posting Date,Document Date;
                                                                    ESP=Fecha vencimiento,Fecha registro,Fecha documento;
                                                                    FIN=ErÑpÑivÑ,Kirjauspvm.,Asiakirjan pvm.;
                                                                    FRA=Date d'ÇchÇance,Date comptabilisation,Date document;
                                                                    ISL=Gjalddagi,B¢kunardagsetning,Dags. fylgiskjals;
                                                                    ITA=Data scadenza,Data registrazione,Data documento;
                                                                    NLD=Vervaldatum,Boekingsdatum,Documentdatum;
                                                                    NOR=Forfallsdato,Bokfõringsdato,Bilagsdato;
                                                                    SVE=Fîrfallodatum,Bokfîringsdatum,Dokumentdatum];
                                                   OptionString=Due Date,Posting Date,Document Date }
    { 4   ;   ;Period Length       ;DateFormula   ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Periodelëngde;
                                                              DEU=PeriodenlÑnge;
                                                              ENU=Period Length;
                                                              ESP=Longitud periodo;
                                                              FIN=Jakson pituus;
                                                              FRA=Base pÇriode;
                                                              ISL=Lengd t°mabils;
                                                              ITA=Durata periodo;
                                                              NLD=Periodelengte;
                                                              NOR=Periodelengde;
                                                              SVE=PeriodlÑngd] }
    { 5   ;   ;Print Details       ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Udskriv detaljer;
                                                              DEU=Details drucken;
                                                              ENU=Print Details;
                                                              ESP=Imprimir detalles;
                                                              FIN=Tulosta yksityiskohdat;
                                                              FRA=Imprimer dÇtails;
                                                              ISL=Prenta sundurli–un;
                                                              ITA=Stampa dettagli;
                                                              NLD=Details afdrukken;
                                                              NOR=Skriv ut spesifikasjoner;
                                                              SVE=Skriv ut detaljer] }
    { 6   ;   ;Heading Type        ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Overskriftstype;
                                                              DEU=öberschriftsart;
                                                              ENU=Heading Type;
                                                              ESP=Tipo cabecera;
                                                              FIN=Otsikon tyyppi;
                                                              FRA=Type titre;
                                                              ISL=Tegund yfirskriftar;
                                                              ITA=Tipo testata;
                                                              NLD=Type kop;
                                                              NOR=Overskriftstype;
                                                              SVE=Rubriktyp];
                                                   OptionString=Date Interval,Number of Days }
    { 7   ;   ;New Page Per Customer;Boolean      ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Skift side pr. debitor;
                                                              DEU=Neue Seite pro Debitor;
                                                              ENU=New Page Per Customer;
                                                              ESP=Nueva p†gina por cliente;
                                                              FIN=Uusi sivu asiakkaittain;
                                                              FRA=Nouvelle page par client;
                                                              ISL=NÏ s°–a † vi–skiptavini;
                                                              ITA=Nuova pagina per cliente;
                                                              NLD=Nieuwe pagina per klant;
                                                              NOR=Ny side per kunde;
                                                              SVE=Ny sida per kund] }
    { 9   ;   ;Period Start Date   ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Periodes startdato;
                                                              DEU=Periodenstartdatum;
                                                              ENU=Period Start Date;
                                                              ESP=Fecha inicial del periodo;
                                                              FIN=Jakson aloituspvm;
                                                              FRA=Date dÇbut pÇriode;
                                                              ISL=Upphafsdagur t°mabils;
                                                              ITA=Data inizio periodo;
                                                              NLD=Begindatum periode;
                                                              NOR=Periodens startdato;
                                                              SVE=Periodens startdatum] }
    { 12  ;   ;Currency Code       ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Valutakode;
                                                              DEU=WÑhrungscode;
                                                              ENU=Currency Code;
                                                              ESP=C¢d. divisa;
                                                              FIN=Valuutan koodi;
                                                              FRA=Code devise;
                                                              ISL=Gjaldmi–ilsk¢ti;
                                                              ITA=Cod. valuta;
                                                              NLD=Valutacode;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 13  ;   ;Column Count        ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Antal kolonner;
                                                              DEU=Anzahl Spalten;
                                                              ENU=Column Count;
                                                              ESP=Recuento de columnas;
                                                              FIN=SarakemÑÑrÑ;
                                                              FRA=Nombre colonnes;
                                                              ISL=D†lkafjîldi;
                                                              ITA=Conteggio colonne;
                                                              NLD=Kolomtelling;
                                                              NOR=Antall kolonner;
                                                              SVE=Kolumnantal];
                                                   MinValue=1;
                                                   MaxValue=31 }
  }
  KEYS
  {
    {    ;Print Amounts in LCY                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PeriodStartDate@1000000001 : ARRAY [31] OF Date;
      PeriodEndDate@1000000000 : ARRAY [31] OF Date;
      HeaderText@1000000002 : ARRAY [31] OF Text;

    PROCEDURE CalcDates@5();
    VAR
      i@1000 : Integer;
      PeriodLength2@1001 : DateFormula;
      Text010@1000000001 : TextConst 'CSY=Ekki m† nota dagsetningarform£luna% 1;DAN=La formule de date %1 ne peut pas àtre utilisÇe;ENU=The Date Formula %1 cannot be used;ESP=Die Datumsformel %1 kann nicht verwendet werden;FIN=La Formula data %1 non puï essere utilizzata;FRA=Datoformuleringen %1 kan ikke bruges;ISL=Datoformuleringen %1 kan ikke brukes;ITA=PÑivÑyhdistettÑ %1 ei voi kÑyttÑÑ;NLD=La f¢rmula de fecha %1 no se puede utilizar;NOR=De datumformule %1 kan niet worden gebruikt;SVE=Datumformeln %1 kan inte anvÑndas';
      Text032@1000000000 : TextConst '@@@=Negating the period length: %1 is the period length;ENU=-%1';
    BEGIN
      EVALUATE(PeriodLength2,STRSUBSTNO(Text032, "Period Length"));

      IF "Aging By" = "Aging By"::"Due Date" THEN BEGIN
        PeriodEndDate[1] := DMY2DATE(31,12,9999);
        PeriodStartDate[1] := "Ending Date" + 1;
      END ELSE BEGIN
        PeriodEndDate[1] := "Ending Date";
        PeriodStartDate[1] := CALCDATE(PeriodLength2, "Ending Date" + 1);
      END;

      FOR i := 2 TO "Column Count" DO BEGIN
        PeriodEndDate[i] := PeriodStartDate[i - 1] - 1;
        PeriodStartDate[i] := CALCDATE(PeriodLength2,PeriodEndDate[i] + 1);
      END;

      PeriodStartDate[i] := 0D;
      FOR i := 1 TO "Column Count" DO
        IF PeriodEndDate[i] < PeriodStartDate[i] THEN
          ERROR(Text010, "Period Length");

      CreateHeadings;
    END;

    PROCEDURE GetPeriodIndex@8(Date@1040000 : Date) : Integer;
    VAR
      i@1000 : Integer;
    BEGIN
      FOR i := 1 TO "Column Count" DO
        IF Date IN [PeriodStartDate[i]..PeriodEndDate[i]] THEN
          EXIT(i);
    END;

    PROCEDURE GetCaption@1000000000(i@1000000000 : Integer) : Text;
    BEGIN
      EXIT(HeaderText[i]);
    END;

    LOCAL PROCEDURE CreateHeadings@10();
    VAR
      i@1000 : Integer;
      NotDueTxt@1000000015 : TextConst 'CSY=Ekki vegna;DAN=Pas due;ENU=Not Due;ESP=Nicht fÑllig;FIN=Non dovuto;FRA=Ikke forfalden;ISL=Ikke forfalt;ITA=Ei riitÑ;NLD=Sin duda;NOR=Niet vervallen;SVE=Inte fîrfallen';
      BeforeTxt@1000000014 : TextConst 'CSY=µ?ur;DAN=Avant;ENU=Before;ESP=Vor;FIN=Prima;FRA=Fõr;ISL=Fõr;ITA=Ennen;NLD=antes de;NOR=Voor;SVE=Innan';
      DaysTxt@1000000013 : TextConst 'CSY=daga;DAN=journÇes;ENU=days;ESP=tagen;FIN=giorni;FRA=dage;ISL=dager;ITA=pÑivÑÑ;NLD=dias;NOR=dagen;SVE=dagar';
      MoreThanTxt@1000000012 : TextConst 'CSY=Meira en;DAN=Plus que;ENU=More than;ESP=Mehr als;FIN=Pió di;FRA=Mere end;ISL=Mer enn;ITA=EnemmÑn kuin;NLD=Mas que;NOR=Meer dan;SVE=Mer Ñn';
    BEGIN
      IF "Aging By" = "Aging By"::"Due Date" THEN BEGIN
        HeaderText[1] := NotDueTxt;
        i := 2;
      END ELSE
        i := 1;

      WHILE i < "Column Count" DO BEGIN
        IF "Heading Type" = "Heading Type"::"Date Interval" THEN
          HeaderText[i] := STRSUBSTNO('%1\..%2',PeriodStartDate[i],PeriodEndDate[i])
        ELSE
          HeaderText[i] :=
            STRSUBSTNO('%1 - %2 %3', "Ending Date" - PeriodEndDate[i] + 1, "Ending Date" - PeriodStartDate[i] + 1, DaysTxt);
        i := i + 1;
      END;

      IF "Heading Type" = "Heading Type"::"Date Interval" THEN
        HeaderText["Column Count"] := STRSUBSTNO('%1 \%2', BeforeTxt, PeriodStartDate[i - 1])
      ELSE
        HeaderText["Column Count"] := STRSUBSTNO('%1 \%2 %3', MoreThanTxt, "Ending Date" - PeriodStartDate[i - 1] + 1, DaysTxt);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70220 ForNAV Aging Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Lõbenr.;
                                                              DEU=Lfd. Nr.;
                                                              ENU=Entry No.;
                                                              ESP=Nß mov.;
                                                              FIN=Tapahtumanro;
                                                              FRA=N¯ sÇquence;
                                                              ISL=Fërslunr.;
                                                              ITA=Nr. movimento;
                                                              NLD=Volgnummer;
                                                              NOR=Lõpenr.;
                                                              SVE=Lîpnr] }
    { 20  ;   ;Account Type        ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Kontotype;
                                                              DEU=Kontoart;
                                                              ENU=Account Type;
                                                              ESP=Tipo mov.;
                                                              FIN=Tilityyppi;
                                                              FRA=Type compte;
                                                              ISL=Tegund reiknings;
                                                              ITA=Tipo conto;
                                                              NLD=Rekeningsoort;
                                                              NOR=Kontotype;
                                                              SVE=Kontotyp];
                                                   OptionString=Customer,Vendor }
    { 30  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Nummer;
                                                              DEU=Nr.;
                                                              ENU=No.;
                                                              ESP=Nß;
                                                              FIN=Nro;
                                                              FRA=N¯;
                                                              ISL=Nr.;
                                                              ITA=Nr.;
                                                              NLD=Nr.;
                                                              NOR=Nr.;
                                                              SVE=Nr] }
    { 31  ;   ;Account Name        ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Navn;
                                                              DEU=Name;
                                                              ENU=Name;
                                                              ESP=Nombre;
                                                              FIN=Nimi;
                                                              FRA=Nom;
                                                              ISL=Heiti;
                                                              ITA=Nome;
                                                              NLD=Naam;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 35  ;   ;Credit Limit (LCY)  ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Kreditmaksimum (RV);
                                                              DEU=Kreditlimit (MW);
                                                              ENU=Credit Limit (LCY);
                                                              ESP=CrÇdito m†ximo (DL);
                                                              FIN=Luottoraja (PVA);
                                                              FRA=CrÇdit autorisÇ DS;
                                                              ISL=H†marksskuld (SGM);
                                                              ITA=Limite credito (VL);
                                                              NLD=Kredietlimiet (LV);
                                                              NOR=Kredittgrense (NOK);
                                                              SVE=Kreditlimit (BVA)] }
    { 40  ;   ;Currency Code       ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Valutakode;
                                                              DEU=WÑhrungscode;
                                                              ENU=Currency Code;
                                                              ESP=C¢d. divisa;
                                                              FIN=Valuutan koodi;
                                                              FRA=Code devise;
                                                              ISL=Gjaldmi–ilsk¢ti;
                                                              ITA=Cod. valuta;
                                                              NLD=Valutacode;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 50  ;   ;Document Type       ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Bilagstype;
                                                              DEU=Belegart;
                                                              ENU=Document Type;
                                                              FIN=Asiakirjatyyppi;
                                                              FRA=Type document;
                                                              ISL=Tegund fylgiskjals;
                                                              ITA=Tipo di documento;
                                                              NLD=Documenttype;
                                                              NOR=Bilagstype;
                                                              SVE=Dokumenttyp];
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 60  ;   ;Document No.        ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Bilagsnr.;
                                                              DEU=Belegnr.;
                                                              ENU=Document No.;
                                                              ESP=Nß documento;
                                                              FIN=Asiakirjan nro;
                                                              FRA=N¯ document;
                                                              ISL=N£mer fylgiskjals;
                                                              ITA=Nr. documento;
                                                              NLD=Documentnr.;
                                                              NOR=Bilagsnr.;
                                                              SVE=Dokumentnr] }
    { 61  ;   ;External Document No.;Code35       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Eksternt bilagsnr.;
                                                              DEU=Externe Belegnummer;
                                                              ENU=External Document No.;
                                                              ESP=Nß documento externo;
                                                              FIN=Ulkoisen asiakirjan nro;
                                                              FRA=N¯ doc. externe;
                                                              ISL=N£mer utana–k. skjals;
                                                              ITA=Nr. documento esterno;
                                                              NLD=Extern documentnr.;
                                                              NOR=Eksterndokumentnr.;
                                                              SVE=Externt dokumentnr] }
    { 65  ;   ;Document Date       ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Bilagsdato;
                                                              DEU=Belegdatum;
                                                              ENU=Document Date;
                                                              FIN=Asiakirjan pvm;
                                                              FRA=Date document;
                                                              ISL=Dags. fylgiskjals;
                                                              ITA=Data documento;
                                                              NLD=Documentdatum;
                                                              NOR=Bilagsdato;
                                                              SVE=Dokumentdatum] }
    { 70  ;   ;Posting Date        ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Bogfõringsdato;
                                                              DEU=Buchungsdatum;
                                                              ENU=Posting Date;
                                                              FIN=Kirjauspvm.;
                                                              FRA=Date comptabilisation;
                                                              ISL=B¢kunardags.;
                                                              ITA=Data di registrazione;
                                                              NLD=Boekingsdatum;
                                                              NOR=Bokfõringsdato;
                                                              SVE=Bokfîringsdatum] }
    { 80  ;   ;Due Date            ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Forfaldsdato;
                                                              DEU=FÑlligkeitsdatum;
                                                              ENU=Due Date;
                                                              FIN=ErÑpÑivÑ;
                                                              FRA=Date d'ÇchÇance;
                                                              ISL=Gjalddagi;
                                                              ITA=Data scadenza;
                                                              NLD=Vervaldatum;
                                                              NOR=Forfallsdato;
                                                              SVE=Fîrfallodatum] }
    { 90  ;   ;Amount              ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Belõb;
                                                              DEU=Betrag;
                                                              ENU=Amount;
                                                              ESP=Importe;
                                                              FIN=Summa;
                                                              FRA=Montant;
                                                              ISL=Upphë–;
                                                              ITA=Importo;
                                                              NLD=Bedrag;
                                                              NOR=Belõp;
                                                              SVE=Belopp] }
    { 95  ;   ;Amount (LCY)        ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Belõb (RV);
                                                              DEU=Betrag (MW);
                                                              ENU=Amount (LCY);
                                                              ESP=Importe (DL);
                                                              FIN=Summa (PVA);
                                                              FRA=Montant DS;
                                                              ISL=Upphë– (SGM);
                                                              ITA=Importo (VL);
                                                              NLD=Bedrag (LV);
                                                              NOR=Belõp (NOK);
                                                              SVE=Belopp (BVA)] }
    { 100 ;   ;Balance             ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Saldo;
                                                              DEU=Saldo;
                                                              ENU=Balance;
                                                              ESP=Saldo;
                                                              FIN=Saldo;
                                                              FRA=Solde;
                                                              ISL=Sta–a;
                                                              ITA=Saldo;
                                                              NLD=Saldo;
                                                              NOR=Saldo;
                                                              SVE=Saldo] }
    { 105 ;   ;Balance (LCY)       ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Saldo (RV);
                                                              DEU=Saldo (MW);
                                                              ENU=Balance (LCY);
                                                              ESP=Saldo (DL);
                                                              FIN=Saldo (PVA);
                                                              FRA=Solde DS;
                                                              ISL=Sta–a (SGM);
                                                              ITA=Saldo (VL);
                                                              NLD=Saldo (LV);
                                                              NOR=Saldo (NOK);
                                                              SVE=Saldo (BVA)] }
    { 110 ;   ;Amount 1            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(1) }
    { 115 ;   ;Amount 1 (LCY)      ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(1) }
    { 120 ;   ;Amount 2            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(2) }
    { 125 ;   ;Amount 2 (LCY)      ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(2) }
    { 130 ;   ;Amount 3            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(3) }
    { 135 ;   ;Amount 3 (LCY)      ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(3) }
    { 140 ;   ;Amount 4            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(4) }
    { 145 ;   ;Amount 4 (LCY)      ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(4) }
    { 150 ;   ;Amount 5            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(5) }
    { 155 ;   ;Amount 5 (LCY)      ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(5) }
    { 160 ;   ;Amount 6            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(6) }
    { 165 ;   ;Amount 6 (LCY)      ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(6) }
    { 167 ;   ;Amount 7            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(7) }
    { 170 ;   ;Amount 7 (LCY)      ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(7) }
    { 175 ;   ;Amount 8            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(8) }
    { 180 ;   ;Amount 8 (LCY)      ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(8) }
    { 182 ;   ;Amount 9            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(9) }
    { 185 ;   ;Amount 9 (LCY)      ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(9) }
    { 190 ;   ;Amount 10           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(10) }
    { 195 ;   ;Amount 10 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(10) }
    { 200 ;   ;Amount 11           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(11) }
    { 205 ;   ;Amount 11 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(11) }
    { 210 ;   ;Amount 12           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(12) }
    { 215 ;   ;Amount 12 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(12) }
    { 220 ;   ;Amount 13           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(13) }
    { 225 ;   ;Amount 13 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(13) }
    { 230 ;   ;Amount 14           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(14) }
    { 235 ;   ;Amount 14 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(14) }
    { 240 ;   ;Amount 15           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(15) }
    { 245 ;   ;Amount 15 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(15) }
    { 250 ;   ;Amount 16           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(16) }
    { 255 ;   ;Amount 16 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(16) }
    { 260 ;   ;Amount 17           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(17) }
    { 265 ;   ;Amount 17 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(17) }
    { 270 ;   ;Amount 18           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(18) }
    { 275 ;   ;Amount 18 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(18) }
    { 280 ;   ;Amount 19           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(19) }
    { 285 ;   ;Amount 19 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(19) }
    { 290 ;   ;Amount 20           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(20) }
    { 295 ;   ;Amount 20 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(20) }
    { 300 ;   ;Amount 21           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(21) }
    { 305 ;   ;Amount 21 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(21) }
    { 310 ;   ;Amount 22           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(22) }
    { 315 ;   ;Amount 22 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(22) }
    { 320 ;   ;Amount 23           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(23) }
    { 325 ;   ;Amount 23 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(23) }
    { 330 ;   ;Amount 24           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(24) }
    { 335 ;   ;Amount 24 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(24) }
    { 340 ;   ;Amount 25           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(25) }
    { 345 ;   ;Amount 25 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(25) }
    { 350 ;   ;Amount 26           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(26) }
    { 355 ;   ;Amount 26 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(26) }
    { 360 ;   ;Amount 27           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(27) }
    { 365 ;   ;Amount 27 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(27) }
    { 370 ;   ;Amount 28           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(28) }
    { 375 ;   ;Amount 28 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(28) }
    { 380 ;   ;Amount 29           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(29) }
    { 385 ;   ;Amount 29 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(29) }
    { 390 ;   ;Amount 30           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(30) }
    { 395 ;   ;Amount 30 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(30) }
    { 400 ;   ;Amount 31           ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(31) }
    { 405 ;   ;Amount 31 (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionClass=GetCaptionClass(31) }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Currency Code                            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      HeaderText@1000000000 : ARRAY [31] OF Text;

    PROCEDURE GetCaptionClass@1000000000(FieldNo@1000000000 : Integer) : Text;
    BEGIN
      EXIT('3,' + HeaderText[FieldNo]);
    END;

    PROCEDURE SetCaptions@1000000001(VAR Args@1000000000 : Record 70219);
    VAR
      i@1000000001 : Integer;
    BEGIN
      FOR i := 1 TO ARRAYLEN(HeaderText) DO
        HeaderText[i] := Args.GetCaption(i);
    END;

    PROCEDURE GetAccountName@1000000002();
    VAR
      Customer@1000000000 : Record 18;
      Vendor@1000000001 : Record 23;
    BEGIN
      CASE "Account Type" OF
        "Account Type"::Customer:
          BEGIN
            Customer.GET("Account No.");
            "Account Name" := Customer.Name;
          END;
        "Account Type"::Vendor:
          BEGIN
            Vendor.GET("Account No.");
            "Account Name" := Vendor.Name;
          END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70230 ForNAV Statistics Args.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Currency Code       ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Valutakode;
                                                              DEU=WÑhrungscode;
                                                              ENU=Currency Code;
                                                              ESP=C¢d. divisa;
                                                              FIN=Valuutan koodi;
                                                              FRA=Code devise;
                                                              ISL=Gjaldmi–ilsk¢ti;
                                                              ITA=Cod. valuta;
                                                              NLD=Valutacode;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 2   ;   ;Invoices            ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Fakturaer;
                                                              DEU=Rechnungen;
                                                              ENU=Invoices;
                                                              ESP=Facturas;
                                                              FIN=Laskut;
                                                              FRA=Factures;
                                                              ISL=Reikningar;
                                                              ITA=Fatture;
                                                              NLD=Facturen;
                                                              NOR=Fakturaer;
                                                              SVE=Fakturor] }
    { 3   ;   ;Credit Memos        ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Kreditnotaer;
                                                              DEU=Gutschriften;
                                                              ENU=Credit Memos;
                                                              ESP=Abonos;
                                                              FIN=Hyvityslaskujen;
                                                              FRA=Avoirs;
                                                              ISL=Kreditreikninga;
                                                              ITA=Note credito;
                                                              NLD=Creditnota's;
                                                              NOR=Kreditnotaer;
                                                              SVE=Kreditnota] }
    { 4   ;   ;Customer No.        ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Debitornr.;
                                                              DEU=Debitorennr.;
                                                              ENU=Customer No.;
                                                              ESP=Nß cliente;
                                                              FIN=Asiakasnro;
                                                              FRA=N¯ client;
                                                              ISL=N£mer vi–skiptamanns;
                                                              ITA=Nr. cliente;
                                                              NLD=Klantnr.;
                                                              NOR=Kundenr.;
                                                              SVE=Kundnr] }
    { 5   ;   ;Vendor No.          ;Boolean       ;DataClassification=SystemMetadata }
  }
  KEYS
  {
    {    ;Currency Code                           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateCurrencies@1000000000();
    VAR
      Currency@1000000000 : Record 4;
    BEGIN
      IF Currency.FINDSET THEN
        REPEAT
          "Currency Code" := Currency.Code;
          INSERT;
        UNTIL Currency.NEXT = 0;

      IF NOT GET('') THEN BEGIN
        "Currency Code" := '';
        INSERT;
      END;
    END;

    PROCEDURE GetInvoiceAmountLCY@1000000001(SalesInvoiceHeader@1000000000 : Record 112) : Decimal;
    VAR
      CustLedgEntry@1000000002 : Record 21;
    BEGIN
      CustLedgEntry.SETCURRENTKEY("Document No.");
      CustLedgEntry.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::Invoice);
      CustLedgEntry.SETRANGE("Customer No.",SalesInvoiceHeader."Bill-to Customer No.");
      IF CustLedgEntry.FINDFIRST THEN
        EXIT(CustLedgEntry."Sales (LCY)");
    END;

    PROCEDURE GetInvoiceCostLCY@1000000002(SalesInvoiceHeader@1000000000 : Record 112) : Decimal;
    VAR
      SalesInvoiceLine@1000000001 : Record 113;
      CostCalcMgt@1000000002 : Codeunit 5836;
      CostLCY@1000000003 : Decimal;
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      IF SalesInvoiceLine.FIND('-') THEN
        REPEAT
          CostLCY := CostLCY + CostCalcMgt.CalcSalesInvLineCostLCY(SalesInvoiceLine);
        UNTIL SalesInvoiceLine.NEXT = 0;

      EXIT(CostLCY);
    END;

    PROCEDURE GetCreditMemoAmountLCY@1000000004(SalesCrMemoHeader@1000000000 : Record 114) : Decimal;
    VAR
      CustLedgEntry@1000000002 : Record 21;
    BEGIN
      CustLedgEntry.SETCURRENTKEY("Document No.");
      CustLedgEntry.SETRANGE("Document No.",SalesCrMemoHeader."No.");
      CustLedgEntry.SETRANGE("Document Type",CustLedgEntry."Document Type"::"Credit Memo");
      CustLedgEntry.SETRANGE("Customer No.",SalesCrMemoHeader."Bill-to Customer No.");
      IF CustLedgEntry.FINDFIRST THEN
        EXIT(CustLedgEntry."Sales (LCY)");
    END;

    PROCEDURE GetCreditMemoCostLCY@1000000003(SalesCrMemoHeader@1000000000 : Record 114) : Decimal;
    VAR
      SalesCrMemoLine@1000000001 : Record 115;
      CostCalcMgt@1000000002 : Codeunit 5836;
      CostLCY@1000000003 : Decimal;
    BEGIN
      SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHeader."No.");
      IF SalesCrMemoLine.FIND('-') THEN
        REPEAT
          CostLCY := CostLCY + CostCalcMgt.CalcSalesCrMemoLineCostLCY(SalesCrMemoLine);
        UNTIL SalesCrMemoLine.NEXT = 0;

      EXIT(CostLCY);
    END;

    PROCEDURE GetPurchInvAmountLCY@1000000005(PurchInvHeader@1000000000 : Record 122) : Decimal;
    VAR
      VendLedgEntry@1000000002 : Record 25;
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",PurchInvHeader."No.");
      VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Invoice);
      VendLedgEntry.SETRANGE("Vendor No.", PurchInvHeader."Pay-to Vendor No.");
      IF VendLedgEntry.FINDFIRST THEN
        EXIT(VendLedgEntry."Purchase (LCY)");
    END;

    PROCEDURE GetPurchCrMemoAmountLCY@1000000006(PurchCrMemoHdr@1000000000 : Record 124) : Decimal;
    VAR
      VendLedgEntry@1000000002 : Record 25;
    BEGIN
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",PurchCrMemoHdr."No.");
      VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::"Credit Memo");
      VendLedgEntry.SETRANGE("Vendor No.", PurchCrMemoHdr."Pay-to Vendor No.");
      IF VendLedgEntry.FINDFIRST THEN
        EXIT(VendLedgEntry."Purchase (LCY)");
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70239 ForNAV Inv. to G/L Arguments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;To Date             ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Til dato;
                                                              DEU=Bis Datum;
                                                              ENU=To Date;
                                                              ESP=Hasta fecha;
                                                              FIN=Pvm:ÑÑn asti;
                                                              FRA=Date fin;
                                                              ISL=Til dags.;
                                                              ITA=A data;
                                                              NLD=T/m datum;
                                                              NOR=Til dato;
                                                              SVE=Till datum] }
    { 2   ;   ;Location Code       ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Lokationskode;
                                                              DEU=Lagerortcode;
                                                              ENU=Location Code;
                                                              ESP=C¢d. almacÇn;
                                                              FIN=Sijaintikoodi;
                                                              FRA=Code magasin;
                                                              ISL=K¢ti birg–ageymslu;
                                                              ITA=Cod. ubicazione;
                                                              NLD=Vestiging;
                                                              NOR=Lokasjonskode;
                                                              SVE=LagerstÑllekod] }
    { 3   ;   ;Variant Code        ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Variantkode;
                                                              DEU=Variantencode;
                                                              ENU=Variant Code;
                                                              ESP=C¢d. variante;
                                                              FIN=Varianttikoodi;
                                                              FRA=Code variante;
                                                              ISL=Afbrig–isk¢ti;
                                                              ITA=Cod. variante;
                                                              NLD=Variant;
                                                              NOR=Variantkode;
                                                              SVE=Variantkod] }
    { 4   ;   ;Amounts in Add. Currency;Boolean   ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Belõb i ekstra valuta;
                                                              DEU=BetrÑge in BW;
                                                              ENU=Amounts in Add. Currency;
                                                              ESP=Importes en divisa adic.;
                                                              FIN=Summat lisÑvaluuttana;
                                                              FRA=Montants DR;
                                                              ISL=Upphë–ir ° î–rum gjaldm.;
                                                              ITA=Importi in val. addizionale;
                                                              NLD=Bedragen in rapp.-valuta;
                                                              NOR=Belõp i tilleggsvaluta;
                                                              SVE=Belopp i alt. valuta] }
  }
  KEYS
  {
    {    ;To Date                                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateBuffer@1000000000(VAR Item@1000000002 : Record 27;VAR InvToGLBuffer@1000000000 : Record 70240);
    VAR
      InvToGLRecon@1000000001 : Query 70240;
    BEGIN
      InvToGLBuffer.RESET;
      InvToGLBuffer.DELETEALL;

      InvToGLRecon.SETRANGE(No, Item."No.");
      InvToGLRecon.SETRANGE(Date_Filter, 0D, "To Date");
      InvToGLRecon.SETFILTER(Valued_Quantity, '<0');
      InvToGLRecon.OPEN;
      WITH InvToGLBuffer DO
        WHILE InvToGLRecon.READ DO BEGIN
          CreateRowSetDescription(InvToGLBuffer, InvToGLRecon);
          "Cost Amount (Expected)" := InvToGLRecon.Sum_Cost_Amount_Expected;
          "Cost Amount (Expected) (ACY)" := InvToGLRecon.Sum_Cost_Amount_Expected_ACY;
          "Expected Cost Posted to G/L" := InvToGLRecon.Sum_Expected_Cost_Posted_to_GL;
          "Exp. Cost Posted to G/L (ACY)" := InvToGLRecon.Sum_Exp_Cost_Posted_to_GL_ACY;
          "Valued Quantity" := InvToGLRecon.Sum_Valued_Quantity;
          "Invoiced Quantity" := InvToGLRecon.Sum_Invoiced_Quantity;
          "Cost Amount (Actual)" := InvToGLRecon.Sum_Cost_Amount_Actual;
          "Cost Amount (Actual) (ACY)" := InvToGLRecon.Sum_Cost_Amount_Actual_ACY;
          "Cost Posted to G/L" := InvToGLRecon.Sum_Cost_Posted_to_G_L;
          "Cost Posted to G/L (ACY)" := InvToGLRecon.Sum_Cost_Posted_to_G_L_ACY;
          CreateValues(Rec, TRUE, FALSE);
          MODIFY;
        END;

      InvToGLRecon.SETRANGE(No, Item."No.");
      InvToGLRecon.SETRANGE(Date_Filter, 0D, "To Date");
      InvToGLRecon.SETFILTER(Valued_Quantity, '>0');
      InvToGLRecon.OPEN;
      WITH InvToGLBuffer DO
        WHILE InvToGLRecon.READ DO BEGIN
          CreateRowSetDescription(InvToGLBuffer, InvToGLRecon);
          "Cost Amount (Expected)" := InvToGLRecon.Sum_Cost_Amount_Expected;
          "Cost Amount (Expected) (ACY)" := InvToGLRecon.Sum_Cost_Amount_Expected_ACY;
          "Expected Cost Posted to G/L" := InvToGLRecon.Sum_Expected_Cost_Posted_to_GL;
          "Exp. Cost Posted to G/L (ACY)" := InvToGLRecon.Sum_Exp_Cost_Posted_to_GL_ACY;
          "Valued Quantity" := InvToGLRecon.Sum_Valued_Quantity;
          "Invoiced Quantity" := InvToGLRecon.Sum_Invoiced_Quantity;
          "Cost Amount (Actual)" += InvToGLRecon.Sum_Cost_Amount_Actual;
          "Cost Amount (Actual) (ACY)" += InvToGLRecon.Sum_Cost_Amount_Actual_ACY;
          "Cost Posted to G/L" += InvToGLRecon.Sum_Cost_Posted_to_G_L;
          "Cost Posted to G/L (ACY)" += InvToGLRecon.Sum_Cost_Posted_to_G_L_ACY;
          CreateValues(Rec, FALSE, TRUE);
          MODIFY;
        END;
    END;

    LOCAL PROCEDURE CreateRowSetDescription@1000000002(VAR InvToGLBuffer@1000000001 : Record 70240;VAR InvToGLRecon@1000000000 : Query 70240);
    BEGIN
      IF NOT InvToGLBuffer.GET(InvToGLRecon.No, InvToGLRecon.Variant_Code, InvToGLRecon.Location_Code) THEN BEGIN
        InvToGLBuffer.INIT;
        InvToGLBuffer."Item No." := InvToGLRecon.No;
        InvToGLBuffer."Variant Code" := InvToGLRecon.Variant_Code;
        InvToGLBuffer."Location Code" := InvToGLRecon.Location_Code;
        InvToGLBuffer.INSERT;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70240 ForNAV Inventory to G/L Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Item No.            ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Varenr.;
                                                              DEU=Artikelnummer;
                                                              ENU=Item No.;
                                                              ESP=N.ß producto;
                                                              FIN=Nimikenro;
                                                              FRA=N¯ article;
                                                              ISL=Vîrunr.;
                                                              ITA=Nr. articolo;
                                                              NLD=Artikelnr.;
                                                              NOR=Varenr.;
                                                              SVE=Artikelnr] }
    { 2   ;   ;Variant Code        ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Variantkode;
                                                              DEU=Variantencode;
                                                              ENU=Variant Code;
                                                              ESP=C¢d. variante;
                                                              FIN=Varianttikoodi;
                                                              FRA=Code variante;
                                                              ISL=Afbrig–isk¢ti;
                                                              ITA=Cod. variante;
                                                              NLD=Variant;
                                                              NOR=Variantkode;
                                                              SVE=Variantkod] }
    { 3   ;   ;Location Code       ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Lokationskode;
                                                              DEU=Lagerortcode;
                                                              ENU=Location Code;
                                                              ESP=C¢d. almacÇn;
                                                              FIN=Sijaintikoodi;
                                                              FRA=Code magasin;
                                                              ISL=K¢ti birg–ageymslu;
                                                              ITA=Cod. ubicazione;
                                                              NLD=Vestiging;
                                                              NOR=Lokasjonskode;
                                                              SVE=LagerstÑllekod] }
    { 8   ;   ;Inventory Value     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Lagervërdi;
                                                              DEU=Lagerwert;
                                                              ENU=Inventory Value;
                                                              ESP=Valor inventario;
                                                              FIN=Varaston arvo;
                                                              FRA=Valeur stock;
                                                              ISL=Birg–avir–i;
                                                              ITA=Valore magazzino;
                                                              NLD=Voorraadwaarde;
                                                              NOR=Lagerverdi;
                                                              SVE=LagervÑrde] }
    { 9   ;   ;Received Not Invoiced;Decimal      ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Modtag belõb (ufakt.);
                                                              DEU=Nicht fakt. Wareneingangen;
                                                              ENU=Received Not Invoiced;
                                                              ESP=Recepci¢n no facturado;
                                                              FIN=Vastaanotto toimitukset;
                                                              FRA=Recevoir non facturÇ;
                                                              ISL=M¢ttaka, ¢reikningsfërt;
                                                              ITA=Ricevi non fatturato;
                                                              NLD=Ontvangen/Niet gefact.;
                                                              NOR=Motta, ikke fakturert;
                                                              SVE=Mottagna ej fakturerad] }
    { 10  ;   ;Shipped Not Invoiced;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Lev. belõb (ufakt.);
                                                              DEU=Nicht fakt. Lieferungen;
                                                              ENU=Shipped Not Invoiced;
                                                              ESP=Enviado no facturado;
                                                              FIN=Laskuttamattomat toimitukset;
                                                              FRA=LivrÇ non facturÇ;
                                                              ISL=Afhent, ¢reikningsfërt;
                                                              ITA=Spedito non fatturato;
                                                              NLD=Verzonden/Niet gefact.;
                                                              NOR=Levert, ikke fakturert;
                                                              SVE=Levererat ej fakturerat] }
    { 11  ;   ;Total Expected Cost ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Forventet kostpris;
                                                              DEU=Soll-Kosten;
                                                              ENU=Total Expected Cost;
                                                              ESP=Coste previsto;
                                                              FIN=Oletettu kustannus;
                                                              FRA=Coñt prÇvu;
                                                              ISL=Vëntanl. kostna–ur;
                                                              ITA=Costo previsto;
                                                              NLD=Verwachte kosten;
                                                              NOR=Forventet kostnad;
                                                              SVE=Totala fîrvÑntad kostnad] }
    { 12  ;   ;Received Not Invoiced Posted;Decimal;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Modtag belõb (ufakt./bogfõrt);
                                                              DEU=Nicht fakt. Wareneingangen (Gebucht);
                                                              ENU=Received Not Invoiced (Posted);
                                                              ESP=Recepci¢n no facturado (Registrado);
                                                              FIN=Vastaanotto toimitukset (Kirjattu);
                                                              FRA=Recevoir non facturÇ (ValidÇ);
                                                              ISL=M¢ttaka, ¢reikningsfërt (B¢ka–);
                                                              ITA=Ricevi non fatturato (Registrato);
                                                              NLD=Ontvangen/Niet gefact. (Geboekt);
                                                              NOR=Motta, ikke fakturert (Bokfõrt);
                                                              SVE=Mottagna Ej Fakturerade Postad] }
    { 13  ;   ;Shipped Not Invoiced Posted;Decimal;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Lev. belõb (ufakt./bogfõrt);
                                                              DEU=Nicht fakt. Lieferungen (Gebucht);
                                                              ENU=Shipped Not Invoiced (Posted);
                                                              ESP=Enviado no facturado (Registrado);
                                                              FIN=Laskuttamattomat toimitukset (Kirjattu);
                                                              FRA=LivrÇ non facturÇ (ValidÇ);
                                                              ISL=Afhent, ¢reikningsfërt (B¢ka–);
                                                              ITA=Spedito non fatturato (Registrato);
                                                              NLD=Verzonden/Niet gefact. (Geboekt);
                                                              NOR=Levert, ikke fakturert (Bokfõrt);
                                                              SVE=Skickas ej Fakturerad] }
    { 14  ;   ;Net Expected Cost Posted;Decimal   ;DataClassification=SystemMetadata }
    { 15  ;   ;Net Expected Cost Not Posted;Decimal;
                                                   DataClassification=SystemMetadata }
    { 16  ;   ;Total Invoiced Value;Decimal       ;DataClassification=SystemMetadata }
    { 17  ;   ;Invoiced Value Posted;Decimal      ;DataClassification=SystemMetadata }
    { 18  ;   ;Invoiced Value Not Posted;Decimal  ;DataClassification=SystemMetadata }
    { 19  ;   ;Cost Amount (Expected);Decimal     ;DataClassification=SystemMetadata }
    { 20  ;   ;Cost Amount (Expected) (ACY);Decimal;
                                                   DataClassification=SystemMetadata }
    { 30  ;   ;Expected Cost Posted to G/L;Decimal;DataClassification=SystemMetadata }
    { 40  ;   ;Exp. Cost Posted to G/L (ACY);Decimal;
                                                   DataClassification=SystemMetadata }
    { 50  ;   ;Valued Quantity     ;Decimal       ;DataClassification=SystemMetadata }
    { 60  ;   ;Invoiced Quantity   ;Decimal       ;DataClassification=SystemMetadata }
    { 70  ;   ;Cost Amount (Actual);Decimal       ;DataClassification=SystemMetadata }
    { 80  ;   ;Cost Amount (Actual) (ACY);Decimal ;DataClassification=SystemMetadata }
    { 90  ;   ;Cost Posted to G/L  ;Decimal       ;DataClassification=SystemMetadata }
    { 100 ;   ;Cost Posted to G/L (ACY);Decimal   ;DataClassification=SystemMetadata }
    { 200 ;   ;Pending Adj.        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Post Value Entry to G/L" WHERE (Item No.=FIELD(Item No.))) }
  }
  KEYS
  {
    {    ;Item No.,Variant Code,Location Code     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateValues@1000000000(VAR Args@1000000000 : Record 70239;Received@1000000001 : Boolean;Shipped@1000000002 : Boolean);
    VAR
      WrongCallErr@1000000003 : TextConst 'CSY=Rangt virka s°mtal;DAN=Mauvais appel de fonction;ENU=Wrong Function Call;ESP=Falscher Funktionsaufruf;FIN=Chiamata di funzione errata;FRA=Forkert funktionsopkald;ISL=Feil funksjonsanrop;ITA=VÑÑrÑ toimintapuhelu;NLD=Llamada de funci¢n incorrecta;NOR=Verkeerde functieoproep;SVE=Felaktigt samtal';
      CheckTemporary@1000 : Codeunit 70008;
    BEGIN
      IF (Received = Shipped) OR (CheckTemporary.IsTemporary(Rec, FALSE)) THEN
        ERROR(WrongCallErr);

      IF "Valued Quantity" = 0 THEN
        "Valued Quantity" := "Invoiced Quantity"
      ELSE
        IF "Valued Quantity" > 0 THEN BEGIN
          IF Args."Amounts in Add. Currency" THEN BEGIN
            "Received Not Invoiced" := "Cost Amount (Expected) (ACY)";
            "Received Not Invoiced Posted" := "Exp. Cost Posted to G/L (ACY)";
          END ELSE BEGIN
            "Received Not Invoiced" := "Cost Amount (Expected)";
            "Received Not Invoiced Posted" := "Expected Cost Posted to G/L";
          END;
        END ELSE
          IF "Valued Quantity" < 0 THEN
            IF Args."Amounts in Add. Currency" THEN BEGIN
              "Shipped Not Invoiced" := "Cost Amount (Expected) (ACY)";
              "Shipped Not Invoiced Posted" := "Exp. Cost Posted to G/L (ACY)";
            END ELSE BEGIN
              "Shipped Not Invoiced" := "Cost Amount (Expected)";
              "Shipped Not Invoiced Posted" := "Expected Cost Posted to G/L";
            END;

      "Total Expected Cost" := "Received Not Invoiced" + "Shipped Not Invoiced";
      "Net Expected Cost Posted" := "Received Not Invoiced Posted" + "Shipped Not Invoiced Posted";
      "Net Expected Cost Not Posted" := "Total Expected Cost" - "Net Expected Cost Posted";

      IF Args."Amounts in Add. Currency" THEN BEGIN
        "Total Invoiced Value" := "Cost Amount (Actual) (ACY)";
        "Invoiced Value Posted" := "Cost Posted to G/L (ACY)";
      END ELSE BEGIN
        "Total Invoiced Value" := "Cost Amount (Actual)";
        "Invoiced Value Posted" := "Cost Posted to G/L";
      END;

      "Invoiced Value Not Posted" := "Total Invoiced Value" - "Invoiced Value Posted";
      "Inventory Value" := "Total Invoiced Value" + "Total Expected Cost";
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70242 ForNAV Inv. Valuation Args.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Starting Date       ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Startdato;
                                                              DEU=Startdatum;
                                                              ENU=Starting Date;
                                                              ESP=Fecha inicial;
                                                              FIN=Aloituspvm;
                                                              FRA=Date dÇbut;
                                                              ISL=Upphafsdagsetning;
                                                              ITA=Data inizio;
                                                              NLD=Begindatum;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 2   ;   ;Ending Date         ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Slutdato;
                                                              DEU=Enddatum;
                                                              ENU=Ending Date;
                                                              ESP=Fecha final;
                                                              FIN=Lopetuspvm;
                                                              FRA=Date fin;
                                                              ISL=Lokadagsetning;
                                                              ITA=Data fine;
                                                              NLD=Einddatum;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 3   ;   ;Expected Cost       ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Forventet kostpris;
                                                              DEU=Soll-Kosten;
                                                              ENU=Expected Cost;
                                                              ESP=Coste previsto;
                                                              FIN=Oletettu kustannus;
                                                              FRA=Coñt prÇvu;
                                                              ISL=Vëntanl. kostna–ur;
                                                              ITA=Costo previsto;
                                                              NLD=Verwachte kosten;
                                                              NOR=Forventet kostnad;
                                                              SVE=FîrvÑntad kostnad] }
    { 4   ;   ;Quantity            ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Antal;
                                                              DEU=Menge;
                                                              ENU=Quantity;
                                                              ESP=Cantidad;
                                                              FIN=MÑÑrÑ;
                                                              FRA=QuantitÇ;
                                                              ISL=Magn;
                                                              ITA=QuantitÖ;
                                                              NLD=Aantal;
                                                              NOR=Antall;
                                                              SVE=Antal] }
    { 5   ;   ;Value               ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Vërdi;
                                                              DEU=Wert;
                                                              ENU=Value;
                                                              ESP=Valor;
                                                              FIN=Arvo;
                                                              FRA=Valeur;
                                                              ISL=Vir–i;
                                                              ITA=Valore;
                                                              NLD=Waarde;
                                                              NOR=Verdi;
                                                              SVE=VÑrde] }
    { 6   ;   ;Increases (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Stiger (RV);
                                                              DEU=Erhîhen (MW);
                                                              ENU=Increases (LCY);
                                                              ESP=Aumentar (DL);
                                                              FIN=LisÑÑntyy (PVA);
                                                              FRA=Augmenter DS;
                                                              ISL=Auka (SGM);
                                                              ITA=Aumenta (VL);
                                                              NLD=Toenamen (LV);
                                                              NOR=ùker (NOK);
                                                              SVE=ôkar (BVA)] }
    { 7   ;   ;Decreases (LCY)     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Reducerer (RV);
                                                              DEU=Verringern (MW);
                                                              ENU=Decreases (LCY);
                                                              ESP=Disminuci¢n (DL);
                                                              FIN=VÑhennys (PVA);
                                                              FRA=Diminution DS;
                                                              ISL=Minnka (SGM);
                                                              ITA=Diminuire (VL);
                                                              NLD=Afnamen (LV);
                                                              NOR=Avta (NOK);
                                                              SVE=Minskar (BVA)] }
    { 8   ;   ;Cost Posted to G/L  ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Bogfõrt kostvërdi;
                                                              DEU=Gebuchte Lagerregulierung;
                                                              ENU=Cost Posted to G/L;
                                                              ESP=Coste regis. en contab.;
                                                              FIN=KP:oon kirjattu kustannus;
                                                              FRA=Coñt validÇ en comptabilitÇ;
                                                              ISL=Kostna–ur b¢ka–ur ° fj†rhag;
                                                              ITA=Costo registrato in C/G;
                                                              NLD=Vrd.-waarde geboekt;
                                                              NOR=Bokfõrt kost;
                                                              SVE=Kostnad bokfîrd i redov.] }
  }
  KEYS
  {
    {    ;Starting Date                           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70244 ForNAV Inventory Valuation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Item No.            ;Code20        ;DataClassification=SystemMetadata }
    { 2   ;   ;Inventory Posting Group;Code10     ;DataClassification=SystemMetadata }
    { 3   ;   ;Location Code       ;Code10        ;DataClassification=SystemMetadata }
    { 4   ;   ;Variant Code        ;Code10        ;DataClassification=SystemMetadata }
    { 8   ;   ;Description         ;Text250       ;DataClassification=SystemMetadata }
    { 9   ;   ;Print Expected Cost ;Boolean       ;DataClassification=SystemMetadata }
    { 10  ;   ;StartingInvoicedValue;Decimal      ;DataClassification=SystemMetadata }
    { 11  ;   ;StartingInvoicedQty ;Decimal       ;DataClassification=SystemMetadata }
    { 12  ;   ;StartingExpectedValue;Decimal      ;DataClassification=SystemMetadata }
    { 13  ;   ;StartingExpectedQty ;Decimal       ;DataClassification=SystemMetadata }
    { 14  ;   ;IncreaseInvoicedValue;Decimal      ;DataClassification=SystemMetadata }
    { 15  ;   ;IncreaseInvoicedQty ;Decimal       ;DataClassification=SystemMetadata }
    { 16  ;   ;IncreaseExpectedValue;Decimal      ;DataClassification=SystemMetadata }
    { 17  ;   ;IncreaseExpectedQty ;Decimal       ;DataClassification=SystemMetadata }
    { 18  ;   ;DecreaseInvoicedValue;Decimal      ;DataClassification=SystemMetadata }
    { 19  ;   ;DecreaseInvoicedQty ;Decimal       ;DataClassification=SystemMetadata }
    { 20  ;   ;DecreaseExpectedValue;Decimal      ;DataClassification=SystemMetadata }
    { 21  ;   ;DecreaseExpectedQty ;Decimal       ;DataClassification=SystemMetadata }
    { 22  ;   ;CostPostedToGL      ;Decimal       ;DataClassification=SystemMetadata }
    { 23  ;   ;InvCostPostedToGL   ;Decimal       ;DataClassification=SystemMetadata }
    { 24  ;   ;ExpCostPostedToGL   ;Decimal       ;DataClassification=SystemMetadata }
  }
  KEYS
  {
    {    ;Item No.,Location Code,Variant Code     ;Clustered=Yes }
    {    ;Inventory Posting Group                  }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE SetPrintExpectedCost@1(Args@1000 : Record 70242);
    BEGIN
      "Print Expected Cost" := PrintExpectedCost(Args);
    END;

    LOCAL PROCEDURE PrintExpectedCost@2(Args@1000 : Record 70242) : Boolean;
    BEGIN
      IF NOT Args."Expected Cost" THEN
        EXIT(FALSE);

      IF StartingExpectedQty <> StartingInvoicedQty THEN
        EXIT(TRUE);

      IF IncreaseExpectedQty <> IncreaseInvoicedQty THEN
        EXIT(TRUE);

      IF DecreaseExpectedQty <> DecreaseInvoicedQty THEN
        EXIT(TRUE);

      IF StartingInvoicedValue <> StartingExpectedValue THEN
        EXIT(TRUE);

      IF IncreaseInvoicedValue <> IncreaseExpectedValue THEN
        EXIT(TRUE);

      IF DecreaseInvoicedValue <> DecreaseExpectedValue THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70248 ForNAV Cust./Item Stat. Args.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Print Details       ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Udskriv detaljer;
                                                              DEU=Details drucken;
                                                              ENU=Print Details;
                                                              ESP=Imprimir detalles;
                                                              FIN=Tulosta yksityiskohdat;
                                                              FRA=Imprimer dÇtails;
                                                              ISL=Prenta sundurli–un;
                                                              ITA=Stampa dettagli;
                                                              NLD=Details afdrukken;
                                                              NOR=Skriv ut spesifikasjoner;
                                                              SVE=Skriv ut detaljer] }
    { 2   ;   ;New Page Per Customer;Boolean      ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Skift side pr. debitor;
                                                              DEU=Neue Seite pro Debitor;
                                                              ENU=New Page per Customer;
                                                              ESP=P†gina nueva por cliente;
                                                              FIN=Uusi sivu asiakasta kohti;
                                                              FRA=Nouvelle page par client;
                                                              ISL=NÏ bla–s°–a † hvern vi–skiptamann;
                                                              ITA=Nuova pagina per cliente;
                                                              NLD=Nieuwe pagina per klant;
                                                              NOR=Sideskift per kunde;
                                                              SVE=Ny sida per kund] }
  }
  KEYS
  {
    {    ;Print Details                           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70250 ForNAV Statement Arguments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Start Date          ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Startdato;
                                                              DEU=Startdatum;
                                                              ENU=Starting Date;
                                                              ESP=Fecha inicial;
                                                              FIN=Aloituspvm;
                                                              FRA=Date dÇbut;
                                                              ISL=Upphafsdagsetning;
                                                              ITA=Data inizio;
                                                              NLD=Begindatum;
                                                              NOR=Startdato;
                                                              SVE=Startdatum] }
    { 2   ;   ;Ending Date         ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Slutdato;
                                                              DEU=Enddatum;
                                                              ENU=Ending Date;
                                                              ESP=Fecha final;
                                                              FIN=Lopetuspvm;
                                                              FRA=Date fin;
                                                              ISL=Lokadagsetning;
                                                              ITA=Data fine;
                                                              NLD=Einddatum;
                                                              NOR=Sluttdato;
                                                              SVE=Slutdatum] }
    { 3   ;   ;Document Date       ;Date          ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Bilagsdato;
                                                              DEU=Belegdatum;
                                                              ENU=Document Date;
                                                              FIN=Asiakirjan pvm;
                                                              FRA=Date document;
                                                              ISL=Dags. fylgiskjals;
                                                              ITA=Data documento;
                                                              NLD=Documentdatum;
                                                              NOR=Bilagsdato;
                                                              SVE=Dokumentdatum] }
    { 4   ;   ;Print All Having Balance;Boolean   ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Medtag ogsÜ debitorer, der kun har saldo;
                                                              DEU=Alle Debitoren mit Saldo einbeziehen;
                                                              ENU=Include All Customers with a Balance;
                                                              ESP=Incluye todos los clientes con saldo;
                                                              FIN=SisÑllytÑ kaikki asiakkaat, joilla on saldo;
                                                              FRA=Inclure tous les clients ayant un solde.;
                                                              ISL=Skrifa £t alla me– stî–u;
                                                              ITA=Includi tutti i clienti con saldo;
                                                              NLD=Alle klanten met saldo;
                                                              NOR=Ta med alle kunder med saldo;
                                                              SVE=Ta med alla kunder med ett saldo] }
    { 5   ;   ;Print All Having Entries;Boolean   ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Medtag alle debitorer, der har poster;
                                                              DEU=Alle Debitoren mit Buchungen einbeziehen;
                                                              ENU=Include All Customers with Ledger Entries;
                                                              ESP=Incluye todos los clientes con movs.;
                                                              FIN=SisÑllytÑ kaikki asiakkaat, joilla on tapahtumakirjauksia;
                                                              FRA=Inclure tous les clients mouvementÇs.;
                                                              ISL=Skrifa £t alla vskm. me– fërslur;
                                                              ITA=Includi tutti i clienti con movimenti contabili;
                                                              NLD=Alle klanten met posten;
                                                              NOR=Ta med alle kunder med poster;
                                                              SVE=Ta med alla kunder med reskontratransaktioner] }
    { 6   ;   ;Show Overdue Entries;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Vis forfaldne poster;
                                                              DEU=FÑllige Posten drucken;
                                                              ENU=Show Overdue Entries;
                                                              ESP=Muestra movs. vencidos;
                                                              FIN=NÑytÑ erÑÑntyneet tapahtumat;
                                                              FRA=Afficher Çcritures Çchues;
                                                              ISL=SÏna gjaldf. fërslur;
                                                              ITA=Mostra movimenti scaduti;
                                                              NLD=Vervallen posten weergeven;
                                                              NOR=Vis forfalte poster;
                                                              SVE=Visa fîrfallna transaktioner] }
    { 9   ;   ;Include Aging Band  ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Medtag aldersford.intv.;
                                                              DEU=Mit SaldenrÅckblick;
                                                              ENU=Include Aging Band;
                                                              ESP=Incluye rango antigÅedad;
                                                              FIN=Sis. erÑÑntymisjakso;
                                                              FRA=Inclure cumul date;
                                                              ISL=Taka aldursgreiningart°mabil me–;
                                                              ITA=Includi periodo scadenziario;
                                                              NLD=Vervaldatuminterval opnemen;
                                                              NOR=Vis aldersfordeling;
                                                              SVE=Ta med Üldersspann] }
    { 10  ;   ;Date                ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Dato;
                                                              DEU=Datum;
                                                              ENU=Date;
                                                              ESP=Fecha;
                                                              FIN=Pvm;
                                                              FRA=Date;
                                                              ISL=Dagsetning;
                                                              ITA=Data;
                                                              NLD=Datum;
                                                              NOR=Dato;
                                                              SVE=Datum];
                                                   OptionCaptionML=[DAN=Forfaldsdato,Bogfõringsdato;
                                                                    DEU=FÑlligkeitsdatum,Buchungsdatum;
                                                                    ENU=Due Date,Posting Date;
                                                                    ESP=Fecha vto,Fecha registro;
                                                                    FIN=ErÑpÑivÑ,Kirjauspvm.;
                                                                    FRA=Date d'ÇchÇance,Date comptabilisation;
                                                                    ISL=Gjalddagi,B¢kunardagsetning;
                                                                    ITA=Data scadenza,Data registrazione;
                                                                    NLD=Vervaldatum,Boekingsdatum;
                                                                    NOR=Forfallsdato,Bokfõringsdato;
                                                                    SVE=Fîrfallodatum,Bokfîringsdatum];
                                                   OptionString=Due Date,Posting Date }
    { 11  ;   ;Period Length       ;DateFormula   ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Periodelëngde;
                                                              DEU=PeriodenlÑnge;
                                                              ENU=Period Length;
                                                              ESP=Longitud periodo;
                                                              FIN=Jakson pituus;
                                                              FRA=Base pÇriode;
                                                              ISL=Lengd t°mabils;
                                                              ITA=Durata periodo;
                                                              NLD=Periodelengte;
                                                              NOR=Periodelengde;
                                                              SVE=PeriodlÑngd] }
  }
  KEYS
  {
    {    ;Start Date                              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70300 ForNAV Check Arguments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;DataClassification=SystemMetadata }
    { 7   ;   ;Test Print          ;Boolean       ;DataClassification=SystemMetadata }
    { 8   ;   ;Bank Account No.    ;Code20        ;DataClassification=SystemMetadata }
    { 12  ;   ;Reprint Checks      ;Boolean       ;DataClassification=SystemMetadata }
    { 20  ;   ;One Check Per Vendor;Boolean       ;DataClassification=SystemMetadata }
    { 25  ;   ;Check No.           ;Code20        ;DataClassification=SystemMetadata }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE GetNextCheckNo@1000000000() : Code[20];
    BEGIN
      "Check No." := INCSTR("Check No.");
      IF "Test Print" THEN
        "Check No." := 'XXXX';

      EXIT("Check No.");
    END;

    PROCEDURE TestMandatoryFields@1000000001();
    BEGIN
      TESTFIELD("Bank Account No.");
      TESTFIELD("Check No.");
    END;

    PROCEDURE CreateModelFromGenJnlLn@1000000002(VAR GenJnlLn@1000000001 : Record 81;VAR Model@1000000002 : Record 70303) : Boolean;
    VAR
      CreateCheckModel@1000000000 : Codeunit 70304;
    BEGIN
      EXIT(CreateCheckModel.CreateFromGenJnlLn(Rec, GenJnlLn, Model));
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70301 ForNAV Check
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Check No.           ;Code20        ;DataClassification=SystemMetadata }
    { 2   ;   ;Test                ;Boolean       ;DataClassification=SystemMetadata }
    { 5   ;   ;Currency Code       ;Code10        ;DataClassification=SystemMetadata }
    { 6   ;   ;Posting Date        ;Date          ;DataClassification=SystemMetadata }
    { 8   ;   ;Bank Account No.    ;Code20        ;DataClassification=SystemMetadata }
    { 9   ;   ;Balancing Type      ;Option        ;DataClassification=SystemMetadata;
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account }
    { 10  ;   ;Balancing No.       ;Code20        ;DataClassification=SystemMetadata }
    { 11  ;   ;Amount              ;Decimal       ;DataClassification=SystemMetadata }
    { 12  ;   ;Document No.        ;Code20        ;DataClassification=SystemMetadata }
    { 25  ;   ;Amount as Text (LCY);Text250       ;DataClassification=SystemMetadata }
    { 26  ;   ;Amount as Text      ;Text250       ;DataClassification=SystemMetadata }
    { 27  ;   ;Application Method  ;Option        ;DataClassification=SystemMetadata;
                                                   OptionString=Payment,OneLineOneEntry,OneLineID,MoreLinesOneEntry }
    { 28  ;   ;Applies-to Doc. No. ;Code20        ;DataClassification=SystemMetadata }
    { 29  ;   ;Applies-to ID       ;Code50        ;DataClassification=SystemMetadata }
    { 31  ;   ;Amount Filled as Text;Text30       ;DataClassification=SystemMetadata }
    { 36  ;   ;Pay-to Vendor No.   ;Code20        ;DataClassification=SystemMetadata }
    { 38  ;   ;Pay-to Name         ;Text50        ;DataClassification=SystemMetadata }
    { 42  ;   ;Bank Name           ;Text50        ;DataClassification=SystemMetadata }
    { 50  ;   ;Pay-to Name 2       ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Navn 2;
                                                              DEU=Name 2;
                                                              ENU=Pay-to Name 2;
                                                              ESP=Nombre 2;
                                                              FIN=Nimi 2;
                                                              FRA=Nom 2;
                                                              ISL=Heiti 2;
                                                              ITA=Nome 2;
                                                              NLD=Naam 2;
                                                              NOR=Navn 2;
                                                              SVE=Namn 2] }
    { 52  ;   ;Pay-to Address      ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Adresse;
                                                              DEU=Adresse;
                                                              ENU=Pay-to Address;
                                                              ESP=Direcci¢n;
                                                              FIN=Osoite;
                                                              FRA=Adresse;
                                                              ISL=A–setur;
                                                              ITA=Indirizzo;
                                                              NLD=Adres;
                                                              NOR=Adresse;
                                                              SVE=Adress] }
    { 53  ;   ;Pay-to Address 2    ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Adresse 2;
                                                              DEU=Adresse 2;
                                                              ENU=Pay-to Address 2;
                                                              ESP=Direcci¢n 2;
                                                              FIN=Osoite 2;
                                                              FRA=Adresse (2äme ligne);
                                                              ISL=A–setur 2;
                                                              ITA=Indirizzo 2;
                                                              NLD=Adres 2;
                                                              NOR=Adresse 2;
                                                              SVE=Adress 2] }
    { 54  ;   ;Pay-to City         ;Text30        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=By;
                                                              DEU=Ort;
                                                              ENU=Pay-to City;
                                                              ESP=Poblaci¢n;
                                                              FIN=Paikkakunta;
                                                              FRA=Ville;
                                                              ISL=Bër;
                                                              ITA=CittÖ;
                                                              NLD=Plaats;
                                                              NOR=Sted;
                                                              SVE=Ort] }
    { 55  ;   ;Pay-to Post Code    ;Code20        ;ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Postnr.;
                                                              DEU=PLZ-Code;
                                                              ENU=Pay-to Post Code;
                                                              ESP=C¢digo postal;
                                                              FIN=Postinro;
                                                              FRA=Code postal;
                                                              ISL=P¢stn£mer;
                                                              ITA=CAP;
                                                              NLD=Postcode;
                                                              NOR=Postnr.;
                                                              SVE=Postnr] }
    { 56  ;   ;Pay-to County       ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Amt;
                                                              DEU=Bundesregion;
                                                              ENU=Pay-to County;
                                                              ESP=Provincia;
                                                              FIN=LÑÑni;
                                                              FRA=RÇgion;
                                                              ISL=SÏsla;
                                                              ITA=Provincia;
                                                              NLD=Provincie;
                                                              NOR=Fylke/delstat;
                                                              SVE=Delstat] }
    { 57  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Lande-/omrÜdekode;
                                                              DEU=LÑnder-/Regionscode;
                                                              ENU=Pay-to Country/Region Code;
                                                              ESP=C¢d. pa°s/regi¢n;
                                                              FIN=Maa-/aluekoodi;
                                                              FRA=Code pays/rÇgion;
                                                              ISL=Lands-/svë–isk¢ti;
                                                              ITA=Cod. paese;
                                                              NLD=Land-/regiocode;
                                                              NOR=Lands-/regionkode;
                                                              SVE=Lands-/regionkod] }
  }
  KEYS
  {
    {    ;Check No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateFromGenJnlLn@1000000000(VAR Args@1000000019 : Record 70300;GenJnlLn@1000000001 : Record 81);
    VAR
      BankAccount@1000000000 : Record 270;
    BEGIN
      "Check No." := Args.GetNextCheckNo;
      Test := Args."Test Print";
      "Currency Code" := GenJnlLn."Currency Code";
      "Posting Date" := GenJnlLn."Posting Date";
      "Bank Account No." := Args."Bank Account No.";
      BankAccount.GET("Bank Account No.");
      "Bank Name" := BankAccount.Name;
      "Document No." := GenJnlLn."Document No.";
      "Applies-to Doc. No." := GenJnlLn."Applies-to Doc. No.";
      "Applies-to ID" := GenJnlLn."Applies-to ID";
      "Balancing Type" := GenJnlLn."Account Type";
      "Balancing No." := GenJnlLn."Account No.";
      GetAmount(Args, GenJnlLn);
      GetAmountsAsText;
      GetApplicationMethod(Args, GenJnlLn);
      GetPayToAddress(GenJnlLn);
      INSERT;
    END;

    PROCEDURE GetStub@1000000002(Args@1000000010 : Record 70300;VAR Stub@1000000000 : Record 70302;GenJnlLine@1000000011 : Record 81);
    VAR
      CreateStub@1000000001 : Codeunit 70302;
    BEGIN
      CreateStub.FromCheck(Args, Rec, Stub, GenJnlLine);
    END;

    PROCEDURE UpdateJournal@1000000005(Args@1000000002 : Record 70300;VAR GenJnlLine@1000000001 : Record 81);
    VAR
      CheckUpdateJournal@1000000000 : Codeunit 70301;
    BEGIN
      CheckUpdateJournal.UpdateJournal(Args, Rec, GenJnlLine);
    END;

    PROCEDURE CreateCheckLedgerEntry@1000000001(Args@1000000001 : Record 70300;GenJnlLine@1000000002 : Record 81);
    VAR
      CreateCheckLedgEnt@1000000000 : Codeunit 70303;
    BEGIN
      CreateCheckLedgEnt.CreateCheckLedgerEntry(Args, Rec, GenJnlLine);
    END;

    LOCAL PROCEDURE GetAmountsAsText@1000000003();
    VAR
      GLSetup@1000000002 : Record 98;
      AmountasText@1000000000 : Codeunit 70305;
      NumberText@1000000001 : ARRAY [2] OF Text[80];
    BEGIN
      AmountasText.InitTextVariable;
      AmountasText.FormatNoText(NumberText,Amount,"Currency Code");
      "Amount as Text (LCY)" := NumberText[1];
      "Amount as Text" := NumberText[2];
      "Amount Filled as Text" := FORMAT(Amount,0,'<Integer Thousand><Decimals,3>');
      WHILE STRLEN("Amount Filled as Text") < 17 DO
        "Amount Filled as Text" := '*' + "Amount Filled as Text";

      GLSetup.GET;
      "Amount Filled as Text" := GLSetup."Local Currency Symbol" + "Amount Filled as Text";
    END;

    LOCAL PROCEDURE GetApplicationMethod@1000000004(Args@1000000002 : Record 70300;FromGenJournalLine@1000000001 : Record 81);
    BEGIN
      WITH FromGenJournalLine DO BEGIN
        IF Args."One Check Per Vendor" THEN
          "Application Method" := "Application Method"::MoreLinesOneEntry
        ELSE
          IF "Applies-to Doc. No." <> '' THEN
            "Application Method" := "Application Method"::OneLineOneEntry
          ELSE
            IF "Applies-to ID" <> '' THEN
              "Application Method" := "Application Method"::OneLineID
            ELSE
              "Application Method" := "Application Method"::Payment;
      END;
    END;

    LOCAL PROCEDURE GetAmount@1000000007(Args@1000000002 : Record 70300;FromGenJournalLine@1000000001 : Record 81);
    VAR
      GenJournalLine@1000000000 : Record 81;
    BEGIN
      IF Args."One Check Per Vendor" THEN BEGIN
        WITH FromGenJournalLine DO BEGIN
          GenJournalLine.RESET;
          GenJournalLine.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
          GenJournalLine.SETRANGE("Journal Template Name", "Journal Template Name");
          GenJournalLine.SETRANGE("Journal Batch Name", "Journal Batch Name");
          GenJournalLine.SETRANGE("Posting Date","Posting Date");
          GenJournalLine.SETRANGE("Document No.","Document No.");
          GenJournalLine.SETRANGE("Account Type","Account Type");
          GenJournalLine.SETRANGE("Account No.","Account No.");
          GenJournalLine.SETRANGE("Bal. Account Type","Bal. Account Type");
          GenJournalLine.SETRANGE("Bal. Account No.","Bal. Account No.");
          GenJournalLine.SETRANGE("Bank Payment Type","Bank Payment Type");
          GenJournalLine.CALCSUMS(Amount);
        END;
        Amount := GenJournalLine.Amount;
      END ELSE
        Amount := FromGenJournalLine.Amount;
    END;

    LOCAL PROCEDURE GetPayToAddress@1000000006(VAR GenJnlLn@1000000000 : Record 81);
    VAR
      Cust@1000000001 : Record 18;
      Vend@1000000002 : Record 23;
    BEGIN
      CASE GenJnlLn."Account Type" OF
        GenJnlLn."Account Type"::Customer:
          BEGIN
            Cust.GET(GenJnlLn."Account No.");
            "Pay-to Vendor No." := GenJnlLn."Account No.";
            "Pay-to Name" := Cust.Name;
            "Pay-to Name 2" := Cust."Name 2";
            "Pay-to Address" := Cust.Address;
            "Pay-to Address 2" := Cust."Address 2";
            "Pay-to City" := Cust.City;
            "Pay-to Post Code" := Cust."Post Code";
            "Pay-to County" := Cust.County;
            "Pay-to Country/Region Code" := Cust."Country/Region Code";
          END;
        GenJnlLn."Account Type"::Vendor:
          BEGIN
            Vend.GET(GenJnlLn."Account No.");
            "Pay-to Vendor No." := GenJnlLn."Account No.";
            "Pay-to Name" := Vend.Name;
            "Pay-to Name 2" := Vend."Name 2";
            "Pay-to Address" := Vend.Address;
            "Pay-to Address 2" := Vend."Address 2";
            "Pay-to City" := Vend.City;
            "Pay-to Post Code" := Vend."Post Code";
            "Pay-to County" := Vend.County;
            "Pay-to Country/Region Code" := Vend."Country/Region Code";
         END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70302 ForNAV Stub
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;DataClassification=SystemMetadata }
    { 2   ;   ;Document Date       ;Date          ;DataClassification=SystemMetadata }
    { 3   ;   ;Document No.        ;Code20        ;DataClassification=SystemMetadata }
    { 4   ;   ;External Document No.;Text35       ;DataClassification=SystemMetadata }
    { 5   ;   ;Amount              ;Decimal       ;DataClassification=SystemMetadata }
    { 6   ;   ;Discount Amount     ;Decimal       ;DataClassification=SystemMetadata }
    { 8   ;   ;Document Type       ;Text50        ;DataClassification=SystemMetadata }
    { 9   ;   ;Amount Paid         ;Decimal       ;DataClassification=SystemMetadata }
    { 10  ;   ;Job No.             ;Code20        ;DataClassification=SystemMetadata }
    { 12  ;   ;Currency Code       ;Code10        ;DataClassification=SystemMetadata }
    { 13  ;   ;Posting Date        ;Date          ;DataClassification=SystemMetadata }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CustUpdateAmounts@3(VAR CustLedgEntry2@1000 : Record 21;VAR RemainingAmount2@1001 : Decimal;VAR LineAmount2@1000000000 : Decimal);
    VAR
      Currency@1000000001 : Record 4;
    BEGIN
      IF "Currency Code" <> '' THEN
        Currency.GET("Currency Code");

      "Entry No." := CustLedgEntry2."Entry No.";
      "Document Type" := FORMAT(CustLedgEntry2."Document Type");
      "Document No." := CustLedgEntry2."Document No.";
      "External Document No." := CustLedgEntry2."External Document No.";
      "Document Date" := CustLedgEntry2."Document Date";
      CustLedgEntry2.CALCFIELDS("Remaining Amount");
      Amount := -(CustLedgEntry2."Remaining Amount" - CustLedgEntry2."Remaining Pmt. Disc. Possible"-
        CustLedgEntry2."Accepted Payment Tolerance");

      LineAmount2 :=
        ROUND(
          ExchangeAmt(CustLedgEntry2."Posting Date","Currency Code",CustLedgEntry2."Currency Code",Amount),
          Currency."Amount Rounding Precision");

      IF ((((CustLedgEntry2."Document Type" = CustLedgEntry2."Document Type"::Invoice) AND
            (LineAmount2 >= RemainingAmount2)) OR
           ((CustLedgEntry2."Document Type" = CustLedgEntry2."Document Type"::"Credit Memo") AND
            (LineAmount2 <= RemainingAmount2))) AND
          ("Posting Date" <= CustLedgEntry2."Pmt. Discount Date")) OR
         CustLedgEntry2."Accepted Pmt. Disc. Tolerance"
      THEN BEGIN
        "Discount Amount" := -CustLedgEntry2."Remaining Pmt. Disc. Possible";
        IF CustLedgEntry2."Accepted Payment Tolerance" <> 0 THEN
          "Discount Amount" := "Discount Amount" - CustLedgEntry2."Accepted Payment Tolerance";
      END ELSE BEGIN
        "Discount Amount" := 0;
      END;
      INSERT;
    END;

    PROCEDURE VendUpdateAmounts@4(VAR VendLedgEntry2@1000 : Record 25;VAR RemainingAmount2@1001 : Decimal;VAR LineAmount2@1000000002 : Decimal);
    VAR
      Currency@1000000001 : Record 4;
      CurrencyCode2@1000000000 : Code[10];
    BEGIN
      IF "Currency Code" <> '' THEN
        Currency.GET("Currency Code");

      "Entry No." := VendLedgEntry2."Entry No.";
      "Document Type" := FORMAT(VendLedgEntry2."Document Type");
      "Document No." := VendLedgEntry2."Document No.";
      "External Document No." := VendLedgEntry2."External Document No.";
      "Document Date" := VendLedgEntry2."Document Date";
      CurrencyCode2 := VendLedgEntry2."Currency Code";
      VendLedgEntry2.CALCFIELDS("Remaining Amount");
      Amount := -(VendLedgEntry2."Remaining Amount" - VendLedgEntry2."Remaining Pmt. Disc. Possible" -
        VendLedgEntry2."Accepted Payment Tolerance");
      LineAmount2 :=
        ROUND(
          ExchangeAmt(VendLedgEntry2."Posting Date","Currency Code",CurrencyCode2,Amount),
          Currency."Amount Rounding Precision");
      IF ((((VendLedgEntry2."Document Type" = VendLedgEntry2."Document Type"::Invoice) AND
            (LineAmount2 <= RemainingAmount2)) OR
           ((VendLedgEntry2."Document Type" = VendLedgEntry2."Document Type"::"Credit Memo") AND
            (LineAmount2 >= RemainingAmount2))) AND
          ("Posting Date" <= VendLedgEntry2."Pmt. Discount Date")) OR
         VendLedgEntry2."Accepted Pmt. Disc. Tolerance"
      THEN BEGIN
        "Discount Amount" := -VendLedgEntry2."Remaining Pmt. Disc. Possible";
        IF VendLedgEntry2."Accepted Payment Tolerance" <> 0 THEN
          "Discount Amount" := "Discount Amount" - VendLedgEntry2."Accepted Payment Tolerance";
      END ELSE BEGIN
        "Discount Amount" := 0;
      END;
      INSERT;
    END;

    LOCAL PROCEDURE ExchangeAmt@7(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10];CurrencyCode2@1003 : Code[10];Amount@1002 : Decimal) Amount2 : Decimal;
    VAR
      CurrencyExchangeRate@1000000000 : Record 330;
    BEGIN
      IF (CurrencyCode <> '')  AND (CurrencyCode2 = '') THEN
         Amount2 :=
           CurrencyExchangeRate.ExchangeAmtLCYToFCY(
             PostingDate,CurrencyCode,Amount,CurrencyExchangeRate.ExchangeRate(PostingDate,CurrencyCode))
      ELSE IF (CurrencyCode = '') AND (CurrencyCode2 <> '') THEN
        Amount2 :=
          CurrencyExchangeRate.ExchangeAmtFCYToLCY(
            PostingDate,CurrencyCode2,Amount,CurrencyExchangeRate.ExchangeRate(PostingDate,CurrencyCode2))
      ELSE IF (CurrencyCode <> '') AND (CurrencyCode2 <> '') AND (CurrencyCode <> CurrencyCode2) THEN
        Amount2 := CurrencyExchangeRate.ExchangeAmtFCYToFCY(PostingDate,CurrencyCode2,CurrencyCode,Amount)
      ELSE
        Amount2 := Amount;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70303 ForNAV Check Model
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Page No.            ;Integer       ;InitValue=1;
                                                   DataClassification=SystemMetadata }
    { 2   ;   ;Part No.            ;Option        ;InitValue=1;
                                                   DataClassification=SystemMetadata;
                                                   OptionString=[ ,1,2,3] }
    { 3   ;   ;Line No.            ;Integer       ;InitValue=1;
                                                   DataClassification=SystemMetadata }
    { 6   ;   ;Test                ;Boolean       ;DataClassification=SystemMetadata }
    { 7   ;   ;Void                ;Boolean       ;DataClassification=SystemMetadata }
    { 8   ;   ;Type                ;Option        ;DataClassification=SystemMetadata;
                                                   OptionString=[ ,Check,Stub] }
    { 10  ;   ;Check No.           ;Code20        ;DataClassification=SystemMetadata }
    { 11  ;   ;Amount Written in Text;Text250     ;DataClassification=SystemMetadata }
    { 12  ;   ;Amount in Numbers   ;Text250       ;DataClassification=SystemMetadata }
    { 13  ;   ;Pay-to Name         ;Text50        ;DataClassification=SystemMetadata }
    { 14  ;   ;Bank Name           ;Text50        ;DataClassification=SystemMetadata }
    { 30  ;   ;Pay-to Vendor No.   ;Code20        ;DataClassification=SystemMetadata }
    { 31  ;   ;Pay-to Name 2       ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Navn 2;
                                                              DEU=Name 2;
                                                              ENU=Pay-to Name 2;
                                                              ESP=Nombre 2;
                                                              FIN=Nimi 2;
                                                              FRA=Nom 2;
                                                              ISL=Heiti 2;
                                                              ITA=Nome 2;
                                                              NLD=Naam 2;
                                                              NOR=Navn 2;
                                                              SVE=Namn 2] }
    { 32  ;   ;Pay-to Address      ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Adresse;
                                                              DEU=Adresse;
                                                              ENU=Pay-to Address;
                                                              ESP=Direcci¢n;
                                                              FIN=Osoite;
                                                              FRA=Adresse;
                                                              ISL=A–setur;
                                                              ITA=Indirizzo;
                                                              NLD=Adres;
                                                              NOR=Adresse;
                                                              SVE=Adress] }
    { 33  ;   ;Pay-to Address 2    ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Adresse 2;
                                                              DEU=Adresse 2;
                                                              ENU=Pay-to Address 2;
                                                              ESP=Direcci¢n 2;
                                                              FIN=Osoite 2;
                                                              FRA=Adresse (2äme ligne);
                                                              ISL=A–setur 2;
                                                              ITA=Indirizzo 2;
                                                              NLD=Adres 2;
                                                              NOR=Adresse 2;
                                                              SVE=Adress 2] }
    { 34  ;   ;Pay-to City         ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=By;
                                                              DEU=Ort;
                                                              ENU=Pay-to City;
                                                              ESP=Poblaci¢n;
                                                              FIN=Paikkakunta;
                                                              FRA=Ville;
                                                              ISL=Bër;
                                                              ITA=CittÖ;
                                                              NLD=Plaats;
                                                              NOR=Sted;
                                                              SVE=Ort] }
    { 35  ;   ;Pay-to Post Code    ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".Code
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".Code WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Postnr.;
                                                              DEU=PLZ-Code;
                                                              ENU=Pay-to Post Code;
                                                              ESP=C¢digo postal;
                                                              FIN=Postinro;
                                                              FRA=Code postal;
                                                              ISL=P¢stn£mer;
                                                              ITA=CAP;
                                                              NLD=Postcode;
                                                              NOR=Postnr.;
                                                              SVE=Postnr] }
    { 36  ;   ;Pay-to County       ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Amt;
                                                              DEU=Bundesregion;
                                                              ENU=Pay-to County;
                                                              ESP=Provincia;
                                                              FIN=LÑÑni;
                                                              FRA=RÇgion;
                                                              ISL=SÏsla;
                                                              ITA=Provincia;
                                                              NLD=Provincie;
                                                              NOR=Fylke/delstat;
                                                              SVE=Delstat] }
    { 37  ;   ;Pay-to Country/Region Code;Code10  ;TableRelation=Country/Region;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Lande-/omrÜdekode;
                                                              DEU=LÑnder-/Regionscode;
                                                              ENU=Pay-to Country/Region Code;
                                                              ESP=C¢d. pa°s/regi¢n;
                                                              FIN=Maa-/aluekoodi;
                                                              FRA=Code pays/rÇgion;
                                                              ISL=Lands-/svë–isk¢ti;
                                                              ITA=Cod. paese;
                                                              NLD=Land-/regiocode;
                                                              NOR=Lands-/regionkode;
                                                              SVE=Lands-/regionkod] }
    { 40  ;   ;Name                ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Navn;
                                                              DEU=Name;
                                                              ENU=Name;
                                                              ESP=Nombre;
                                                              FIN=Nimi;
                                                              FRA=Nom;
                                                              ISL=Heiti;
                                                              ITA=Nome;
                                                              NLD=Naam;
                                                              NOR=Navn;
                                                              SVE=Namn] }
    { 41  ;   ;Name 2              ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Navn 2;
                                                              DEU=Name 2;
                                                              ENU=Name 2;
                                                              ESP=Nombre 2;
                                                              FIN=Nimi 2;
                                                              FRA=Nom 2;
                                                              ISL=Heiti 2;
                                                              ITA=Nome 2;
                                                              NLD=Naam 2;
                                                              NOR=Navn 2;
                                                              SVE=Namn 2] }
    { 42  ;   ;Address             ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Adresse;
                                                              DEU=Adresse;
                                                              ENU=Address;
                                                              ESP=Direcci¢n;
                                                              FIN=Osoite;
                                                              FRA=Adresse;
                                                              ISL=A–setur;
                                                              ITA=Indirizzo;
                                                              NLD=Adres;
                                                              NOR=Adresse;
                                                              SVE=Adress] }
    { 43  ;   ;Address 2           ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Adresse 2;
                                                              DEU=Adresse 2;
                                                              ENU=Address 2;
                                                              ESP=Direcci¢n 2;
                                                              FIN=Osoite 2;
                                                              FRA=Adresse (2äme ligne);
                                                              ISL=A–setur 2;
                                                              ITA=Indirizzo 2;
                                                              NLD=Adres 2;
                                                              NOR=Adresse 2;
                                                              SVE=Adress 2] }
    { 44  ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=By;
                                                              DEU=Ort;
                                                              ENU=City;
                                                              ESP=Poblaci¢n;
                                                              FIN=Paikkakunta;
                                                              FRA=Ville;
                                                              ISL=Bër;
                                                              ITA=CittÖ;
                                                              NLD=Plaats;
                                                              NOR=Sted;
                                                              SVE=Ort] }
    { 45  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".Code
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".Code WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Postnr.;
                                                              DEU=PLZ-Code;
                                                              ENU=Post Code;
                                                              ESP=C¢digo postal;
                                                              FIN=Postinro;
                                                              FRA=Code postal;
                                                              ISL=P¢stn£mer;
                                                              ITA=CAP;
                                                              NLD=Postcode;
                                                              NOR=Postnr.;
                                                              SVE=Postnr] }
    { 46  ;   ;County              ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Amt;
                                                              DEU=Bundesregion;
                                                              ENU=County;
                                                              ESP=Provincia;
                                                              FIN=LÑÑni;
                                                              FRA=RÇgion;
                                                              ISL=SÏsla;
                                                              ITA=Provincia;
                                                              NLD=Provincie;
                                                              NOR=Fylke/delstat;
                                                              SVE=Delstat] }
    { 47  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Lande-/omrÜdekode;
                                                              DEU=LÑnder-/Regionscode;
                                                              ENU=Country/Region Code;
                                                              ESP=C¢d. pa°s/regi¢n;
                                                              FIN=Maa-/aluekoodi;
                                                              FRA=Code pays/rÇgion;
                                                              ISL=Lands-/svë–isk¢ti;
                                                              ITA=Cod. paese;
                                                              NLD=Land-/regiocode;
                                                              NOR=Lands-/regionkode;
                                                              SVE=Lands-/regionkod] }
    { 50  ;   ;Document Date       ;Date          ;DataClassification=SystemMetadata }
    { 55  ;   ;Document No.        ;Code20        ;DataClassification=SystemMetadata }
    { 60  ;   ;External Document No.;Text35       ;DataClassification=SystemMetadata }
    { 65  ;   ;Amount              ;Decimal       ;DataClassification=SystemMetadata }
    { 70  ;   ;Discount Amount     ;Decimal       ;DataClassification=SystemMetadata }
    { 75  ;   ;Net Amount          ;Decimal       ;DataClassification=SystemMetadata }
    { 80  ;   ;Document Type       ;Text50        ;DataClassification=SystemMetadata }
    { 85  ;   ;Amount Paid         ;Decimal       ;DataClassification=SystemMetadata }
    { 90  ;   ;Job No.             ;Code20        ;DataClassification=SystemMetadata }
    { 95  ;   ;Currency Code       ;Code10        ;DataClassification=SystemMetadata }
    { 100 ;   ;Posting Date        ;Date          ;DataClassification=SystemMetadata }
    { 110 ;   ;Micr Line           ;Text100       ;DataClassification=SystemMetadata }
  }
  KEYS
  {
    {    ;Page No.,Part No.,Line No.              ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE SetPageAndLineNo@1000000000(VAR NextLineNo@1000000000 : Integer);
    VAR
      CheckSetup@1000000001 : Record 70310;
    BEGIN
      CheckSetup.GET;
      NextLineNo += 1;
      "Part No." := 1;
      IF "Line No." = CheckSetup."No. of Lines (Stub)" THEN BEGIN
        "Page No." += 1;
        NextLineNo := 1;
      END;
      "Line No." := NextLineNo;
    END;

    PROCEDURE Duplicate@1000000001();
    VAR
      CheckSetup@1000000000 : Record 70310;
    BEGIN
      CheckSetup.GET;
      IF CheckSetup.Layout = CheckSetup.Layout::"3 Checks" THEN
        EXIT;

      "Part No." := 2;
      INSERT;

      IF CheckSetup.Layout = CheckSetup.Layout::"Top Check with one Stub" THEN
        EXIT;

      "Part No." := 3;
      INSERT;
    END;

    PROCEDURE SetType@1000000002();
    VAR
      CheckSetup@1000000000 : Record 70310;
    BEGIN
      CheckSetup.GET;
      Type := CheckSetup.GetTypeBasedOnLayout("Part No.");
    END;

    PROCEDURE SetIsVoid@1000000003();
    BEGIN
      Void := "Page No." <> 1;
    END;

    PROCEDURE SetAddress@1000000004();
    VAR
      CompInfo@1000000000 : Record 79;
    BEGIN
      IF Void OR Test THEN BEGIN
        Name := 'XXXXXXXXXXXXXXXXXXXXXXXX';
        Address := 'XXXXXXXXXXXXXXXXXXXXXXXX';
        "Post Code" := 'XXXXX';
        "Country/Region Code" := 'XX';
      END ELSE BEGIN
        CompInfo.GET;
        Name := CompInfo.Name;
        "Name 2" := CompInfo."Name 2";
        Address := CompInfo.Address;
        "Address 2" := CompInfo."Address 2";
        "Post Code" := CompInfo."Post Code";
        City := CompInfo.City;
        County := CompInfo.County;
        "Country/Region Code" := CompInfo."Country/Region Code";
      END;
    END;

    PROCEDURE VoidCheckFields@1000000008();
    BEGIN
      IF NOT (Void OR Test) THEN
        EXIT;

      "Check No." := 'XXXXX';
      "Amount Written in Text" := 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      "Amount in Numbers" := 'XXXXXXXXXXXXX';
    END;

    PROCEDURE SetPayToAddress@1000000005();
    BEGIN
      IF Void OR Test THEN BEGIN
        "Pay-to Name" := 'XXXXXXXXXXXXXXXXXXXXXXXX';
        "Pay-to Name 2" := '';
        "Pay-to Address" := 'XXXXXXXXXXXXXXXXXXXXXXXX';
        "Pay-to Address 2" := '';
        "Pay-to Post Code" := 'XXXXX';
        "Pay-to County" := '';
        "Pay-to Country/Region Code" := 'XX';
      END;
    END;

    PROCEDURE SetMICRLine@1();
    VAR
      Handled@1000 : Boolean;
    BEGIN
      SetMICRLineEvent("Micr Line", Handled);
      IF Handled THEN
        EXIT;

      "Micr Line" := '#TBD...';
    END;

    [Integration]
    LOCAL PROCEDURE SetMICRLineEvent@2(VAR Value@1001 : Text[100];VAR Handled@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70310 ForNAV Check Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Primërnõgle;
                                                              DEU=PrimÑrschlÅssel;
                                                              ENU=Primary Key;
                                                              ESP=Clave primaria;
                                                              FIN=Perusavain;
                                                              FRA=ClÇ primaire;
                                                              ISL=A–allykill;
                                                              ITA=Chiave primaria;
                                                              NLD=Primaire sleutel;
                                                              NOR=Primërnõkkel;
                                                              RUS=Áå§ïÖÉóäàä - ãÜ˜ÉÖò ÑÜ§òïàÖ;
                                                              SVE=PrimÑrnyckel] }
    { 10  ;   ;Layout              ;Option        ;OnValidate=BEGIN
                                                                "No. of Lines (Stub)" := MaxLineNo;
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   OptionString=[ ,Check-Stub-Stub,Stub-Stub-Check,Stub-Check-Stub,3 Checks,Top Check with one Stub,Bottom Check with one Stub,,,Other] }
    { 11  ;   ;No. of Lines (Stub) ;Integer       ;DataClassification=SystemMetadata }
    { 20  ;   ;Watermark           ;BLOB          ;DataClassification=OrganizationIdentifiableInformation }
    { 21  ;   ;Watermark File Name ;Text250       ;InitValue=Click to import...;
                                                   DataClassification=OrganizationIdentifiableInformation;
                                                   Editable=No }
    { 30  ;   ;Signature           ;BLOB          ;DataClassification=EndUserIdentifiableInformation }
    { 31  ;   ;Signature File Name ;Text250       ;InitValue=Click to import...;
                                                   DataClassification=EndUserIdentifiableInformation;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE InitSetup@1000000002();
    BEGIN
      IF GET THEN
        EXIT;

      INIT;
      INSERT;
    END;

    LOCAL PROCEDURE MaxLineNo@1000000000() : Integer;
    BEGIN
      CASE Layout OF
        Layout::"3 Checks":
          EXIT(0);
        Layout::"Top Check with one Stub", Layout::"Bottom Check with one Stub":
          EXIT(20);
        ELSE
          EXIT(9);
      END;
    END;

    PROCEDURE GetTypeBasedOnLayout@1000000001(PartNo@1000000000 : Integer) : Integer;
    VAR
      Model@1000000001 : Record 70303;
      NoImplementedErr@1000000002 : TextConst 'ENU=This is not implemented, please contact your ForNAV partner.';
    BEGIN
      CASE Layout OF
        Layout::"3 Checks":
          EXIT(Model.Type::Check);
        Layout::"Top Check with one Stub":
          CASE PartNo OF
            1: EXIT(Model.Type::Check);
            2: EXIT(Model.Type::Stub);
            3: EXIT(Model.Type::" ");
          END;
        Layout::"Bottom Check with one Stub":
          CASE PartNo OF
            1: EXIT(Model.Type::Stub);
            2: EXIT(Model.Type::Check);
            3: EXIT(Model.Type::" ");
          END;
        Layout::"Check-Stub-Stub":
          CASE PartNo OF
            1: EXIT(Model.Type::Check);
            2: EXIT(Model.Type::Stub);
            3: EXIT(Model.Type::Stub);
          END;
        Layout::Other:
          ERROR(NoImplementedErr);
        Layout::"Stub-Check-Stub":
          CASE PartNo OF
            1: EXIT(Model.Type::Stub);
            2: EXIT(Model.Type::Check);
            3: EXIT(Model.Type::Stub);
          END;
        Layout::"Stub-Stub-Check":
          CASE PartNo OF
            1: EXIT(Model.Type::Stub);
            2: EXIT(Model.Type::Stub);
            3: EXIT(Model.Type::Check);
          END;
      END;
    END;

    PROCEDURE ImportWatermarkFromClientFile@21(Which@1000 : Integer) : Boolean;
    VAR
      ReadCheckWatermarks@1002 : Codeunit 70306;
    BEGIN
      EXIT(ReadCheckWatermarks.ReadFromFile(Rec, Which));
    END;

    PROCEDURE DesignTemplate@9();
    VAR
      Template@1000 : Report 70301;
    BEGIN
      Template.RUNMODAL;
    END;

    PROCEDURE DownloadWatermarks@6();
    BEGIN
      HYPERLINK('http://www.fornav.com/report-watermarks/');
    END;

    PROCEDURE SetDefault@1000000004(Setup@1000000001 : Record 70000);
    VAR
      CheckSetup@1000000000 : Codeunit 70010;
    BEGIN
      CheckSetup.SetCheckType(Setup, Rec);
    END;

    PROCEDURE GetCheckWatermark@1000000005() : Text;
    VAR
      TempBlob@1000000000 : Record 99008535;
    BEGIN
      CALCFIELDS(Watermark);
      TempBlob.Blob := Watermark;
      EXIT(TempBlob.ToBase64String);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70900 ForNAV Captions
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Primërnõgle;
                                                              DEU=PrimÑrschlÅssel;
                                                              ENU=Primary Key;
                                                              ESP=Clave primaria;
                                                              FIN=Perusavain;
                                                              FRA=ClÇ primaire;
                                                              ISL=A–allykill;
                                                              ITA=Chiave primaria;
                                                              NLD=Primaire sleutel;
                                                              NOR=Primërnõkkel;
                                                              RUS=Áå§ïÖÉóäàä - ãÜ˜ÉÖò ÑÜ§òïàÖ;
                                                              SVE=PrimÑrnyckel] }
    { 2   ;   ;Unit Price          ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Pris per stk;
                                                              DEU=StÅckpreis;
                                                              ENU=Unit Price;
                                                              ESP=Precio unitario;
                                                              FIN=Yksikkîhinta;
                                                              FRA=Prix unitaire;
                                                              ISL=Einingaver–;
                                                              ITA=Prezzo unitario;
                                                              NLD=Eenheidsprijs;
                                                              NOR=Enhetspris;
                                                              SVE=Enhetspris] }
    { 3   ;   ;No.                 ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Nummer;
                                                              DEU=Nr.;
                                                              ENU=No.;
                                                              ESP=Nß;
                                                              FIN=Nro;
                                                              FRA=N¯;
                                                              ISL=Nr.;
                                                              ITA=Nr.;
                                                              NLD=Nr.;
                                                              NOR=Nr.;
                                                              SVE=Nr] }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70997 ForNAV VAT Currency Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Currency Code       ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Valutakode;
                                                              DEU=WÑhrungscode;
                                                              ENU=Currency Code;
                                                              ESP=C¢d. divisa;
                                                              FIN=Valuutan koodi;
                                                              FRA=Code devise;
                                                              ISL=Gjaldmi–ilsk¢ti;
                                                              ITA=Cod. valuta;
                                                              NLD=Valutacode;
                                                              NOR=Valutakode;
                                                              SVE=Valutakod] }
    { 2   ;   ;Currency Factor     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Valutafaktor;
                                                              DEU=WÑhrungsfaktor;
                                                              ENU=Currency Factor;
                                                              ESP=Factor divisa;
                                                              FIN=Valuuttakerroin;
                                                              FRA=Facteur devise;
                                                              ISL=Gengisstu–ull;
                                                              ITA=Fattore valuta;
                                                              NLD=Valutafactor;
                                                              NOR=Valutafaktor;
                                                              SVE=Valutafaktor] }
    { 3   ;   ;VAT Base Amount     ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Momsgrundlag (belõb);
                                                              DEU=MwSt.-Bemessungsgrundlage;
                                                              ENU=VAT Base Amount;
                                                              ESP=Importe base IVA;
                                                              FIN=ALV-perusteen summa;
                                                              FRA=Montant base TVA;
                                                              ISL=Upphë– VSK-stofns;
                                                              ITA=Imponibile IVA;
                                                              NLD=Basisbedrag btw;
                                                              NOR=Mva-grunnlagsbelõp;
                                                              SVE=Nettobelopp] }
    { 4   ;   ;VAT Amount          ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Momsbelõb;
                                                              DEU=MwSt.-Betrag;
                                                              ENU=VAT Amount;
                                                              ESP=Importe IVA;
                                                              FIN=ALV-summa;
                                                              FRA=Montant TVA;
                                                              ISL=VSK-upphë–;
                                                              ITA=Importo IVA;
                                                              NLD=Btw-bedrag;
                                                              NOR=Mva-belõp;
                                                              SVE=Momsbelopp] }
    { 5   ;   ;VAT %               ;Decimal       ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Momspct.;
                                                              DEU=MwSt. %;
                                                              ENU=VAT %;
                                                              ESP=% IVA;
                                                              FIN=ALV-%;
                                                              FRA=% TVA;
                                                              ISL=VSK%;
                                                              ITA=% IVA;
                                                              NLD=Btw %;
                                                              NOR=Mva-%;
                                                              SVE=Momssats %] }
    { 6   ;   ;VAT Identifier      ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Moms-id;
                                                              DEU=MwSt.-Kennzeichen;
                                                              ENU=VAT Identifier;
                                                              ESP=Identific. IVA;
                                                              FIN=ALV -tunnus;
                                                              FRA=Identifiant TVA;
                                                              ISL=VSK-au–kenni;
                                                              ITA=Codice IVA;
                                                              NLD=Btw-identificatie;
                                                              NOR=Mva-type;
                                                              SVE=Moms-ID] }
  }
  KEYS
  {
    {    ;Currency Code                           ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE InsertLine@1();
    VAR
      VATCurrency@1000 : Record 70997;
      GLSetup@1001 : Record 98;
    BEGIN
      GLSetup.GET;
      "Currency Code" := GLSetup."LCY Code";

      VATCurrency := Rec;
      IF FIND THEN BEGIN
        "VAT Base Amount" := "VAT Base Amount" + VATCurrency."VAT Amount";
        "VAT Amount" := "VAT Amount" + VATCurrency."VAT Amount";
        MODIFY;
      END ELSE BEGIN
        INSERT;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70998 ForNAV Sales Tax Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=[DAN=Primërnõgle;
                                                              DEU=PrimÑrschlÅssel;
                                                              ENU=Primary Key;
                                                              ESP=Clave primaria;
                                                              FIN=Perusavain;
                                                              FRA=ClÇ primaire;
                                                              ISL=A–allykill;
                                                              ITA=Chiave primaria;
                                                              NLD=Primaire sleutel;
                                                              NOR=Primërnõkkel;
                                                              RUS=Áå§ïÖÉóäàä - ãÜ˜ÉÖò ÑÜ§òïàÖ;
                                                              SVE=PrimÑrnyckel] }
    { 2   ;   ;Exempt Amount       ;Decimal       ;DataClassification=SystemMetadata }
    { 3   ;   ;Taxable Amount      ;Decimal       ;DataClassification=SystemMetadata }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Table 70999 ForNAV Document Line Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;VAT %               ;Decimal       ;DataClassification=SystemMetadata;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 2   ;   ;VAT Base            ;Decimal       ;DataClassification=SystemMetadata;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 3   ;   ;VAT Amount          ;Decimal       ;DataClassification=SystemMetadata;
                                                   AutoFormatType=1 }
    { 4   ;   ;Amount Including VAT;Decimal       ;DataClassification=SystemMetadata;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5   ;   ;VAT Identifier      ;Code20        ;DataClassification=SystemMetadata;
                                                   Editable=No }
    { 6   ;   ;Line Amount         ;Decimal       ;DataClassification=SystemMetadata;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 7   ;   ;Inv. Disc. Base Amount;Decimal     ;DataClassification=SystemMetadata;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 8   ;   ;Invoice Discount Amount;Decimal    ;DataClassification=SystemMetadata;
                                                   AutoFormatType=1 }
    { 9   ;   ;VAT Calculation Type;Option        ;DataClassification=SystemMetadata;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 10  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   DataClassification=SystemMetadata;
                                                   Editable=No }
    { 11  ;   ;Quantity            ;Decimal       ;DataClassification=SystemMetadata;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 12  ;   ;Modified            ;Boolean       ;DataClassification=SystemMetadata }
    { 13  ;   ;Use Tax             ;Boolean       ;DataClassification=SystemMetadata }
    { 14  ;   ;Calculated VAT Amount;Decimal      ;DataClassification=SystemMetadata;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 15  ;   ;VAT Difference      ;Decimal       ;DataClassification=SystemMetadata;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 16  ;   ;Positive            ;Boolean       ;DataClassification=SystemMetadata }
    { 17  ;   ;Includes Prepayment ;Boolean       ;DataClassification=SystemMetadata }
    { 18  ;   ;VAT Clause Code     ;Code20        ;TableRelation="VAT Clause";
                                                   DataClassification=SystemMetadata }
    { 19  ;   ;Tax Category        ;Code20        ;DataClassification=SystemMetadata }
    { 70000;  ;Line No.            ;Integer       ;DataClassification=SystemMetadata }
    { 70001;  ;Amount              ;Decimal       ;DataClassification=SystemMetadata }
    { 70002;  ;Allow Invoice Disc. ;Boolean       ;DataClassification=SystemMetadata }
    { 70003;  ;Inv. Discount Amount;Decimal       ;DataClassification=SystemMetadata }
  }
  KEYS
  {
    {    ;Line No.                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    PROCEDURE CreateForRecRef@1000000000(VAR RecRef@1000000000 : RecordRef);
    VAR
      Fld@1000000002 : Record 2000000041;
    BEGIN
      FindAndSetField(RecRef, 'Line No.', 70000);

      Fld.SETRANGE(TableNo, DATABASE::"ForNAV Document Line Buffer");
      Fld.SETFILTER("No.", '<>70000');
      Fld.FINDSET;
      REPEAT
        FindAndSetField(RecRef, Fld.FieldName, Fld."No.");
      UNTIL Fld.NEXT = 0;
    END;

    LOCAL PROCEDURE FindAndSetField@1000000004(VAR RecRef@1000000003 : RecordRef;FieldName@1000000002 : Text;FieldNo@1000000004 : Integer);
    VAR
      FldRef@1000000001 : FieldRef;
      Fld@1000000000 : Record 2000000041;
      ThisRecRef@1000000006 : RecordRef;
      ThisFld@1000000005 : FieldRef;
    BEGIN
      Fld.SETRANGE(TableNo, RecRef.NUMBER);
      Fld.SETRANGE(FieldName, FieldName);
      IF NOT Fld.FINDFIRST THEN
        EXIT;

      FldRef := RecRef.FIELD(Fld."No.");

      ThisRecRef.GETTABLE(Rec);
      ThisFld := ThisRecRef.FIELD(FieldNo);
      ThisFld.VALUE := FldRef.VALUE;

      ThisRecRef.SETTABLE(Rec);
      IF FieldNo = 70000 THEN
        INSERT
      ELSE
        MODIFY;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Report 70000 ForNAV VAT Order Confirmation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Ordre;
               DEU=Auftrag;
               ENU=Order;
               ESP=Orden;
               FIN=Tilaus;
               FRA=Commande;
               ISL=Pîntun;
               ITA=Ordine;
               NLD=Order;
               NOR=Ordre;
               SVE=Order;
               ESN=Pedido];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
U7RKrpjYl8/7cfyH/wE=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70001 ForNAV VAT Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Faktura;
               DEU=Rechnung;
               ENU=Invoice;
               ESP=Factura;
               FIN=Lasku;
               FRA=Facture;
               ISL=Reikningur;
               ITA=Fattura;
               NLD=Factuur;
               NOR=Faktura;
               SVE=Faktura];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  Name=NoOfCopies;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE GetNoOfCopies@1000000006() : Integer;
    VAR
      GetNoofCopies@1000000000 : Codeunit 70007;
    BEGIN
      EXIT(NoOfCopies + GetNoofCopies.GetNoOfCopies(Header));
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70002 ForNAV VAT Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kreditnota;
               DEU=Gutschrift;
               ENU=Credit Memo;
               ESP=Nota de crÇdito;
               FIN=Hyvityslasku;
               FRA=Avoir;
               ISL=Kreditreikningur;
               ITA=Nota credito;
               NLD=Creditnota;
               NOR=Kreditnota;
               SVE=Kreditnota;
               ESN=Abono];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table114;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table115;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
UNmK509/SmI3Cw5av3bvo01yyeKAD8JfWPyn/wU=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70003 ForNAV Sales Shipment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Salgsleverance;
               DEU=Verkaufslieferung;
               ENU=Sales Shipment;
               ESP=Env°o de ventas;
               FIN=Myyntitoimitus;
               FRA=ExpÇdition vente;
               ISL=Sîluafhending;
               ITA=Spedizione vendita;
               NLD=Verkoopverzending;
               NOR=Fõlgeseddel;
               SVE=Utleverans;
               ESN=Albar†n de venta];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table110;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table111;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
Cf7xfw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70004 ForNAV VAT Sales Quote
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Salgstilbud;
               DEU=Verkaufsangebot;
               ENU=Sales Quote;
               ESP=Oferta venta;
               FIN=Myyntitarjous;
               FRA=Devis;
               ISL=Sîlutilbo–;
               ITA=Offerta vendita;
               NLD=Verk.-offerte;
               NOR=Tilbud;
               SVE=FîrsÑljningscitat];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Quote));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
Ow3aWry3H8NlfMXEmQA+jqM//R8=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70010 ForNAV Warehouse Shipment
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Pakningsliste lager;
               DEU=Packzettellager;
               ENU=Warehouse Shipment;
               ESP=AlmacÇn de embalaje;
               FIN=Varaston lÑhetys;
               FRA=Entrepìt d'emballage;
               ISL=Pîkkunarmi–stî– vîru;
               ITA=AlmacÇn de embalaje;
               NLD=Pakbon magazijn;
               NOR=Pakke slip lager;
               SVE=LagerfîrsÑljning];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Header            ;
               DataItemTable=Table7320;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                END;

               ReqFilterFields=No.,Location Code }

    { 1000000001;1;DataItem;Line             ;
               DataItemTable=Table7321;
               DataItemTableView=SORTING(No.,Bin Code);
               CalcFields=Pick Qty.;
               DataItemLink=No.=FIELD(No.) }

    { 1000000002;2;DataItem;BOMComponent     ;
               DataItemTable=Table90;
               DataItemTableView=SORTING(Parent Item No.,Line No.);
               DataItemLink=Parent Item No.=FIELD(Item No.) }

    { 1000000003;2;DataItem;CommentLine      ;
               DataItemTable=Table44;
               DataItemTableView=SORTING(Document Type,No.,Document Line No.,Line No.)
                                 WHERE(Document Type=CONST(Order));
               DataItemLink=No.=FIELD(Source No.),
                            Document Line No.=FIELD(Source Line No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
Qq1v/wc=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70011 ForNAV Warehouse Receipt
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Lager Reception;
               DEU=Lager Empfang;
               ENU=Warehouse Receipt;
               ESP=Recepci¢n de almacÇn;
               FIN=Varaston vastaanottaminen;
               FRA=RÇception de l'entrepìt;
               ISL=Vîrugeymsla M¢ttaka;
               ITA=Ricezione del magazzino;
               NLD=Magazijn ontvangst;
               NOR=Lager mottak;
               SVE=Lager kvitto];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Header            ;
               DataItemTable=Table7316;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                END;

               ReqFilterFields=No.,Location Code }

    { 1000000001;1;DataItem;Line             ;
               DataItemTable=Table7317;
               DataItemTableView=SORTING(No.,Bin Code);
               DataItemLink=No.=FIELD(No.) }

    { 1000000002;2;DataItem;BOMComponent     ;
               DataItemTable=Table90;
               DataItemTableView=SORTING(Parent Item No.,Line No.);
               DataItemLink=Parent Item No.=FIELD(Item No.) }

    { 1000000003;2;DataItem;CommentLine      ;
               DataItemTable=Table43;
               DataItemTableView=SORTING(Document Type,No.,Document Line No.,Line No.)
                                 WHERE(Document Type=CONST(Order));
               DataItemLink=No.=FIELD(Source No.),
                            Document Line No.=FIELD(Source Line No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70050 ForNAV Tax Order Confirmation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Ordre;
               DEU=Auftrag;
               ENU=Order;
               ESP=Orden;
               FIN=Tilaus;
               FRA=Commande;
               ISL=Pîntun;
               ITA=Ordine;
               NLD=Order;
               NOR=Ordre;
               SVE=Order;
               ESN=Pedido];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
/Kf/BQ==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70051 ForNAV Tax Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Faktura;
               DEU=Rechnung;
               ENU=Invoice;
               ESP=Factura;
               FIN=Lasku;
               FRA=Facture;
               ISL=Reikningur;
               ITA=Fattura;
               NLD=Factuur;
               NOR=Faktura;
               SVE=Faktura];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
m/m9ybm7iObpDWG0Kp158e/+BQ==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70052 ForNAV Tax Credit Memo
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kreditnota;
               DEU=Gutschrift;
               ENU=Credit Memo;
               ESP=Nota de crÇdito;
               FIN=Hyvityslasku;
               FRA=Avoir;
               ISL=Kreditreikningur;
               ITA=Nota credito;
               NLD=Creditnota;
               NOR=Kreditnota;
               SVE=Kreditnota;
               ESN=Abono];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table114;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table115;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
vF31/+Dtr2ni5X7v4sx7jJfpFRO0Kh95yZ/+Fw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70054 ForNAV Tax Sales Quote
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Salgstilbud;
               DEU=Verkaufsangebot;
               ENU=Sales Quote;
               ESP=Oferta venta;
               FIN=Myyntitarjous;
               FRA=Devis;
               ISL=Sîlutilbo–;
               ITA=Offerta vendita;
               NLD=Verk.-offerte;
               NOR=Tilbud;
               SVE=FîrsÑljningscitat];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Quote));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
Jw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70100 ForNAV VAT Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kõbsordre;
               DEU=Einkaufsbestellung;
               ENU=Purchase Order;
               ESP=Orden de compra;
               FIN=Ostotilaus;
               FRA=Commande achat;
               ISL=Innkaupapîntun;
               ITA=Ordine acquisto;
               NLD=Inkooporder;
               NOR=Bestilling;
               SVE=Inkîpsorder;
               ESN=Pedido compra];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
v7X44DwGy+iSh1PRCX/l4Z//Hw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70101 ForNAV VAT Purchase Invoice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kõbsfaktura;
               DEU=Einkaufsrechnung;
               ENU=Purchase Invoice;
               ESP=Factura de compra;
               FIN=Ostolasku;
               FRA=Facture achat;
               ISL=Innkaupareikningur;
               ITA=Fattura acquisto;
               NLD=Inkoopfactuur;
               NOR=Kjõpsfaktura;
               SVE=Inkîpsfaktura;
               ESN=Factura compra];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
raIXr1/+HEcsjd9avmP34So+55Evht6vPPrL/wE=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70102 ForNAV VAT Purchase Cr. Memo
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kõbskreditnota;
               DEU=Einkaufsgutschrift;
               ENU=Purchase Credit Memo;
               ESP=Compra de nota de credito;
               FIN=Ostohyvityslasku;
               FRA=Avoir achat;
               ISL=Innkaupakreditreikningur;
               ITA=Nota credito acquisto;
               NLD=Inkoopcreditnota;
               NOR=Kjõpskreditnota;
               SVE=Inkîpskreditnota;
               ESN=Abono compra];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table124;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table125;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
/fLnOOJp/NbiHb8Pl/G5iAI59H4V0V/+Dw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70104 ForNAV VAT Purchase Quote
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kõbsrekvisition;
               DEU=Einkaufsanfrage;
               ENU=Purchase Quote;
               ESP=Cotizaci¢n de compra;
               FIN=Ostotarjous;
               FRA=Demande de prix;
               ISL=Innkaupabei–ni;
               ITA=Offerta acquisto;
               NLD=Inkoopofferte;
               NOR=Forespõrsel;
               SVE=Inkîpsoffert;
               ESN=Oferta compra];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Quote));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70150 ForNAV Tax Purchase Order
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kõbsordre;
               DEU=Einkaufsbestellung;
               ENU=Purchase Order;
               ESP=Orden de compra;
               FIN=Ostotilaus;
               FRA=Commande achat;
               ISL=Innkaupapîntun;
               ITA=Ordine acquisto;
               NLD=Inkooporder;
               NOR=Bestilling;
               SVE=Inkîpsorder;
               ESN=Pedido compra];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(Document Type,No.)
                                 WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70151 ForNAV Tax Purchase Invoice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kõbsfaktura;
               DEU=Einkaufsrechnung;
               ENU=Purchase Invoice;
               ESP=Factura de compra;
               FIN=Ostolasku;
               FRA=Facture achat;
               ISL=Innkaupareikningur;
               ITA=Fattura acquisto;
               NLD=Inkoopfactuur;
               NOR=Kjõpsfaktura;
               SVE=Inkîpsfaktura;
               ESN=Factura compra];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70152 ForNAV Tax Purchase Cr. Memo
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kõbsrekvisition;
               DEU=Einkaufsanfrage;
               ENU=Purchase Quote;
               ESP=Cotizaci¢n de compra;
               FIN=Ostotarjous;
               FRA=Demande de prix;
               ISL=Innkaupabei–ni;
               ITA=Offerta acquisto;
               NLD=Inkoopofferte;
               NOR=Forespõrsel;
               SVE=Inkîpsoffert;
               ESN=Oferta compra];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table124;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table125;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
ixWpwARPFlZefvhm2YrDNys+yvz7/wc=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70154 ForNAV Tax Purchase Quote
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kõbsrekvisition;
               DEU=Einkaufsanfrage;
               ENU=Purchase Quote;
               ESP=Cotizaci¢n de compra;
               FIN=Ostotarjous;
               FRA=Demande de prix;
               ISL=Innkaupabei–ni;
               ITA=Offerta acquisto;
               NLD=Inkoopofferte;
               NOR=Forespõrsel;
               SVE=Inkîpsoffert;
               ESN=Oferta compra];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table38;
               DataItemTableView=SORTING(No.)
                                 WHERE(Document Type=CONST(Quote));
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.),
                            Document Type=FIELD(Document Type) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>G3oAAO1d627kuJX+H2DfQVsLxDa2Uk3qSs64MvClPW2k23Zsd3eQTGCoVCxbaZVUK6nadpIF9mny
YHmSJSlKpQtVRdXF7cFMA+OxJZE6PN8hec5H8ujwh6dpoH0lceJH4bAHB6CnkdCLxn54P+zN08nv
UO+H3//Hbw7/lMbuNZlFcZq8d5+jeXpDYt8N/L+TWFv8+qmoyBzoA4vVVrnU0y7cKRn2RE1nUXzh
fu1pJ1GYxlFw+zyj907J17dPs5gkyaD00sHH89Kfel9reewre00/f6s21HJJ+trJPEjnMaHXQjKn
RYK+djUfBb73B/J8G30h7Omx47mIIB04E5OYgMp/6iezwH3O5GYCH33Sbt0nWjT2HtyEaH+cRynp
aZUmFY026MvBAFoO7mmXo78RL72Ihj0HQMvsaWc+CcafyYjq76vvkY9xMOydfPfTIxklfkqSnx4f
H43BJIpD9+vAi6Y/nbqp+9NREND3jwKSaDqAaJA+pT3tyr0n74h//5AOezp2QHblsz9OH+gFyNrx
wY3v/TChIgGqC8h+6OIHlYQCMOwdMRj7Gp6lfY22Lb4h6ZBpYObTSpjAWRs/hj59+JaE6UNyOTn6
4AeBPyUpiWkTw6uYZE99cBN66caL/VkqV9wtmc6CQY9al6YdHrvhOOG/0j/OUzKFwlTeEXfMqq7Y
SKZlpg/2KCtLLYs8skZfkfiaeFE8HvbSeE6BOXEDj2uatv1oGs3DVDsPvWDOTFz7dHTbzy72tNso
dYP8SRv0bdjTfoyj+axyw6AKEe/95MZVGfMbHB+qIvY/A9Wuf/LJ47B3c3l9e37x4/5FNDjQPr97
e/12/zTy5lOqVY238eTy4uZ2nxvXwQFT/f+c+QHVaC4HLdi/ipKUtYLWzxoazXxC70CK2Tltvs5K
JSRlWrmYT0ckzlXCYcqFyiHqCe3XwCgBck0mvP0SKDINCCC4TvLWFLoprOjY9b6cREFExTmmNssh
Cm8eYj/8MuxN3CChV67oX9SEni5DjyHKmlC9dxm+paPWc3Yja5WwONrHeNdrN7l+XTbap6LHTA9v
4ziKk7zKG/8+dNmgMeyNINTtiTnGhkWIDQExPc9zIXTdsacD3Rl72NXNMVWPkECuhqyXng17yAAD
AADslfRMNS10m1SuVhEwpQjckqf0OHrqVbrN3emcZMZxQ4dn+lYD8bfqptm38ADTf7S295HnMonP
gsilhgANyG8h1NdsJ/s1HyJuyH1EtI/nfQ3NUnYxJjmUAYW1DDMT6CigCmTNH/Y++ONxQK5Z66kW
ovjv/B6dCrIr7Olh79//969CYmafdATi9l5u0yB/oqYiqqSb9Dkg1Dyi2E+fM2VZPe1jQjLhhf3w
vwu5FxdrAosbb+pIvOFQyPDRs1faKviczOM4GyjvblLabdx4fOLOGArJHe3IzwVidBLq26ABEh25
LRu0wFIFgas1q7Op04Ucg7ocA15GSctOU8tyvekyvRlZJaiDXfMWvI+iL/NZcnflPjPIbkk8TU5J
wvsxbUDZ6KkKeW/TdSixd51q0zG4pTuW/XK23ip4q+2X2z1oK64EGd5NxzBkAJvZK9nEtDnCwjwX
6OocWmBDATKwmxADsIAYSwHuawlT0vA4CsarwW7AV0jVHbq8qBJsECriJofHlMFjiar1rvAUI1Zj
milj0oLG0qllDTRWTxwVmbtNI9DYSO2WTO22qLrLfF5Tu3Au6rpfovRsasfG1jpBVQZV3ZcLqQGg
OpHLAbBlADiiaqUJWwrAZUyvXUSrdL+Dsad4s6LG8+fVlC2Zzzso25EpG4mqO8/yhbJprHZN7v2E
hu7cv1ZR+7YHGYkMigA0S6pBoTpPy6FAMihwVrW+9nT8iYTjKJZMxG0obHfUkeqXzqh3aZRJ1gGW
WjElTPTN5mAsje2AqLvzJMwpCu4i0YYcjceMEqtEDzqfjA0dNV1fxgTxONC2kRybTn7vbTR7TyYp
J/1S4fPSaxUfOHugCWTWjEGtGctRlJZRg1B1Pu8aFwIpuCJy15Wm+pNoOnPD5/NwEsVTjlYF6I4Q
QwOI0GfrWItwZgnY9YBnCa7NVlcw7oburqJ+adgPRdyvdw386wMod9FaYn0gj/W7DZ2NEDXrjC29
s0QNCEm1/9b2vtP26P9EL5QPtGoF1ZBU9US6IiklIqBgInS5k3Lle4wLXN5VxUMt/neFThewO/RG
3jMttD6ZkL+YVstXb/4cRdPzqXsvdcsl3S2vQA0Y3F3nUm4ACnLAUPJGSr3nirdM6FCX9xxogSWd
Z0ecTovCF52CP6KkZUPV0+gKhZQHgIIIMLr4IHW/K5+VLCkgnGpb4Q5uHxYx6Ci7iOs4hcauPAop
dwAFeWB0Jg9k7qJZhm0JcZOh9+JLAl2CrjXDLGNXHoOUeICCeTA6Mw8y9NACPTPrWO1EqCDmIDL6
mmPmWL8clKtpi05EhbEr90BKYUDBYRhdOAw5R9dhGc6C32DEVCf2ulN5xo6WHmCV7Dh8I1lLba7e
lVfuTLkPchZFaXVxO7uyfFH7iuJAzsPjKE2jab6g3LZ2vWy9u7k6rr7SnQtaWsi23TEGLnJtwxsb
YIQnIwAxsA0XeyNnQhwDIEDjSbu2kJ3XVCxg6xZYY+0abmPEsxchE3eeTWnMpLY62ugZJ/R33tBF
18gvfZgHqf/eDwvYss7yF5kz/RCF5CLStP8cant72g9aW3y7YKJECRoqaVmstKza77RwHgR97bf/
9XT6Pf1x9L3k6bd3H1w/UBdBPL9UAvGMeP/S17+LpoRZcgclFEWWylA8paSFhkugLk6zaC6XXLDm
80oSnh8fXagLxZ9eqh/+hNKbbz6fn92eROMuGC3KLBVi8VgmyV8HC0kmfCvT/mQe8hFG2//qBgfa
P2JCh6hQo398/78Hg79Ffri/p/1T2zuQzT+/9rpfe92vvW6nvU7JnTN1qTu3rd1UpnzD4VqcuV71
G+RUK3WGmo6DvaBaz1M38L1N3IjMa/iRpO/JvRvQxo19jvH+wfeygU7+oBo25sbY6KpOtV53qg2B
DXOYFPbvVnbZMnqxsc02q0i6yRb3lm2yLXbWsk2zrBb2y8GiCL30heqLxIS6383tvO+5712uZHh2
/vb9Kd+829eq+3azO5VrB9l+XIPtyo6zUInXyy6Kd1WVXN9/2/Ci5bzBcTR+LkcprKUJu7giUNlR
7FF6fSn8gMQZ6ZB4xmhiTTD0PGiYExd5QHdHaDQeY29iT3S3Hn6UKisiEBtIekFLENJQoVPREjea
mlL/dC2urhgz9IFhGNCxbLvK70skoDJcR48y2RryoYp8tJRcOn5jge5ncQgADCzbwQDqhil+kYuT
qYwEUn1J5cJyOVgdZYnvOMlTyCUNxAqqgT1bkhzbSHdMx6ZhKDZ0ZMkGRfYOvvzUZV2LWjOdEB4L
W755iB4v5+lsnooK6VB7yefbT24wJ/t7rIl7B9pwqC3RH1eRbOsx2GDwrVQunSQbCIkJ06qH2G0I
VXecKkJVKZRjpg8sZOuWbkBoI+yw4akFsUrxGhzdFSzxPFbrsb7y19CjWAS06o5Hmx7/OHfDlAql
rsRFiabVm4ZpI4gdiuJx4IZf/kziKKcbWpS6qK4b1bex/jfxLprA1JcHG8CIlULLUgSGHVSKJh+I
m/B1UVV0asXqEFnAsOkv0GEbN1sQqVXxwrDYW4WlvlTYgEWsGlqOIizsx6mfeOzU1ZWXqgPTKNjs
PYaNkGWZjKFX7T2NWjdCqzKnnD6H7tT3EuHr0pcP3rlJ/rLhkMvVHV+0VXzr64sNfMVSo6U68zPj
P4mSDsAuSjQRdRyAoYWdDoguqnvZjmdvd8KvLx02gBGriLbqhJ8fdFSFJX8+BwUOIDZsywJIN3UA
ILbVMSkOWb4sIptwE01E6quC5fvLnOhlDtzhm5aIoK2QNAQXt/gCBY3u5tNQKMBY6wSbfFdB85An
j022f8KzY4yZC1CKMr2Ri7EORkSH5gQD7HqAINdDpqlPHOzCieeMJ/rYkUWZjaOa7Pz02oGmbUmU
pRxu8qPb0qWtkrYjtmSeUF3zpcbN4k7bloi7hehTO5qn0Rk7OL580usUjNqqLkf1IMFFdNdmuDVV
rt5yKY1h7QECpo6Bgy3bMLDJ9nk01g5bBsoq6yuJcDPRGvusc4lXBb3dx1C5u1Go6uUiW1vVA6md
klrEnG24q8Msj3/xwESWbiFkmwYddtju8vXwrlT/jYF35O7MFoFXDcUdVQ+nCnweF2+OejNgz7u4
gSEdo3VjbcRbg/cM1+YeewneC28pn2Tz1BcbWoDcfdqiBajG/I4qGVO1ABYJXOZx+OZm0MIM5LZg
Q4v+pwN2Zms9Y1jOG7wGi5BTPlu0CFW6wVFlgaoWUYv2222ivp9O3UpaaYrcTiwEqVtqmGzldD07
WcVZrGUpL0xjOHKaSroNcIv2pUp3OOv5ljn3sAvDatIkhUUB0zYdxzLXdjRbOZPXMOjIPdBdW4oq
/+Ks55ZmjEjZTjacoCSoinxXbMfIfun0VSUVBTuYQkLvOd9bcrBXYnyMgQ0QHa/oP6RDHa1tX+tK
su2BrbPxoZ17wS/KKrU0MjtnVOJt2lsqa1BnrkohG1DLIaTYDZMmEVW6/G02O1QEKBFRLsQ2tvBE
JxhaumtMAEaWY+gjV0cGNnXTdGybjHGNiKpUtyCiNtnxgAyJsl4vEYVMibivlYhC6zmjF9Fdi+Fu
xjtBYJi25UBr7UDkFfBOSO4ffgPeCa3nCpZ5p41hXso72Q5yEHIMdrri5887oZ0Tjqq8E1rPsyt4
p41R/9nwThsBjnfuYqnSTHg9orFC22yOuirN9IpYps3w3znNqEoq4fVoxjqp1GoBL0AqWb9kTgnL
6cnXwinh9dzEglPagV39Ujkl/G3YR1VOCau6nBcReF1UkYGo+WCTbw76hVFFeOeO6yugijDeDVVU
Dbk43aBy7Iv6sOGcjO8Eg5pvM8vTAuEsV4mDpNmBzFJqtBUJthRPfa1Oq1Bswlu6T04ZDgjkKYLU
Law9JCqHQhAoJQVqANLIcSbPCwR1C6wGgQ1hfU0OhchyLl7fPdV5XrCD5iUZf9oV3AxBVpCjyzNp
t+T9YQ5CM11F6fI3ZEcluShGBFqmDm0PjQ1CyAghC0MHIEhMxyYGgQhhkzhSdrSRkALTzmyburM+
RQpB3UHb4LCpqWbzPyuLlzhNm4zxdSdnA20bi9w6LangTLBS2693kN90y3/bIL9iDFqaLh7U2bG2
bDl8WfNbDj8VAUrDDwJgbFtjrNsWJpgOHQQ6hmGPELBtwyVYN0cjy7JHsl3CzXw4wOLptAy4wQDE
PpGQveTmwZ0R+ZzLb1WXZyzpSfZqtklWKquGWW52mFrkxyv+vkljknoPub9+FN6zM9ZYsuyU2Sqr
MxcdineUD2tvMDqofY6gmU7VVvX+jOy2Y/c13eTptXS2qWhlCCUZhdv7uwheOvd42QcHNvDe1D4y
0FQmWjmslrSIuBbZwq3SV2kqqik+yfXp6PZ3VaWt0uqSoh30LUkA2MWZq/lnat8UaOrbWanv7Mtt
G9rrzXzE0y10dRqKch0Uq/BtoIViZURtZdJR+35AU7FYTbHQLAbx1YptnBaoa3qZKrkeu5Mc3fBa
7yUdwJWn8lPnAWTMaeXjKGofKVDzEUGXwWy7llDMEeXBqtPI1gGVlu8TqKMiYykrX0xR+0qBGiqw
jEqeFbO1g3acY6jeqUPYPpEs7TxFwQ6q7zRtN+m8Ff54tbscvml8qLExO4lZSfiUbsBSnTwdzycT
pW9qNlLw1GuQJeNxAM8OvCQfD1Xa1I2ftT+QZ5EbB/a4rx7F9HKRE3M7yXKgLg/q69lyqk37dmlz
CjnqmXMuyGMtEJGJXMrPKUlB0zwhCtlnC1SOiLZZ22LKrj9xmL1H8iXRbGAjoqstFggjqgvCPuub
a+jkgXhfihSzYnWwvFK4n9lEbkYg/ycdWxfFyk1mfa4sZ7nx5SYdZt+VrX2lVnwejMVtUbYXuG3w
W7yzEuewCSb7KDAXO8+2ylpPxZ/PasVyj54lac+LwWqxIlsY58mCyssP3yxacfhmyVedf///</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70201 ForNAV Customer Top 10 List
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Debitor - top 10-liste;
               DEU=Top 10 Liste (Debitoren);
               ENU=Customer Top 10 List;
               ESP=Top 10 de clientes;
               FIN=Asiakkaat - 10 pÑÑasiakasta;
               FRA=Clients - Palmaräs;
               ISL=Vi–skiptama–ur - 10 efstu;
               ITA=Lista primi 10 clienti;
               NLD=Klanten - Top 10;
               NOR=Kunde - ti pÜ topp-liste;
               SVE=Kunder, 10 i topp;
               ESN=Los 10 mejores clientes];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Net Change (LCY))
                                 ORDER(Descending);
               OnAfterGetRecord=BEGIN
                                  i += 1;
                                  IF i = NoOfRecordsToPrint THEN
                                    CurrReport.BREAK;
                                END;

               ReqFilterFields=No.,Name,Customer Posting Group,Country/Region Code,Date Filter;
               CalcFields=Balance (LCY),Net Change (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IF NoOfRecordsToPrint = 0 THEN
                     NoOfRecordsToPrint := 10;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  CaptionML=[DAN=Antal;
                             DEU=Menge;
                             ENU=Quantity;
                             ESP=Cantidad;
                             FIN=MÑÑrÑ;
                             FRA=QuantitÇ;
                             ISL=Magn;
                             ITA=QuantitÖ;
                             NLD=Aantal;
                             NOR=Antall;
                             SVE=Antal];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfRecordsToPrint }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      NoOfRecordsToPrint@1000 : Integer;
      i@1001 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Customer);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>0DEAAO1b63LbuBX+35m+A8vONPasliLBe2LtjizbG019q6w4SZuOByIhm7sUoSUp29q2M32aPlif
pAcEKZEUxFDypu2PZGazIggcHHznfogcff88C6VHEicBjXqypqiyRCKP+kF035MX6fRbR/7+u9/+
5uhDGuMRmdM4Tc7xki7SGxIHOAx+IbG0/nm7ImQoSDEZtcqQLF3iGenJOaUzGl/iR1ka0CiNaThe
zuHdCXk8fZ7HJEmU0qbKu2HpEXWkLdMe2TadYlepJxWcdKTBIkwXMYGxiCxgSdiRrheTMPD+SJZj
+hNhs33bww5xkGpPDWKowP9JkMxDvOR8M4b7t0ApSekMTj6mc0lTpfMgSWWpcqjVsXXYXlU003Zl
6WryI/HSS9qTbRWpmiydBST035MJIPgYeORdHPbkwetPT2SSBClJPj09PenKlMYRflQ8Ovt0glP8
qR+G0hhPQpJIQMRR0mfY/Brfk7ckuH9IezJybZWPvA/89AEGNHaSCxzfB1ECjyqgUfmrYP5dFMD6
MYnSh+Rq2r8IwjCYkZTEgMM8gJWmAUyDtHpyn8m8I9lz2Pwquo4Jp3CBE5h+48XBPF3hNSYzwDAl
MmiSJB0d48hPsp/wMEzJTMvVosC1phEcUXZ2Npmthgk49DL04DzHOMSRR6SD88HHw84lSaXBA47u
8wFgPV+ZgQbHY//TnNr4bUCeevLN1Wg8vPzhoE7kULoanZyODk5I4pGIWcchw+znsyCE4xaMXFKl
w07SWSnINU1SmCz9ENPFvDOgCzjWsjsi90w5B9QnHWCCSJyMLA19wFjOoakhVUJrRKagWEKU3hLs
k5hjxEHlEuHjZTEeY++nAQ1pDACC4hBZugnuI8xMpCd7iExt00dTWOVMbNXWVEfVNcNwVX3iOGiq
TlzdtyZMqzKBg15n6l6TeKe6+3UcROlVdAoOZ8n0syen8YLtzJeLGOZKfcaU2FVc17LlEh6ASI5B
UhmtImUIkRqT5/SYPhcwvUtIPPRXgzfgzmBTXTM7FpjHOfUw4/AspBj0GqxGy9hxXd0tLOKG3FMi
vRt2JGeediTvAQMsaU8tg/6Wxr/0Q8C5J5+TKZgO27An//uf/+L784FsxowwoheB74eEz2X6ChQz
bSsMJo653Sn5+hoMAMRNugwJAE/jIF1yQExZgumc6ykOE5I913bOX3TrwHYzZEVwI07dagP36TPx
FgzRMTiYOurgeDsmh9cWYb9+92sgP6Y+Xu4PPF/eCnf7xbgjEe46p+4Icb8OPGbSJegHdDbH0XIY
QWCZZcje5ZM2sIa4AXBXcMxFZMMLLZODZZnOFvRGzHQr0OcjK+zP6T3NaGb5xp8pnQ1nmPmiTci5
Z4GxxVzJlrWC3N0ZYl0EscGpaWob3V4rx90AzxmcFc0W+xN1izIn7Ey9Yxr6bEJMCpcdgvtup98r
HvbV8IJAK8A1TajkJdb303xDJBYz3xPtKJZrzONdJhMNdFkBRdcQiIb9UDVTF7r8XN8dscsXyeeY
xhDFWI5CU8gItgisbhWcvSaTapRXtrydsPT2wlodZT/5mdWw3RXE7c3QUg4rmjiMn1GaVhMeyNvi
tIz0NciCDCMuglXKsU52fNfRLDRRTc/GUwPjCfKniPgTy0a6baoTYsKPqWOWkhHTsRV4V8tc+M47
5yeaWWFdE54zP9VKCpc0IsXjNp+wqcK2m7NdVX1kdEzVEehMtmvOpcVOG/LzXkDqWvDAyj+S1F7x
wU2KQPMkwPcxnuVUISayY7LzF3UkT9M/fMwniogwMmSKoaK7xhHJSUEYOo3Y4v5zkHxkwSSLKmdc
LdevPmx/9REqFwpFj3jd5su6rue8ZaRyrsBZ3AZJADSGEWM2qR7zW62RygdOBan7UTnq5iAKBQFO
hGkaDiIoVfg+WiFP9vKCzCYkZnLmHqd4XtVpYr4LhVgzKJxXNQIEPvwWhwuy3qh2xrzMu4N6TJb6
8f2CeZ0bD4eE28mfFjA3BYV/3CqYqkdB+ue2hDKQV4Ev2fSo2woQEFVZHpu22M2Mced0HLUqf/LH
coKnmPAHHIOjGGgzM0SmqViuYZcyl7wloKksFpbKyyEUzDgaEb/km1qFJyQuVEqk906WUasqJX/U
26Ji65riaK6VgVJic0SXODwOWdzZEQF7pxM35a5IXB+IT4zWFbCpblMB3USKqRmaJcxeuRqsgxHP
bgrXoWSpS55ZJkrN0ETpTYt17SB1X6RUTXmo3qo8yB+1FhA7SFd0wzZfDnDFebaGt7yqFbi6IPt/
YT6I6vlgbsG6OOnfzAd5P4mPNzfAWvWyCkLCrHJrg2udbSLDQdZEdX3b0Axbd20Q/9S30dRCuq77
njtxkE1QOdvUDFXYI8tZ2Tnh1MW9w5qe8g7cXaYRWf8ygbppeZfSvu+zvrtVSSM7GZNt69pSIjum
8y1l0QBCLUP6AtK84ByCYoEm1/S/bDYylOsHSEkvqST9rie9eiV9LwnmVFW8WPGN9Ep6Df99I1qy
IvtaihYhxLg//P755A381X8jmH16d4GDsD0L+fxGDvI5+f6N278FQ2a6twMIqyWNPKxmtULhtj9m
fe4kjbNnQK81O5tLC77EjG3Ob8Xh8Lh/2Z6pbHYjPtmMVjvfvB+ejVn7fwcZrdc0MrGexjn5q7Lm
ZJp9ZjiYLqLMlUgHjzg8lP4WE/BMkQQPb/5xqPxIg+jglfR36dXhlh5EYZebYeSrSX41ya8m+UVN
sl0aZohz3Je18LS2KZteT9nyEkQ3hXnHMfWX5YSNPVc/OaxbdZZhu4ZmE82cYtfH/sTyJ77r+67l
qebUnVrYsJFj1dIlTnGVT1m6Yu6RNVkFg2n2Bbl2lg+j7DuyqLeW7SfOjRrKwRF9qrOzwZJdYQlW
bOEK3pQRfZ/fFIBq1rJdVUO6kf/Y0tIZkHADGyFD9SIz35+tr7DKBrTNWwXrJNFlSeKaT6Q7uooQ
FESmhizNNRqrGNawavjasf1byaXgs1KjoYmLyXZWVTWaeg+nAm/eyzHqBWYTvGgHeA0VShHTcqEE
4SA3wwuPZdDY406wGS3KxCo69V5OBZ28IjTqFWETOvoO6OhIMzXHdWwdXI+NtGblq5TataK8saBu
REzwpaYZsXovqIJY7pCNem+wCTHjiyFW6/7UMPtMj6cRNUEDsRm1enuneLfNAW6z3aOuwH23DqMw
nBW9AxouZlF+FqvK+ya/5VaUYbe8HrR5MagUbokLTtdAloccDZmuM9EmU0ywq3oTm9ie6yPbNW1f
r4Xbjbs7+wVcw6no4BbrFn7H/VIB13DrAXcLV/+tgGvuEhHMz1hw9bbBZvDVddM0XdVFu3Ro6QvC
q7lznGgTRc1d4oS1J2ZFRNV0ZiO63uwBa5i9NL6aO0eLNvHV3CVa2HvitlvkaGhy73MjaZ82eKMc
XnLTriqgNuHcrH/UahKQ8z8QkCDQ/0oiekGSYL7kWl5VSP8f2UP9A8tRt3qPOPvwP659hq4ElVXg
bf9drjazWydd+N5VAG37Raoyb4Ns7prYnbqcY/rZyrBbQqYORRnkMm5HI+LRuH5tne8Nzja70+9u
v2G53rRyU9bIV7JLZ8Xi0j3HYhWow2r3o27DP8X47j8=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70202 ForNAV Vendor Top 10 List
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kreditor - top 10-liste;
               DEU=HÑndler Top-10-Liste;
               ENU=Vendor Top 10 List;
               ESP=Top 10 de proveedores;
               FIN=10 pÑÑtoimittajaa;
               FRA=Palmaräs fournisseurs;
               ISL=10 efstu l†nardrottnar;
               ITA=Lista primi 10 fornitori;
               NLD=Lijst top 10 leveranciers;
               NOR=Leverandõr - topp 10-liste;
               SVE=10 i topp leverantîrer;
               ESN=Listado 10 mejores proveedores];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(Net Change (LCY))
                                 ORDER(Descending);
               OnAfterGetRecord=BEGIN
                                  i += 1;
                                  IF i = NoOfRecordsToPrint THEN
                                    CurrReport.BREAK;
                                END;

               ReqFilterFields=No.,Name,Vendor Posting Group,Country/Region Code,Date Filter;
               CalcFields=Balance (LCY),Net Change (LCY) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   IF NoOfRecordsToPrint = 0 THEN
                     NoOfRecordsToPrint := 10;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  CaptionML=[DAN=Antal;
                             DEU=Menge;
                             ENU=Quantity;
                             ESP=Cantidad;
                             FIN=MÑÑrÑ;
                             FRA=QuantitÇ;
                             ISL=Magn;
                             ITA=QuantitÖ;
                             NLD=Aantal;
                             NOR=Antall;
                             SVE=Antal];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NoOfRecordsToPrint }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      NoOfRecordsToPrint@1000 : Integer;
      i@1001 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Vendor);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
tYu0Wr6SXUorFleuQRarQBHK3feGHf9/xg//Aw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70206 ForNAV Trial Balance
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Balance;
               DEU=Rohbilanz;
               ENU=Trial Balance;
               ESP=Balance de Prueba;
               FIN=Alustava saldo;
               FRA=Balance;
               ISL=Pr¢fjîfnu–ur;
               ITA=Bilancio di verifica;
               NLD=Proefbalans;
               NOR=RÜbalanse;
               SVE=RÜbalans;
               ESN=Balance comprobaci¢n];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  Args."From Date" := "G/L Account".GETRANGEMIN("Date Filter");
                  Args."To Date" := "G/L Account".GETRANGEMAX("Date Filter");
                  "G/L Account".SETRANGE("Date Filter");

                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000001;;DataItem;Args              ;
               DataItemTable=Table70205;
               DataItemTableView=SORTING(Show by);
               OnPreDataItem=BEGIN
                               INSERT;
                             END;

               Temporary=Yes }

    { 6710;1   ;DataItem;                    ;
               DataItemTable=Table15;
               DataItemTableView=SORTING(No.);
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  TrialBalance.CreateForGLAccount("G/L Account", Args);
                                END;

               ReqFilterFields=No.,Account Type,Date Filter,Global Dimension 1 Filter,Global Dimension 2 Filter,Budget Filter }

    { 1000000002;1;DataItem;TrialBalance     ;
               DataItemTable=Table70206;
               DataItemTableView=SORTING(G/L Account No.);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF Args.GetNoOfColumns = 0 THEN BEGIN
                     Args."Net Change Actual" := TRUE;
                     Args."Net Change Actual Last Year" := TRUE;
                   END;
                   Args."All Amounts in LCY" := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1020001;0;Container ;
                  ContainerType=ContentArea }

      { 1020000;1;Group     ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 4   ;2   ;Field     ;
                  Name=ShowComaprison;
                  CaptionML=[DAN=Vis efter;
                             DEU=Anzeigen nach;
                             ENU=Show by;
                             ESP=Mostrar por;
                             FIN=NÑyttîperuste;
                             FRA=Afficher par;
                             ISL=SÏna eftir;
                             ITA=Mostra per;
                             NLD=Tonen op;
                             NOR=Vis etter;
                             SVE=Visa per];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Show by" }

      { 19  ;2   ;Group     ;
                  CaptionML=[DAN=Kolonneindstilling;
                             DEU=Spaltenoption;
                             ENU=Column Option;
                             ESP=Opci¢n columna;
                             FIN=Sarakevaihtoehto;
                             FRA=Option colonne;
                             ISL=D†lka–ger–;
                             ITA=Opzione colonna;
                             NLD=kolomoptie;
                             NOR=Kolonnealternativ;
                             SVE=Kolumn Alternativ] }

      { 1000000000;3;Field  ;
                  CaptionML=[DAN=Faktisk bevëgelse;
                             DEU=NettoÑnderung - Ist;
                             ENU=Net Change Actual;
                             ESP=Saldo periodo real;
                             FIN=Nettomuutos, toteutunut;
                             FRA=Solde pÇriode - RÇel;
                             ISL=Raunveruleg nett¢breyting;
                             ITA=Saldo periodo effettivo;
                             NLD=Mutatie werkelijk;
                             NOR=Faktisk bevegelse;
                             SVE=Faktisk nettofîrÑndring];
                  SourceExpr=Args."Net Change Actual" }

      { 1000000001;3;Field  ;
                  CaptionML=[DAN=Faktisk bevëgelse sidste Ür;
                             DEU=NettoÑnderung - Ist - Vorjahr;
                             ENU=Net Change Actual Last Year;
                             ESP=Saldo periodo real el a§o anterior;
                             FIN=Nettomuutos, toteutunut edellisenÑ vuonna;
                             FRA=Solde pÇriode - RÇel dernier exercice;
                             ISL=Raunveruleg nett¢breyting s°–asta †rs;
                             ITA=Saldo periodo effettivo anno precedente;
                             NLD=Mutatie werkelijk vorig jaar;
                             NOR=Faktisk bevegelse i fjor;
                             SVE=Faktisk nettofîrÑndring, fîregÜende Ür];
                  SourceExpr=Args."Net Change Actual Last Year" }

      { 1000000002;3;Field  ;
                  CaptionML=[DAN=Difference;
                             DEU=Abweichung;
                             ENU=Difference;
                             ESP=Diferencia;
                             FIN=Ero;
                             FRA=DiffÇrence;
                             ISL=Mismunur;
                             ITA=Differenza;
                             NLD=Verschil;
                             NOR=Differanse;
                             SVE=Differens];
                  SourceExpr=Args."Variance in Changes" }

      { 1000000003;3;Field  ;
                  CaptionML=[DAN=Variansprocent;
                             DEU=Abweichung %;
                             ENU=Variance %;
                             ESP=% de desviaci¢n;
                             FIN=Vaihtelu-%;
                             FRA=% Çcart;
                             ISL=Fr†vik ° %;
                             ITA=% scostamento;
                             NLD=Verschil %;
                             NOR=Avviks-%;
                             SVE=Varians %];
                  SourceExpr=Args."% Variance in Changes" }

      { 1000000004;3;Field  ;
                  CaptionML=[DAN=Faktisk saldo til dato;
                             DEU=Saldo bis Datum - Ist;
                             ENU=Balance at Date Actual;
                             ESP=Saldo a la fecha real;
                             FIN=Pvm:n saldo, toteutunut;
                             FRA=Solde au - RÇel;
                             ISL=Raunsta–a til dags;
                             ITA=Saldo alla data effettivo;
                             NLD=Saldo op datum werkelijk;
                             NOR=Faktisk saldo per dato;
                             SVE=Faktiskt saldo t.o.m. datum];
                  SourceExpr=Args."Balance at Date Actual" }

      { 1000000005;3;Field  ;
                  CaptionML=[DAN=Faktisk saldo til dato sidste Ür;
                             DEU=Saldo bis Datum - Ist - Vorjahr;
                             ENU=Balance at Date Act. Last Year;
                             ESP=Saldo a la fecha real del a§o anterior;
                             FIN=Pvm:n saldo, toteutunut edellisenÑ vuonna;
                             FRA=Solde au - RÇel dernier exercice;
                             ISL=Nett¢sta–a til dags fyrir s°–asta †r;
                             ITA=Saldo alla data anno precedente effet.;
                             NLD=Saldo op datum werkelijk vorig jaar;
                             NOR=Fakt. saldo per dato i fjor;
                             SVE=Faktiskt saldo t.o.m. datum, fîregÜende Ür];
                  SourceExpr=Args."Balance at Date Act. Last Year" }

      { 1000000006;3;Field  ;
                  CaptionML=[DAN=Difference;
                             DEU=Abweichung;
                             ENU=Difference;
                             ESP=Diferencia;
                             FIN=Ero;
                             FRA=DiffÇrence;
                             ISL=Mismunur;
                             ITA=Differenza;
                             NLD=Verschil;
                             NOR=Differanse;
                             SVE=Differens];
                  SourceExpr=Args."Variance in Balances" }

      { 1000000007;3;Field  ;
                  CaptionML=[DAN=Variansprocent;
                             DEU=Abweichung %;
                             ENU=Variance %;
                             ESP=% de desviaci¢n;
                             FIN=Vaihtelu-%;
                             FRA=% Çcart;
                             ISL=Fr†vik ° %;
                             ITA=% scostamento;
                             NLD=Verschil %;
                             NOR=Avviks-%;
                             SVE=Varians %];
                  SourceExpr=Args."% Variance in Balances" }

      { 1000000008;2;Field  ;
                  CaptionML=[DAN=Afrundingsfaktor;
                             DEU=Rundungsfaktor;
                             ENU=Rounding Factor;
                             ESP=Factor redondeo;
                             FIN=Pyîristyskerroin;
                             FRA=UnitÇ d'affichage;
                             ISL=SlÇttunarstu–ull;
                             ITA=Fattore arrotondamento;
                             NLD=Afrondingsfactor;
                             NOR=Avrundingsfaktor;
                             SVE=Avrundningsfaktor];
                  SourceExpr=Args."Rounding Factor" }

      { 1000000009;2;Field  ;
                  CaptionML=[DAN=Spring over konti med alle nul;
                             DEU=Konten mit allen Nullen Åberspringen;
                             ENU=Skip Accounts with all zero Amounts;
                             ESP=Saltar cuentas con todo cero;
                             FIN=Ohita tilit kaikkiin nollaan;
                             FRA=Ignorer les comptes avec tous les zÇro;
                             ISL=Slepptu reikningum me– îllum n£lli;
                             ITA=Salta gli account con zero;
                             NLD=Accounts overslaan met nul;
                             NOR=Hopp over kontoer med null;
                             SVE=Hoppa îver konton med all noll];
                  SourceExpr=Args."Skip Accounts with all zero";
                  Visible=FALSE }

      { 1000000010;2;Field  ;
                  CaptionML=[DAN=Alle belõb i RV;
                             DEU=Alle BetrÑge in MW;
                             ENU=All Amounts in LCY;
                             ESP=Todas las cantidades en LCY;
                             FIN=Kaikki summat PVA;
                             FRA=Tous les montants DS;
                             ISL=Allar upphë–ir ° SGM;
                             ITA=Tutti gli importi in VL;
                             NLD=Alle bedragen in LV;
                             NOR=Alle belõp i NOK;
                             SVE=Alla belopp i BVA];
                  SourceExpr=Args."All Amounts in LCY" }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    PROCEDURE SetArgs@2(Value@1000 : Record 70205);
    BEGIN
      Args := Value;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      This report is based on 10022 Trial Balance.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
/wE=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70207 ForNAV Reconcile A/P to G/L
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Betalinger og generalforsamling afstemning;
               DEU=Zahlungen und Hauptbuchabstimmung;
               ENU=Reconcile AP to GL;
               ESP=Conciliar ctas. pdtes. con cont.;
               FIN=YhdistÑ Ostaa ja PÑÑkirjasto;
               FRA=Rapprocher CF au GL;
               ISL=Grei–slur og almannatryggingastofnun;
               ITA=Pagamenti e riconciliazione della contabilitÖ generale;
               NLD=Betalingen en grootboek reconciliatie;
               NOR=Betalinger og generell avstemming;
               SVE=Fîrena kîpet till huvudboken];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000002;;DataItem;                  ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1));
               MaxIteration=1 }

    { 6547;1   ;DataItem;                    ;
               DataItemTable=Table39;
               DataItemTableView=WHERE(Document Type=CONST(Order));
               OnPreDataItem=BEGIN
                               SETFILTER("Amt. Rcd. Not Invoiced",'<>0');
                             END;

               OnAfterGetRecord=VAR
                                  Vendor@1004 : Record 23;
                                  VendorPostingGroup@1006 : Record 93;
                                  GenPostingSetup@1005 : Record 252;
                                BEGIN
                                  IF Vendor.GET("Buy-from Vendor No.") THEN
                                    IF NOT VendorPostingGroup.GET(Vendor."Vendor Posting Group") THEN
                                      VendorPostingGroup.INIT;

                                  AddToTable(VendorPostingGroup."Payables Account",-"Amt. Rcd. Not Invoiced (LCY)");

                                  IF Type = Type::"G/L Account" THEN
                                    AddToTable("No.","Amt. Rcd. Not Invoiced (LCY)")
                                  ELSE
                                    IF Type = Type::"Fixed Asset" THEN
                                      AddToTable("No.", "Amt. Rcd. Not Invoiced (LCY)")
                                    ELSE BEGIN
                                      IF NOT GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group") THEN
                                        GenPostingSetup.INIT;
                                      AddToTable(GenPostingSetup."Purch. Account","Amt. Rcd. Not Invoiced (LCY)");
                                    END;
                                END;

               ReqFilterFields=Document No.,Buy-from Vendor No.,Type,No.,Location Code,Posting Group,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code }

    { 1000000000;1;DataItem;GLBuffer         ;
               DataItemTable=Table70207;
               DataItemTableView=SORTING(Account No.);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    PROCEDURE AddToTable@1(Acnt@1000 : Code[20];Amt@1001 : Decimal);
    VAR
      GLAccount@1000000000 : Record 15;
      UnknownTxt@1002 : TextConst 'ENU=******************';
    BEGIN
      IF NOT GLBuffer.GET(Acnt) THEN BEGIN
        GLBuffer.INIT;
        GLBuffer."Account No." := Acnt;
        IF GLAccount.GET(Acnt) THEN
          GLBuffer."Account Name" := GLAccount.Name
        ELSE
          GLBuffer."Account Name" := UnknownTxt;
        GLBuffer.INSERT;
      END;
      IF Amt > 0 THEN
        GLBuffer."Debit Amount" += Amt
      ELSE
        GLBuffer."Credit Amount" += Amt;
      GLBuffer.MODIFY;
    END;

    LOCAL PROCEDURE GetFixedAssetGLAcc@1020006(Value@1001 : Code[20]) : Code[20];
    VAR
      FADepBook@1020000 : Record 5612;
      DepBook@1020001 : Record 5611;
      FAPostingGroup@1020002 : Record 5606;
    BEGIN
      FADepBook.RESET;
      FADepBook.SETRANGE("FA No.", Value);
      FADepBook.SETFILTER("Depreciation Book Code",'<>%1','');
      FADepBook.SETFILTER("FA Posting Group",'<>%1','');
      IF FADepBook.FINDSET THEN
        REPEAT
          DepBook.GET(FADepBook."Depreciation Book Code");
          IF (("Purchase Line"."FA Posting Type" = "Purchase Line"."FA Posting Type"::"Acquisition Cost") AND
              DepBook."G/L Integration - Acq. Cost") OR
             (("Purchase Line"."FA Posting Type" = "Purchase Line"."FA Posting Type"::Maintenance) AND
              DepBook."G/L Integration - Maintenance")
          THEN BEGIN
            FAPostingGroup.GET(FADepBook."FA Posting Group");
            IF "Purchase Line"."FA Posting Type" = "Purchase Line"."FA Posting Type"::"Acquisition Cost" THEN
              EXIT(FAPostingGroup."Acquisition Cost Account")
            ELSE
              EXIT(FAPostingGroup."Maintenance Expense Account");
            EXIT('');
          END;
        UNTIL FADepBook.NEXT = 0;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000000();
    VAR
      ForNAVSetup@1000000001 : Record 70000;
      OutStream@1000000000 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Integer);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'PurchaseLine': WITH "Purchase Line" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Amt. Rcd. Not Invoiced (LCY)");
              END;
           'Restore': BEGIN
                 "Amt. Rcd. Not Invoiced (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70210 ForNAV Customer Payments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Debitor Betalinger;
               DEU=Debitor Zahlungen;
               ENU=Customer Payments;
               ESP=Cliente Pagos;
               FIN=Asiakas Maksut;
               FRA=Client Paiements;
               ISL=Vi–skiptama–ur Grei–slur;
               ITA=Cliente Pagamenti;
               NLD=Klant Betalingen;
               NOR=Kunde Betalinger;
               SVE=Kundbetalningar];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  SalespersonFilterString := CustLedgerEntry.GETFILTER("Salesperson Code");
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 8503;    ;DataItem;CustLedgerEntry     ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Document Type,Posting Date)
                                 WHERE(Document Type=FILTER(Payment|Credit Memo));
               OnPreDataItem=BEGIN
                               SETRANGE("Salesperson Code");
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Amount (LCY)");
                                  GetAppliedCustEntries(CustLedgerEntry,TRUE);
                                END;

               ReqFilterFields=Posting Date,Global Dimension 1 Code,Global Dimension 2 Code,Salesperson Code,Customer No.;
               CalcFields=Remaining Amt. (LCY),Amount (LCY) }

    { 1000000000;1;DataItem;TempAppliedCustLedgEntry;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Entry No.);
               OnPreDataItem=BEGIN
                               SETFILTER("Salesperson Code", SalespersonFilterString);
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Remaining Amt. (LCY)", "Amount (LCY)");
                                END;

               CalcFields=Original Amt. (LCY),Amount (LCY);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SalespersonFilterString@1480002 : Text;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE GetAppliedCustEntries@1020000(CustLedgEntry@1020001 : Record 21;UseLCY@1480000 : Boolean);
    VAR
      DtldCustLedgEntry@1020003 : Record 379;
      PmtDtldCustLedgEntry@1020004 : Record 379;
      PmtCustLedgEntry@1020015 : Record 21;
      ClosingCustLedgEntry@1020002 : Record 21;
      AmountToApply@1020005 : Decimal;
      AppliedDtldCustLedgEntry@1000000001 : Record 379;
    BEGIN
      TempAppliedCustLedgEntry.RESET;
      TempAppliedCustLedgEntry.DELETEALL;
      DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
      DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
      DtldCustLedgEntry.SETRANGE(Unapplied,FALSE);
      IF DtldCustLedgEntry.FIND('-') THEN
        REPEAT
          IF DtldCustLedgEntry."Cust. Ledger Entry No." = DtldCustLedgEntry."Applied Cust. Ledger Entry No." THEN BEGIN
            AppliedDtldCustLedgEntry.INIT;
            AppliedDtldCustLedgEntry.SETCURRENTKEY("Applied Cust. Ledger Entry No.","Entry Type");
            AppliedDtldCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",DtldCustLedgEntry."Applied Cust. Ledger Entry No.");
            AppliedDtldCustLedgEntry.SETRANGE("Entry Type",AppliedDtldCustLedgEntry."Entry Type"::Application);
            AppliedDtldCustLedgEntry.SETRANGE(Unapplied,FALSE);
            IF AppliedDtldCustLedgEntry.FIND('-') THEN
              REPEAT
                IF AppliedDtldCustLedgEntry."Cust. Ledger Entry No." <> AppliedDtldCustLedgEntry."Applied Cust. Ledger Entry No."
                THEN BEGIN
                  IF ClosingCustLedgEntry.GET(AppliedDtldCustLedgEntry."Cust. Ledger Entry No.") THEN BEGIN
                    TempAppliedCustLedgEntry := ClosingCustLedgEntry;
                    IF UseLCY THEN
                      TempAppliedCustLedgEntry."Amount to Apply" := -AppliedDtldCustLedgEntry."Amount (LCY)"
                    ELSE
                      TempAppliedCustLedgEntry."Amount to Apply" := -AppliedDtldCustLedgEntry.Amount;
                    IF TempAppliedCustLedgEntry.INSERT THEN ;
                  END;
                END;
              UNTIL AppliedDtldCustLedgEntry.NEXT = 0;
          END ELSE BEGIN
            IF ClosingCustLedgEntry.GET(DtldCustLedgEntry."Applied Cust. Ledger Entry No.") THEN BEGIN
              TempAppliedCustLedgEntry := ClosingCustLedgEntry;
              IF UseLCY THEN
                TempAppliedCustLedgEntry."Amount to Apply" := DtldCustLedgEntry."Amount (LCY)"
              ELSE
                TempAppliedCustLedgEntry."Amount to Apply" := DtldCustLedgEntry.Amount;
              IF TempAppliedCustLedgEntry.INSERT THEN ;
            END;
          END;
        UNTIL DtldCustLedgEntry.NEXT = 0;
      IF CustLedgEntry."Closed by Entry No." <> 0 THEN BEGIN
        IF ClosingCustLedgEntry.GET(CustLedgEntry."Closed by Entry No.") THEN BEGIN
          TempAppliedCustLedgEntry := ClosingCustLedgEntry;
          IF UseLCY THEN
            TempAppliedCustLedgEntry."Amount to Apply" := -CustLedgEntry."Closed by Amount (LCY)"
          ELSE
            TempAppliedCustLedgEntry."Amount to Apply" := -CustLedgEntry."Closed by Amount";
          IF TempAppliedCustLedgEntry.INSERT THEN ;
        END;
      END;
      ClosingCustLedgEntry.RESET;
      ClosingCustLedgEntry.SETCURRENTKEY("Closed by Entry No.");
      ClosingCustLedgEntry.SETRANGE("Closed by Entry No.",CustLedgEntry."Entry No.");
      IF ClosingCustLedgEntry.FIND('-') THEN
        REPEAT
          TempAppliedCustLedgEntry := ClosingCustLedgEntry;
          IF UseLCY THEN
            TempAppliedCustLedgEntry."Amount to Apply" := ClosingCustLedgEntry."Closed by Amount (LCY)"
          ELSE
            TempAppliedCustLedgEntry."Amount to Apply" := ClosingCustLedgEntry."Closed by Amount";
          IF TempAppliedCustLedgEntry.INSERT THEN ;
        UNTIL ClosingCustLedgEntry.NEXT = 0;
      IF TempAppliedCustLedgEntry.ISEMPTY THEN BEGIN
        TempAppliedCustLedgEntry.INIT;
        TempAppliedCustLedgEntry."Entry No." := 0;
        TempAppliedCustLedgEntry."Salesperson Code" := CustLedgEntry."Salesperson Code";
        TempAppliedCustLedgEntry.INSERT;
      //  ApplicationExist := FALSE;
      END;
      // ELSE
      //  ApplicationExist := TRUE;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', CustLedgerEntry);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'CustLedgerEntry': WITH CustLedgerEntry DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Amount (LCY)");
                ReportForNav.AddTotal(DataItemId,1,"Remaining Amt. (LCY)");
              END;
           'Restore': BEGIN
                 "Amount (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Remaining Amt. (LCY)" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
+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
3yQXYj0PF/PfxPrP/w8=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70211 ForNAV Vendor Payments
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kreditor Betalinger;
               DEU=Zahlungen (Kreditor);
               ENU=Vendor Payments;
               ESP=Pagos (proveedor);
               FIN=Maksut (Toimittajan);
               FRA=Paiements (fournisseur);
               ISL=Grei–slur (l†nardrottins);
               ITA=Pagamenti (fornitore);
               NLD=Leveranciersbetalingen;
               NOR=Betalinger (Leverandõr);
               SVE=Leverantîrsbetalningar];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  Args.INSERT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Args                ;
               DataItemTable=Table70211;
               DataItemTableView=SORTING(Consider Discount);
               OnAfterGetRecord=BEGIN
                                  IF Args."Payment Date" = 0D THEN
                                    Args."Payment Date" := WORKDATE;
                                  IF "Consider Discount" AND (Args."Payment Discount Date" < Args."Payment Date") THEN
                                    Args."Payment Discount Date" := Args."Payment Date";
                                END;

               Temporary=Yes }

    { 3182;1   ;DataItem;                    ;
               DataItemTable=Table23;
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               IF (Args."Due Date Filter" = 0D)  THEN
                                 Args.TESTFIELD("Consider Discount");

                               IF NOT Args."Consider Discount" THEN
                                 Args.TESTFIELD("Due Date Filter");
                             END;

               ReqFilterFields=No.,Vendor Posting Group,Purchaser Code,Priority,Payment Method Code }

    { 4114;2   ;DataItem;                    ;
               DataItemTable=Table25;
               DataItemTableView=SORTING(Vendor No.,Open,Positive,Due Date,Currency Code)
                                 WHERE(Open=CONST(Yes),
                                       On Hold=CONST());
               OnPreDataItem=BEGIN
                               FILTERGROUP(-1);
                               SETRANGE("Pmt. Discount Date",Args."Payment Date", Args."Payment Discount Date");
                               SETRANGE("Due Date",0D,Args."Due Date Filter");
                               FILTERGROUP(0);
                               SETCURRENTKEY("Original Pmt. Disc. Possible");
                             END;

               OnAfterGetRecord=BEGIN
                                  IF "Original Pmt. Disc. Possible" < 0 THEN
                                    SETRANGE("Date Filter",Args."Payment Date", Args."Payment Discount Date");
                                  CalcAmounts("Vendor Ledger Entry");
                                END;

               CalcFields=Amount,Remaining Amount,Remaining Amt. (LCY),Amount (LCY);
               DataItemLink=Vendor No.=FIELD(No.),
                            Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Code=FIELD(Global Dimension 2 Filter) }

    { 51  ;3   ;Column  ;DiscountToTake      ;
               IncludeCaption=No;
               SourceExpr=DiscountToTake }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF (Args."Due Date Filter" = 0D) AND (NOT Args."Consider Discount") THEN
                     Args."Consider Discount" := TRUE;
                 END;

      OnClosePage=BEGIN
                    IF NOT Args."Consider Discount" THEN
                      Args."Payment Discount Date" := 0D
                    ELSE
                      IF Args."Payment Discount Date" < Args."Payment Date" THEN
                        Args."Payment Discount Date" := Args."Payment Date";
                  END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  Name=PaymentDate;
                  CaptionML=[DAN=Betalingsdato;
                             DEU=Zahlungsdatum;
                             ENU=Payment Date;
                             ESP=Fecha de pago;
                             FIN=Maksupvm;
                             FRA=Date de paiement;
                             ISL=Grei–sludagur;
                             ITA=Data pagamento;
                             NLD=Betaaldatum;
                             NOR=Betalingsdato;
                             SVE=Betalningsdatum];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Payment Date" }

      { 4   ;2   ;Field     ;
                  Name=DueDateFilter;
                  CaptionML=[DAN=Forfaldsdatofilter;
                             DEU=FÑlligkeitsdatumsfilter;
                             ENU=Due Date Filter;
                             ESP=Filtro fecha vto.;
                             FIN=ErÑpÑivÑsuodatus;
                             FRA=Filtre ÇchÇance;
                             ISL=Gjalddagaafmîrkun;
                             ITA=Filtro data scadenza;
                             NLD=Vervaldatumfilter;
                             NOR=Filter for forfallsdato;
                             SVE=Fîrfallodatumfilter];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Due Date Filter" }

      { 6   ;2   ;Field     ;
                  Name=TakePaymentDiscounts;
                  CaptionML=[DAN=Regn med kontant rabat;
                             DEU=Skonto berÅcksichtigen;
                             ENU=Consider Discount;
                             ESP=Considerar descuento;
                             FIN=Harkitse alennusta;
                             FRA=Envisager remise;
                             ISL=‰huga afsl†tt;
                             ITA=Valuta sconto;
                             NLD=Korting in aanmerking nemen;
                             NOR=Vurder rabatt;
                             SVE=Beakta rabatt];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Consider Discount" }

      { 8   ;2   ;Field     ;
                  Name=LastDiscDateToTake;
                  CaptionML=[DAN=Kontantrabatdato;
                             DEU=Skontodatum;
                             ENU=Payment Discount Date;
                             ESP=Fecha descuento pago;
                             FIN=Maksualennuksen pÑivÑmÑÑrÑ;
                             FRA=Date d'escompte;
                             ISL=Dags. grei–sluafsl†ttar;
                             ITA=Data sconto pagamento;
                             NLD=Kortingsvervaldatum betaling;
                             NOR=Kontantrabattdato;
                             SVE=Kassarabattdatum];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Payment Discount Date" }

      { 10  ;2   ;Field     ;
                  Name=UseLocalCurrency;
                  CaptionML=[DAN=Udskriv belõb i RV;
                             DEU=BetrÑge in MW drucken;
                             ENU=Print Amounts in LCY;
                             ESP=Imprimir importes en DL;
                             FIN=Tulosta summat PVA;
                             FRA=Imprimer montants DS;
                             ISL=Prenta upphë–ir ° SGM;
                             ITA=Stampa importi in VL;
                             NLD=Bedragen in LV afdrukken;
                             NOR=Skriv ut belõp i NOK;
                             SVE=Skriv ut belopp i BVA];
                  ApplicationArea=#Suite;
                  SourceExpr=Args."Print Amounts in LCY" }

      { 1   ;2   ;Field     ;
                  Name=UseExternalDocumentNo;
                  CaptionML=[DAN=Eksternt bilagsnr.;
                             DEU=Externe Belegnummer;
                             ENU=External Document No.;
                             ESP=Nß documento externo;
                             FIN=Ulkoisen asiakirjan nro;
                             FRA=N¯ doc. externe;
                             ISL=N£mer utana–k. skjals;
                             ITA=Nr. documento esterno;
                             NLD=Extern documentnr.;
                             NOR=Eksterndokumentnr.;
                             SVE=Externt dokumentnr];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."External Document No." }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      DiscountToTake@1012 : Decimal;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    PROCEDURE CalcAmounts@1(VendorLedgerEntry@1000 : Record 25);
    VAR
      DiscountToTakeLCY@1007 : Decimal;
      Currency@1003 : Record 4;
      CurrExchRate@1002 : Record 330;
    BEGIN
      VendorLedgerEntry.SETRANGE("Date Filter",0D,Args."Due Date Filter");
      VendorLedgerEntry.CALCFIELDS(Amount,"Remaining Amount","Remaining Amt. (LCY)");
      IF (VendorLedgerEntry."Original Pmt. Disc. Possible" < 0) AND (VendorLedgerEntry."Pmt. Discount Date" >= Args."Payment Date") THEN
        DiscountToTake := -VendorLedgerEntry."Original Pmt. Disc. Possible"
      ELSE
        DiscountToTake := 0;
      IF (Vendor."Currency Code" <> '')  THEN BEGIN
        IF VendorLedgerEntry."Remaining Amount" <> 0 THEN
          DiscountToTakeLCY := DiscountToTake * VendorLedgerEntry."Remaining Amt. (LCY)" / VendorLedgerEntry."Remaining Amount"
        ELSE
          DiscountToTakeLCY := 0;
        IF Args."Print Amounts in LCY" THEN BEGIN
          IF VendorLedgerEntry."Currency Code" <> Vendor."Currency Code" THEN
            DiscountToTake :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToFCY(
                  Args."Payment Date",
                  VendorLedgerEntry."Currency Code",
                  Vendor."Currency Code",
                  DiscountToTake),
                Currency."Amount Rounding Precision");
        END ELSE
          DiscountToTake := DiscountToTakeLCY;
      END;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000000();
    VAR
      ForNAVSetup@1000000001 : Record 70000;
      OutStream@1000000000 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Vendor': WITH Vendor DO CASE ForNavOperation OF
        END;  'VendorLedgerEntry': WITH "Vendor Ledger Entry" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Remaining Amount");
                ReportForNav.AddTotal(DataItemId,1,Amount);
                ReportForNav.AddTotal(DataItemId,2,"Remaining Amt. (LCY)");
                ReportForNav.AddTotal(DataItemId,3,"Amount (LCY)");
              END;
           'Restore': BEGIN
                 "Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 Amount := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Remaining Amt. (LCY)" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Amount (LCY)" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
+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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70215 ForNAV Salesperson-Commission
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Salgsprovision;
               DEU=VerkÑufer - Provision;
               ENU=Salesperson Commission;
               ESP=Comisi¢n de vendedor;
               FIN=MyyjÑn provisio;
               FRA=Commission vendeurs;
               ISL=Sîlumenn - Sîlulaun;
               ITA=Commissioni agente;
               NLD=Verkoper - Provisie;
               NOR=Selgerprovisjon;
               SVE=SÑljarprovision;
               ESN=Vendedor: comisi¢n];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Args              ;
               DataItemTable=Table70215;
               DataItemTableView=SORTING(New Page per Person);
               OnPreDataItem=BEGIN
                               INSERT;
                             END;

               Temporary=Yes }

    { 3065;    ;DataItem;SalespersonPurchaser;
               DataItemTable=Table13;
               DataItemTableView=SORTING(Code);
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               ReportForNav.GetDataItem('SalespersonPurchaser').NewPagePerRecord := Args."New Page per Person";
                             END;

               ReqFilterFields=Code }

    { 8503;1   ;DataItem;CustLedgerEntry     ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Salesperson Code,Posting Date)
                                 WHERE(Document Type=FILTER(Invoice|Credit Memo));
               OnAfterGetRecord=VAR
                                  CostCalcMgt@1000 : Codeunit 5836;
                                BEGIN
                                END;

               ReqFilterFields=Posting Date;
               DataItemLink=Salesperson Code=FIELD(Code) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1000000000;2;Field  ;
                  Name=NewPagePerPerson;
                  CaptionML=[DAN=Skift side pr. sëlger;
                             DEU=Neue Seite pro VerkÑufer;
                             ENU=New Page per Person;
                             ESP=Nueva p†gina por persona;
                             FIN=Uusi sivu per henkilî;
                             FRA=Nouvelle page par personne;
                             ISL=NÏ s°–a † mann;
                             ITA=Nuova pagina per persona;
                             NLD=Nieuwe pagina per persoon;
                             NOR=Ny side per person;
                             SVE=Ny sida per person];
                  SourceExpr=Args."New Page per Person" }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'SalespersonPurchaser': WITH SalespersonPurchaser DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,CustLedgerEntry."Sales (LCY)");
                ReportForNav.AddTotal(DataItemId,1,CustLedgerEntry."Profit (LCY)");
              END;
           'Restore': BEGIN
                 CustLedgerEntry."Sales (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 CustLedgerEntry."Profit (LCY)" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'CustLedgerEntry': WITH CustLedgerEntry DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Sales (LCY)");
                ReportForNav.AddTotal(DataItemId,1,"Profit (LCY)");
                ReportForNav.AddTotal(DataItemId,2,"Sales (LCY)");
                ReportForNav.AddTotal(DataItemId,3,"Profit (LCY)");
              END;
           'Restore': BEGIN
                 "Sales (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Profit (LCY)" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Sales (LCY)" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Profit (LCY)" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
2fA/TPzh/wA=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70220 ForNAV Aged Accounts Receivbl.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Aldersfordelte tilgodehavender;
               DEU=Debitor - SaldenrÅckblick;
               ENU=Aged Accounts Receivables;
               ESP=Cuentas por cobrar envejecidas;
               FIN=Myyntisaatavien tilanne;
               FRA=ComptabilitÇ client ÉgÇe;
               ISL=Aldursgreindar krîfur;
               ITA=Scadenziario clienti;
               NLD=Vervallen vorderingen;
               NOR=Aldersford. saldoliste - kunde;
               SVE=Kundfordringar - Ülder;
               ESN=AntigÅedad cobros];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=VAR
                  CaptionManagement@1000 : Codeunit 42;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000001;;DataItem;Args              ;
               DataItemTable=Table70219;
               DataItemTableView=SORTING(Print Amounts in LCY);
               OnPreDataItem=BEGIN
                               Args.INSERT;
                               Args.CalcDates;
                             END;

               Temporary=Yes }

    { 6836;1   ;DataItem;Account             ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  AgingCalculation.GetAgingWithCurrency(Account, AgingBuffer, CurrencyTotalsBuffer, Args, TempCurrency);
                                  IF AgingBuffer.ISEMPTY THEN
                                    CurrReport.SKIP;
                                END;

               ReqFilterFields=No. }

    { 70220;2  ;DataItem;AgingBuffer         ;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Currency Code);
               Temporary=Yes }

    { 1000000000;1;DataItem;CurrencyTotalsBuffer;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Currency Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   InitRequestPage;
                 END;

    }
    CONTROLS
    {
      { 4   ;0   ;Container ;
                  ContainerType=ContentArea }

      { 2   ;1   ;Group     ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  Name=AgedAsOf;
                  CaptionML=[DAN=Slutdato;
                             DEU=Enddatum;
                             ENU=Ending Date;
                             ESP=Fecha final;
                             FIN=Lopetuspvm;
                             FRA=Date fin;
                             ISL=Lokadagsetning;
                             ITA=Data fine;
                             NLD=Einddatum;
                             NOR=Sluttdato;
                             SVE=Slutdatum];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Ending Date" }

      { 3   ;2   ;Field     ;
                  Name=Agingby;
                  CaptionML=[DAN=Aldersfordelt efter;
                             DEU=RÅckblick nach;
                             ENU=Aging by;
                             ESP=AntigÅedad por;
                             FIN=Tilanne per;
                             FRA=AgÇe par;
                             ISL=Aldursgreining eftir;
                             ITA=Scadenziario per;
                             NLD=Vervallen per;
                             NOR=Aldersfordeling pÜ basis av;
                             SVE=èlder per];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Aging By" }

      { 7   ;2   ;Field     ;
                  Name=PeriodLength;
                  CaptionML=[DAN=Periodelëngde;
                             DEU=PeriodenlÑnge;
                             ENU=Period Length;
                             ESP=Longitud periodo;
                             FIN=Jakson pituus;
                             FRA=Base pÇriode;
                             ISL=Lengd t°mabils;
                             ITA=Durata periodo;
                             NLD=Periodelengte;
                             NOR=Periodelengde;
                             SVE=PeriodlÑngd];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Period Length" }

      { 9   ;2   ;Field     ;
                  Name=AmountsinLCY;
                  CaptionML=[DAN=Alle belõb i RV;
                             DEU=Alle BetrÑge in MW;
                             ENU=All Amounts in LCY;
                             ESP=Todas las cantidades en LCY;
                             FIN=Kaikki summat PVA;
                             FRA=Tous les montants DS;
                             ISL=Allar upphë–ir ° SGM;
                             ITA=Tutti gli importi in VL;
                             NLD=Alle bedragen in LV;
                             NOR=Alle belõp i NOK;
                             SVE=Alla belopp i BVA];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print Amounts in LCY" }

      { 11  ;2   ;Field     ;
                  Name=PrintDetails;
                  CaptionML=[DAN=Udskriv detaljer;
                             DEU=Details drucken;
                             ENU=Print Details;
                             ESP=Imprimir detalles;
                             FIN=Tulosta yksityiskohdat;
                             FRA=Imprimer dÇtails;
                             ISL=Prenta sundurli–un;
                             ITA=Stampa dettagli;
                             NLD=Details afdrukken;
                             NOR=Skriv ut spesifikasjoner;
                             SVE=Skriv ut detaljer];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print Details" }

      { 15  ;2   ;Field     ;
                  Name=HeadingType;
                  CaptionML=[DAN=Overskriftstype;
                             DEU=öberschriftsart;
                             ENU=Heading Type;
                             ESP=Tipo cabecera;
                             FIN=Otsikon tyyppi;
                             FRA=Type titre;
                             ISL=Tegund yfirskriftar;
                             ITA=Tipo testata;
                             NLD=Type kop;
                             NOR=Overskriftstype;
                             SVE=Rubriktyp];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Heading Type";
                  Visible=FALSE }

      { 13  ;2   ;Field     ;
                  Name=perCustomer;
                  CaptionML=[DAN=Skift side pr. debitor;
                             DEU=Neue Seite pro Debitor;
                             ENU=New Page per Customer;
                             ESP=P†gina nueva por cliente;
                             FIN=Uusi sivu asiakasta kohti;
                             FRA=Nouvelle page par client;
                             ISL=NÏ bla–s°–a † hvern vi–skiptamann;
                             ITA=Nuova pagina per cliente;
                             NLD=Nieuwe pagina per klant;
                             NOR=Sideskift per kunde;
                             SVE=Ny sida per kund];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."New Page Per Customer" }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
    { 747 ;AgedOverdueAmounts  ;CaptionML=ENU=Aged Overdue Amounts }
    { 742 ;AmnsInLCY           ;CaptionML=ENU=All Amounts in LCY. }
  }
  CODE
  {
    VAR
      TempCurrency@1000000001 : TEMPORARY Record 4;
      AgingCalculation@1000000007 : Codeunit 70219;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPostSectionAccountsReceivblBuffer_ColumnsHeading@5010(VAR AccountsReceivblBuffer@1000000000 : Record 70220);
    BEGIN
      WITH AccountsReceivblBuffer DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    LOCAL PROCEDURE InitRequestPage@1000000001();
    VAR
      Blank@1000000000 : DateFormula;
    BEGIN
      WITH Args DO BEGIN
        IF "Ending Date" = 0D THEN
          "Ending Date" := WORKDATE;
        "Column Count" := 5;
        IF "Period Length" = Blank THEN
          EVALUATE("Period Length", '<1M>');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'AgingBuffer': WITH AgingBuffer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount (LCY)");
                ReportForNav.AddTotal(DataItemId,2,Balance);
                ReportForNav.AddTotal(DataItemId,3,"Balance (LCY)");
                ReportForNav.AddTotal(DataItemId,4,"Amount 1");
                ReportForNav.AddTotal(DataItemId,5,"Amount 1 (LCY)");
                ReportForNav.AddTotal(DataItemId,6,"Amount 2");
                ReportForNav.AddTotal(DataItemId,7,"Amount 2 (LCY)");
                ReportForNav.AddTotal(DataItemId,8,"Amount 3");
                ReportForNav.AddTotal(DataItemId,9,"Amount 3 (LCY)");
                ReportForNav.AddTotal(DataItemId,10,"Amount 4");
                ReportForNav.AddTotal(DataItemId,11,"Amount 4 (LCY)");
                ReportForNav.AddTotal(DataItemId,12,"Amount 5");
                ReportForNav.AddTotal(DataItemId,13,"Amount 5 (LCY)");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount (LCY)" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 Balance := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Balance (LCY)" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Amount 1" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "Amount 1 (LCY)" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "Amount 2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
                 "Amount 2 (LCY)" := ReportForNav.RestoreTotal(DataItemId,7,GroupTotalFieldNo);
                 "Amount 3" := ReportForNav.RestoreTotal(DataItemId,8,GroupTotalFieldNo);
                 "Amount 3 (LCY)" := ReportForNav.RestoreTotal(DataItemId,9,GroupTotalFieldNo);
                 "Amount 4" := ReportForNav.RestoreTotal(DataItemId,10,GroupTotalFieldNo);
                 "Amount 4 (LCY)" := ReportForNav.RestoreTotal(DataItemId,11,GroupTotalFieldNo);
                 "Amount 5" := ReportForNav.RestoreTotal(DataItemId,12,GroupTotalFieldNo);
                 "Amount 5 (LCY)" := ReportForNav.RestoreTotal(DataItemId,13,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70221 ForNAV Aged Accounts Payables
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Aldersfordelte tilgodehavender;
               DEU=Debitor - SaldenrÅckblick;
               ENU=Aged Accounts Payables;
               ESP=Cuentas por pagar envejecidas;
               FIN=Myyntisaatavien tilanne;
               FRA=ComptabilitÇ client ÉgÇe;
               ISL=Aldursgreindar krîfur;
               ITA=Scadenziario clienti;
               NLD=Vervallen betalingen;
               NOR=Aldersford. saldoliste - kunde;
               SVE=Kundfordringar - Ülder;
               ESN=AntigÅedad cobros];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=VAR
                  CaptionManagement@1000 : Codeunit 42;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000001;;DataItem;Args              ;
               DataItemTable=Table70219;
               DataItemTableView=SORTING(Print Amounts in LCY);
               OnPreDataItem=BEGIN
                               Args.INSERT;
                               Args.CalcDates;
                             END;

               Temporary=Yes }

    { 6836;1   ;DataItem;Account             ;
               DataItemTable=Table23;
               OnAfterGetRecord=BEGIN
                                  AgingCalculation.GetAgingWithCurrency(Account, AgingBuffer, CurrencyTotalsBuffer, Args, TempCurrency);
                                  IF AgingBuffer.ISEMPTY THEN
                                    CurrReport.SKIP;
                                END;

               ReqFilterFields=No. }

    { 70220;2  ;DataItem;AgingBuffer         ;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Currency Code);
               Temporary=Yes }

    { 1000000000;1;DataItem;CurrencyTotalsBuffer;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Currency Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   InitRequestPage;
                 END;

    }
    CONTROLS
    {
      { 1000000009;0;Container;
                  ContainerType=ContentArea }

      { 1000000008;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1000000007;2;Field  ;
                  Name=AgedAsOf;
                  CaptionML=[DAN=Slutdato;
                             DEU=Enddatum;
                             ENU=Ending Date;
                             ESP=Fecha final;
                             FIN=Lopetuspvm;
                             FRA=Date fin;
                             ISL=Lokadagsetning;
                             ITA=Data fine;
                             NLD=Einddatum;
                             NOR=Sluttdato;
                             SVE=Slutdatum];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Ending Date" }

      { 1000000006;2;Field  ;
                  Name=Agingby;
                  CaptionML=[DAN=Aldersfordelt efter;
                             DEU=RÅckblick nach;
                             ENU=Aging by;
                             ESP=AntigÅedad por;
                             FIN=Tilanne per;
                             FRA=AgÇe par;
                             ISL=Aldursgreining eftir;
                             ITA=Scadenziario per;
                             NLD=Vervallen per;
                             NOR=Aldersfordeling pÜ basis av;
                             SVE=èlder per];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Aging By" }

      { 1000000005;2;Field  ;
                  Name=PeriodLength;
                  CaptionML=[DAN=Periodelëngde;
                             DEU=PeriodenlÑnge;
                             ENU=Period Length;
                             ESP=Longitud periodo;
                             FIN=Jakson pituus;
                             FRA=Base pÇriode;
                             ISL=Lengd t°mabils;
                             ITA=Durata periodo;
                             NLD=Periodelengte;
                             NOR=Periodelengde;
                             SVE=PeriodlÑngd];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Period Length" }

      { 1000000004;2;Field  ;
                  Name=AmountsinLCY;
                  CaptionML=[DAN=Alle belõb i RV;
                             DEU=Alle BetrÑge in MW;
                             ENU=All Amounts in LCY;
                             ESP=Todas las cantidades en LCY;
                             FIN=Kaikki summat PVA;
                             FRA=Tous les montants DS;
                             ISL=Allar upphë–ir ° SGM;
                             ITA=Tutti gli importi in VL;
                             NLD=Alle bedragen in LV;
                             NOR=Alle belõp i NOK;
                             SVE=Alla belopp i BVA];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print Amounts in LCY" }

      { 1000000003;2;Field  ;
                  Name=PrintDetails;
                  CaptionML=[DAN=Udskriv detaljer;
                             DEU=Details drucken;
                             ENU=Print Details;
                             ESP=Imprimir detalles;
                             FIN=Tulosta yksityiskohdat;
                             FRA=Imprimer dÇtails;
                             ISL=Prenta sundurli–un;
                             ITA=Stampa dettagli;
                             NLD=Details afdrukken;
                             NOR=Skriv ut spesifikasjoner;
                             SVE=Skriv ut detaljer];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print Details" }

      { 1000000002;2;Field  ;
                  Name=HeadingType;
                  CaptionML=[DAN=Overskriftstype;
                             DEU=öberschriftsart;
                             ENU=Heading Type;
                             ESP=Tipo cabecera;
                             FIN=Otsikon tyyppi;
                             FRA=Type titre;
                             ISL=Tegund yfirskriftar;
                             ITA=Tipo testata;
                             NLD=Type kop;
                             NOR=Overskriftstype;
                             SVE=Rubriktyp];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Heading Type";
                  Visible=FALSE }

      { 1000000001;2;Field  ;
                  Name=perCustomer;
                  CaptionML=[DAN=Skift side pr. debitor;
                             DEU=Neue Seite pro Debitor;
                             ENU=New Page per Customer;
                             ESP=P†gina nueva por cliente;
                             FIN=Uusi sivu asiakasta kohti;
                             FRA=Nouvelle page par client;
                             ISL=NÏ bla–s°–a † hvern vi–skiptamann;
                             ITA=Nuova pagina per cliente;
                             NLD=Nieuwe pagina per klant;
                             NOR=Sideskift per kunde;
                             SVE=Ny sida per kund];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."New Page Per Customer" }

      { 1000000000;2;Field  ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
    { 747 ;AgedOverdueAmounts  ;CaptionML=ENU=Aged Overdue Amounts }
    { 742 ;AmnsInLCY           ;CaptionML=ENU=All Amounts in LCY. }
  }
  CODE
  {
    VAR
      TempCurrency@1000000001 : TEMPORARY Record 4;
      AgingCalculation@1000000007 : Codeunit 70219;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPostSectionAccountsReceivblBuffer_ColumnsHeading@5010(VAR AccountsReceivblBuffer@1000000000 : Record 70220);
    BEGIN
      WITH AccountsReceivblBuffer DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    LOCAL PROCEDURE InitRequestPage@1000000001();
    VAR
      Blank@1000000000 : DateFormula;
    BEGIN
      WITH Args DO BEGIN
        IF "Ending Date" = 0D THEN
          "Ending Date" := WORKDATE;
        "Column Count" := 5;
        IF "Period Length" = Blank THEN
          EVALUATE("Period Length", '<1M>');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'AgingBuffer': WITH AgingBuffer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount (LCY)");
                ReportForNav.AddTotal(DataItemId,2,Balance);
                ReportForNav.AddTotal(DataItemId,3,"Balance (LCY)");
                ReportForNav.AddTotal(DataItemId,4,"Amount 1");
                ReportForNav.AddTotal(DataItemId,5,"Amount 1 (LCY)");
                ReportForNav.AddTotal(DataItemId,6,"Amount 2");
                ReportForNav.AddTotal(DataItemId,7,"Amount 2 (LCY)");
                ReportForNav.AddTotal(DataItemId,8,"Amount 3");
                ReportForNav.AddTotal(DataItemId,9,"Amount 3 (LCY)");
                ReportForNav.AddTotal(DataItemId,10,"Amount 4");
                ReportForNav.AddTotal(DataItemId,11,"Amount 4 (LCY)");
                ReportForNav.AddTotal(DataItemId,12,"Amount 5");
                ReportForNav.AddTotal(DataItemId,13,"Amount 5 (LCY)");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount (LCY)" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 Balance := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Balance (LCY)" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Amount 1" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "Amount 1 (LCY)" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "Amount 2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
                 "Amount 2 (LCY)" := ReportForNav.RestoreTotal(DataItemId,7,GroupTotalFieldNo);
                 "Amount 3" := ReportForNav.RestoreTotal(DataItemId,8,GroupTotalFieldNo);
                 "Amount 3 (LCY)" := ReportForNav.RestoreTotal(DataItemId,9,GroupTotalFieldNo);
                 "Amount 4" := ReportForNav.RestoreTotal(DataItemId,10,GroupTotalFieldNo);
                 "Amount 4 (LCY)" := ReportForNav.RestoreTotal(DataItemId,11,GroupTotalFieldNo);
                 "Amount 5" := ReportForNav.RestoreTotal(DataItemId,12,GroupTotalFieldNo);
                 "Amount 5 (LCY)" := ReportForNav.RestoreTotal(DataItemId,13,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70230 ForNAV Sales Statistics
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Salgsstatistik;
               DEU=Verkaufsstatistik;
               ENU=Sales Statistics;
               ESP=Estad°sticas de ventas;
               FIN=Myyntitilastot;
               FRA=Statistiques de vente;
               ISL=Velta tîlfrë–i;
               ITA=Statistiche di vendita;
               NLD=Verkoopstatistiek;
               NOR=Salgsstatistikk;
               SVE=FîrsÑljningsstatistik];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  IF NOT (Args.Invoices OR Args."Credit Memos") THEN
                    Args.TESTFIELD(Invoices);
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  Args.CreateCurrencies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 4146;    ;DataItem;Args                ;
               DataItemTable=Table70230;
               DataItemTableView=SORTING(Currency Code);
               PrintOnlyIfDetail=Yes;
               Temporary=Yes }

    { 5581;1   ;DataItem;SalesInvoiceHeader  ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF NOT Args.Invoices THEN
                                 CurrReport.BREAK;

                               IF Args."Customer No." THEN
                                 SETCURRENTKEY("Bill-to Customer No.");
                             END;

               ReqFilterFields=Posting Date,Bill-to Customer No.,Salesperson Code,Payment Terms Code;
               CalcFields=Amount,Amount Including VAT;
               DataItemLink=Currency Code=FIELD(Currency Code) }

    { 1000000021;2;Column;AmountLCY          ;
               IncludeCaption=No;
               SourceExpr=Args.GetInvoiceAmountLCY(SalesInvoiceHeader) }

    { 1000000010;2;Column;CostLCY            ;
               IncludeCaption=No;
               SourceExpr=Args.GetInvoiceCostLCY(SalesInvoiceHeader) }

    { 8098;1   ;DataItem;SalesCrMemoHeader   ;
               DataItemTable=Table114;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF Args."Credit Memos" THEN BEGIN
                                 SalesInvoiceHeader.COPYFILTER("Posting Date","Posting Date");
                                 SalesInvoiceHeader.COPYFILTER("Bill-to Customer No.","Bill-to Customer No.");
                                 SalesInvoiceHeader.COPYFILTER("Salesperson Code","Salesperson Code");
                                 SalesInvoiceHeader.COPYFILTER("Payment Terms Code","Payment Terms Code");
                                 SalesInvoiceHeader.COPYFILTER("Shortcut Dimension 1 Code","Shortcut Dimension 1 Code");
                                 SalesInvoiceHeader.COPYFILTER("Shortcut Dimension 2 Code","Shortcut Dimension 2 Code");
                                 SalesInvoiceHeader.COPYFILTER("Sell-to Customer No.","Sell-to Customer No.");
                                 SalesInvoiceHeader.COPYFILTER("Location Code","Location Code");
                                 SalesInvoiceHeader.COPYFILTER("Tax Area Code","Tax Area Code");
                                 SalesInvoiceHeader.COPYFILTER("Responsibility Center","Responsibility Center");
                               END ELSE
                                 CurrReport.BREAK;

                               IF Args."Customer No." THEN
                                 SETCURRENTKEY("Bill-to Customer No.");
                             END;

               CalcFields=Amount,Amount Including VAT;
               DataItemLink=Currency Code=FIELD(Currency Code) }

    { 1000000022;2;Column;AmountLCY_CrMemo   ;
               IncludeCaption=No;
               SourceExpr=Args.GetCreditMemoAmountLCY(SalesCrMemoHeader) }

    { 1000000015;2;Column;CostLCY_CrMemo     ;
               IncludeCaption=No;
               SourceExpr=Args.GetCreditMemoCostLCY(SalesCrMemoHeader) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF NOT Args.Invoices AND NOT Args."Credit Memos" THEN BEGIN
                     Args.Invoices := TRUE;
                     Args."Credit Memos" := TRUE;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1000000002;2;Group  ;
                  Name=Show;
                  CaptionML=[DAN=Vis;
                             DEU=Anzeigen;
                             ENU=Show;
                             ESP=Mostrar;
                             FIN=NÑytÑ;
                             FRA=Afficher;
                             ISL=SÏna;
                             ITA=Mostra;
                             NLD=Weergeven;
                             NOR=Vis;
                             SVE=Show];
                  GroupType=Group }

      { 2   ;3   ;Field     ;
                  Name=Invoices;
                  CaptionML=[DAN=Fakturaer;
                             DEU=Rechnungen;
                             ENU=Invoices;
                             ESP=Facturas;
                             FIN=Laskut;
                             FRA=Factures;
                             ISL=Reikningar;
                             ITA=Fatture;
                             NLD=Facturen;
                             NOR=Fakturaer;
                             SVE=Fakturor];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args.Invoices }

      { 4   ;3   ;Field     ;
                  Name=CreditMemos;
                  CaptionML=[DAN=Kreditnotaer;
                             DEU=Gutschriften;
                             ENU=Credit Memos;
                             ESP=Abonos;
                             FIN=Hyvityslaskujen;
                             FRA=Avoirs;
                             ISL=Kreditreikninga;
                             ITA=Note credito;
                             NLD=Creditnota's;
                             NOR=Kreditnotaer;
                             SVE=Kreditnota];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Credit Memos" }

      { 1000000001;2;Group  ;
                  Name=GroupBy;
                  CaptionML=[DAN=Grupper efter;
                             DEU=Gruppieren nach;
                             ENU=Group By;
                             ESP=Agrupar por;
                             FIN=Ryhmittelyperuste;
                             FRA=Regrouper par;
                             ISL=Flokka eftir;
                             ITA=Raggruppa per;
                             NLD=Groeperen op;
                             NOR=Grupper etter;
                             SVE=Grupp av];
                  GroupType=Group }

      { 1000000000;3;Field  ;
                  Name=CustomerNo;
                  CaptionML=[DAN=Debitornr.;
                             DEU=Debitorennr.;
                             ENU=Customer No.;
                             ESP=Nß cliente;
                             FIN=Asiakasnro;
                             FRA=N¯ client;
                             ISL=N£mer vi–skiptamanns;
                             ITA=Nr. cliente;
                             NLD=Klantnr.;
                             NOR=Kundenr.;
                             SVE=Kundnr];
                  SourceExpr=Args."Customer No." }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000001();
    VAR
      ForNAVSetup@1000000001 : Record 70000;
      OutStream@1000000000 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Args': WITH Args DO CASE ForNavOperation OF
        END;  'SalesInvoiceHeader': WITH SalesInvoiceHeader DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'SalesCrMemoHeader': WITH SalesCrMemoHeader DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70235 ForNAV Purchase Statistics
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kõbsstatistik;
               DEU=Kaufstatistik;
               ENU=Purchase Statistics;
               ESP=Estad°sticas de compra;
               FIN=Ostotilastot;
               FRA=Statistiques d'achat;
               ISL=Innkaupasta–lar;
               ITA=Statistiche di acquisto;
               NLD=Inkoopstatistiek;
               NOR=Kjõpsstatistikk;
               SVE=Kîpstatistik];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  IF NOT (Args.Invoices OR Args."Credit Memos") THEN
                    Args.TESTFIELD(Invoices);
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  Args.CreateCurrencies;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 4146;    ;DataItem;Args                ;
               DataItemTable=Table70230;
               DataItemTableView=SORTING(Currency Code);
               PrintOnlyIfDetail=Yes;
               Temporary=Yes }

    { 5581;1   ;DataItem;PurchInvoiceHeader  ;
               DataItemTable=Table122;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF NOT Args.Invoices THEN
                                 CurrReport.BREAK;

                               IF Args."Vendor No." THEN
                                 SETCURRENTKEY("Pay-to Vendor No.");
                             END;

               ReqFilterFields=Posting Date,Pay-to Vendor No.,Purchaser Code,Payment Terms Code;
               CalcFields=Amount,Amount Including VAT;
               DataItemLink=Currency Code=FIELD(Currency Code) }

    { 1000000021;2;Column;AmountLCY          ;
               IncludeCaption=No;
               SourceExpr=Args.GetPurchInvAmountLCY(PurchInvoiceHeader) }

    { 1000000010;2;Column;CostLCY            ;
               IncludeCaption=No;
               SourceExpr=0 }

    { 8098;1   ;DataItem;PurchCrMemoHeader   ;
               DataItemTable=Table124;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF Args."Credit Memos" THEN BEGIN
                                 PurchInvoiceHeader.COPYFILTER("Posting Date","Posting Date");
                                 PurchInvoiceHeader.COPYFILTER("Pay-to Vendor No.","Pay-to Vendor No.");
                                 PurchInvoiceHeader.COPYFILTER("Purchaser Code","Purchaser Code");
                                 PurchInvoiceHeader.COPYFILTER("Payment Terms Code","Payment Terms Code");
                                 PurchInvoiceHeader.COPYFILTER("Shortcut Dimension 1 Code","Shortcut Dimension 1 Code");
                                 PurchInvoiceHeader.COPYFILTER("Shortcut Dimension 2 Code","Shortcut Dimension 2 Code");
                                 PurchInvoiceHeader.COPYFILTER("Sell-to Customer No.","Sell-to Customer No.");
                                 PurchInvoiceHeader.COPYFILTER("Location Code","Location Code");
                                 PurchInvoiceHeader.COPYFILTER("Tax Area Code","Tax Area Code");
                                 PurchInvoiceHeader.COPYFILTER("Responsibility Center","Responsibility Center");
                               END ELSE
                                 CurrReport.BREAK;

                               IF Args."Customer No." THEN
                                 SETCURRENTKEY("Pay-to Vendor No.");
                             END;

               CalcFields=Amount,Amount Including VAT;
               DataItemLink=Currency Code=FIELD(Currency Code) }

    { 1000000022;2;Column;AmountLCY_CrMemo   ;
               IncludeCaption=No;
               SourceExpr=Args.GetPurchCrMemoAmountLCY(PurchCrMemoHeader) }

    { 1000000015;2;Column;CostLCY_CrMemo     ;
               IncludeCaption=No;
               SourceExpr=0 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF NOT Args.Invoices AND NOT Args."Credit Memos" THEN BEGIN
                     Args.Invoices := TRUE;
                     Args."Credit Memos" := TRUE;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ];
                  GroupType=Group }

      { 1000000002;2;Group  ;
                  Name=Show;
                  CaptionML=[DAN=Vis;
                             DEU=Anzeigen;
                             ENU=Show;
                             ESP=Mostrar;
                             FIN=NÑytÑ;
                             FRA=Afficher;
                             ISL=SÏna;
                             ITA=Mostra;
                             NLD=Weergeven;
                             NOR=Vis;
                             SVE=Show];
                  GroupType=Group }

      { 2   ;3   ;Field     ;
                  Name=Invoices;
                  CaptionML=[DAN=Fakturaer;
                             DEU=Rechnungen;
                             ENU=Invoices;
                             ESP=Facturas;
                             FIN=Laskut;
                             FRA=Factures;
                             ISL=Reikningar;
                             ITA=Fatture;
                             NLD=Facturen;
                             NOR=Fakturaer;
                             SVE=Fakturor];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args.Invoices }

      { 4   ;3   ;Field     ;
                  Name=CreditMemos;
                  CaptionML=[DAN=Kreditnotaer;
                             DEU=Gutschriften;
                             ENU=Credit Memos;
                             ESP=Abonos;
                             FIN=Hyvityslaskujen;
                             FRA=Avoirs;
                             ISL=Kreditreikninga;
                             ITA=Note credito;
                             NLD=Creditnota's;
                             NOR=Kreditnotaer;
                             SVE=Kreditnota];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Credit Memos" }

      { 1000000001;2;Group  ;
                  Name=GroupBy;
                  CaptionML=[DAN=Grupper efter;
                             DEU=Gruppieren nach;
                             ENU=Group By;
                             ESP=Agrupar por;
                             FIN=Ryhmittelyperuste;
                             FRA=Regrouper par;
                             ISL=Flokka eftir;
                             ITA=Raggruppa per;
                             NLD=Groeperen op;
                             NOR=Grupper etter;
                             SVE=Grupp av];
                  GroupType=Group }

      { 1000000000;3;Field  ;
                  Name=VendorNo;
                  CaptionML=[DAN=Debitornr.;
                             DEU=Debitorennr.;
                             ENU=Vendor No.;
                             ESP=Nß cliente;
                             FIN=Asiakasnro;
                             FRA=N¯ client;
                             ISL=N£mer vi–skiptamanns;
                             ITA=Nr. cliente;
                             NLD=Klantnr.;
                             NOR=Kundenr.;
                             SVE=SÑljarenr];
                  SourceExpr=Args."Vendor No." }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000001();
    VAR
      ForNAVSetup@1000000001 : Record 70000;
      OutStream@1000000000 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Args': WITH Args DO CASE ForNavOperation OF
        END;  'PurchInvoiceHeader': WITH PurchInvoiceHeader DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'PurchCrMemoHeader': WITH PurchCrMemoHeader DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70240 ForNAV Inv. to G/L Reconcile
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Lager til hovedbog Afstemt;
               DEU=Inventar zur Hauptbuchabstimmung;
               ENU=Inventory to G/L Reconcile;
               ESP=Inventario a Conciliaci¢n del libro mayor;
               FIN=Varasto kenraali Reconcile;
               FRA=Inventaire Ö la rÇconciliation du grand livre;
               ISL=Skr† yfir General Ledger S†tt;
               ITA=Inventario alla riconciliazione del registro generale;
               NLD=Voorraad naar grootboek reconciliatie;
               NOR=Inventar til generell hovedbok Avstemm;
               SVE=Inventar till Huvudbok Fîrsonar];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                  COMMIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Args              ;
               DataItemTable=Table70239;
               DataItemTableView=SORTING(To Date);
               OnPreDataItem=BEGIN
                               INSERT;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;Item             ;
               DataItemTable=Table27;
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  Args.CreateBuffer(Item, InvToGLBuffer);
                                END;

               ReqFilterFields=No.,Inventory Posting Group,Costing Method,Location Filter,Variant Filter;
               CalcFields=Cost is Posted to G/L }

    { 1000000001;2;DataItem;InvToGLBuffer    ;
               DataItemTable=Table70240;
               DataItemTableView=SORTING(Item No.,Variant Code,Location Code);
               CalcFields=Pending Adj.;
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF Args."To Date" = 0D THEN
                     Args."To Date" := WORKDATE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1000000003;2;Field  ;
                  Name=AsOfDate;
                  CaptionML=[DAN=Til dato;
                             DEU=Bis Datum;
                             ENU=To Date;
                             ESP=Hasta fecha;
                             FIN=Pvm:ÑÑn asti;
                             FRA=Date fin;
                             ISL=Til dags.;
                             ITA=A data;
                             NLD=T/m datum;
                             NOR=Til dato;
                             SVE=Till datum];
                  SourceExpr=Args."To Date" }

      { 1000000004;2;Group  ;
                  CaptionML=[DAN=Detaljer;
                             DEU=Details;
                             ENU=Details;
                             ESP=Detalles;
                             FIN=Erittely;
                             FRA=DÇtails;
                             ISL=UpplÏsingar;
                             ITA=Dettagli;
                             NLD=Details;
                             NOR=Detaljer;
                             SVE=Detaljer];
                  GroupType=Group }

      { 1000000002;3;Field  ;
                  Name=BreakdownByVariants;
                  CaptionML=[DAN=Variantkode;
                             DEU=Variantencode;
                             ENU=Variant Code;
                             ESP=C¢d. variante;
                             FIN=Varianttikoodi;
                             FRA=Code variante;
                             ISL=Afbrig–isk¢ti;
                             ITA=Cod. variante;
                             NLD=Variant;
                             NOR=Variantkode;
                             SVE=Variantkod];
                  SourceExpr=Args."Variant Code" }

      { 1000000001;3;Field  ;
                  Name=BreakdownByLocation;
                  CaptionML=[DAN=Lokationskode;
                             DEU=Lagerortcode;
                             ENU=Location Code;
                             ESP=C¢d. almacÇn;
                             FIN=Sijaintikoodi;
                             FRA=Code magasin;
                             ISL=K¢ti birg–ageymslu;
                             ITA=Cod. ubicazione;
                             NLD=Vestiging;
                             NOR=Lokasjonskode;
                             SVE=LagerstÑllekod];
                  SourceExpr=Args."Location Code" }

      { 1000000000;2;Field  ;
                  Name=UseAdditionalReportingCurrency;
                  CaptionML=[DAN=Belõb i ekstra valuta;
                             DEU=BetrÑge in BW;
                             ENU=Amounts in Add. Currency;
                             ESP=Importes en divisa adic.;
                             FIN=Summat lisÑvaluuttana;
                             FRA=Montants DR;
                             ISL=Upphë–ir ° î–rum gjaldm.;
                             ITA=Importi in val. addizionale;
                             NLD=Bedragen in rapp.-valuta;
                             NOR=Belõp i tilleggsvaluta;
                             SVE=Belopp i alt. valuta];
                  SourceExpr=Args."Amounts in Add. Currency" }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'InvToGLBuffer': WITH InvToGLBuffer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Shipped Not Invoiced");
                ReportForNav.AddTotal(DataItemId,1,"Expected Cost Posted to G/L");
                ReportForNav.AddTotal(DataItemId,2,"Cost Amount (Actual)");
                ReportForNav.AddTotal(DataItemId,3,"Cost Posted to G/L");
                ReportForNav.AddTotal(DataItemId,4,"Inventory Value");
                ReportForNav.AddTotal(DataItemId,5,"Received Not Invoiced");
                ReportForNav.AddTotal(DataItemId,6,"Total Expected Cost");
                ReportForNav.AddTotal(DataItemId,7,"Received Not Invoiced Posted");
                ReportForNav.AddTotal(DataItemId,8,"Shipped Not Invoiced Posted");
                ReportForNav.AddTotal(DataItemId,9,"Net Expected Cost Posted");
                ReportForNav.AddTotal(DataItemId,10,"Net Expected Cost Not Posted");
                ReportForNav.AddTotal(DataItemId,11,"Total Invoiced Value");
                ReportForNav.AddTotal(DataItemId,12,"Invoiced Value Posted");
              END;
           'Restore': BEGIN
                 "Shipped Not Invoiced" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Expected Cost Posted to G/L" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Cost Amount (Actual)" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Cost Posted to G/L" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Inventory Value" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "Received Not Invoiced" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "Total Expected Cost" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
                 "Received Not Invoiced Posted" := ReportForNav.RestoreTotal(DataItemId,7,GroupTotalFieldNo);
                 "Shipped Not Invoiced Posted" := ReportForNav.RestoreTotal(DataItemId,8,GroupTotalFieldNo);
                 "Net Expected Cost Posted" := ReportForNav.RestoreTotal(DataItemId,9,GroupTotalFieldNo);
                 "Net Expected Cost Not Posted" := ReportForNav.RestoreTotal(DataItemId,10,GroupTotalFieldNo);
                 "Total Invoiced Value" := ReportForNav.RestoreTotal(DataItemId,11,GroupTotalFieldNo);
                 "Invoiced Value Posted" := ReportForNav.RestoreTotal(DataItemId,12,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
ppPfZPS3/wc=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70242 ForNAV Inventory Valuation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Opgõrelse vërdiansëttelse;
               DEU=Inventur;
               ENU=Inventory Valuation;
               ESP=Valoraci¢n de inventario;
               FIN=Varaston arviointi;
               FRA=êvaluation d'inventaire;
               ISL=Ver–mëti birg–a;
               ITA=Valutazione dell'inventario;
               NLD=Voorraadwaardering;
               NOR=Verdivurdering;
               SVE=InvesteringsvÑrdering];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  IF (Args."Starting Date" = 0D) AND (Args."Ending Date" = 0D) THEN
                    Args."Ending Date" := WORKDATE;
                  IF Args."Starting Date" IN [0D,01010000D] THEN
                    StartDateText := ''
                  ELSE
                    StartDateText := FORMAT(Args."Starting Date" - 1);
                  ItemFilter := Item.GETFILTERS;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 42  ;    ;DataItem;Args                ;
               DataItemTable=Table70242;
               DataItemTableView=SORTING(Starting Date);
               OnPreDataItem=BEGIN
                               INSERT;
                             END;

               Temporary=Yes }

    { 8129;1   ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(Inventory Posting Group)
                                 WHERE(Type=CONST(Inventory));
               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Assembly BOM");
                                  IF Args."Ending Date" = 0D THEN
                                    Args."Ending Date" := DMY2DATE(31,12,9999);

                                  InventoryValuation.StartingInvoicedValue := 0;
                                  InventoryValuation.StartingExpectedValue := 0;
                                  InventoryValuation.StartingInvoicedQty := 0;
                                  InventoryValuation.StartingExpectedQty := 0;
                                  InventoryValuation.IncreaseInvoicedValue := 0;
                                  InventoryValuation.IncreaseExpectedValue := 0;
                                  InventoryValuation.IncreaseInvoicedQty := 0;
                                  InventoryValuation.IncreaseExpectedQty := 0;
                                  InventoryValuation.DecreaseInvoicedValue := 0;
                                  InventoryValuation.DecreaseExpectedValue := 0;
                                  InventoryValuation.DecreaseInvoicedQty := 0;
                                  InventoryValuation.DecreaseExpectedQty := 0;
                                  InventoryValuation.InvCostPostedToGL := 0;
                                  InventoryValuation.CostPostedToGL := 0;
                                  InventoryValuation.ExpCostPostedToGL := 0;
                                  IsEmptyLine := TRUE;

                                  ValueEntry.RESET;
                                  ValueEntry.SETRANGE("Item No.","No.");
                                  ValueEntry.SETFILTER("Variant Code",GETFILTER("Variant Filter"));
                                  ValueEntry.SETFILTER("Location Code",GETFILTER("Location Filter"));
                                  ValueEntry.SETFILTER("Global Dimension 1 Code",GETFILTER("Global Dimension 1 Filter"));
                                  ValueEntry.SETFILTER("Global Dimension 2 Code",GETFILTER("Global Dimension 2 Filter"));
                                  IF Args."Starting Date" > 0D THEN BEGIN
                                    ValueEntry.SETRANGE("Posting Date",0D,CALCDATE('<-1D>',Args."Starting Date"));
                                    ValueEntry.CALCSUMS("Item Ledger Entry Quantity","Cost Amount (Actual)","Cost Amount (Expected)","Invoiced Quantity");
                                    AssignAmounts(ValueEntry,InventoryValuation.StartingInvoicedValue,InventoryValuation.StartingInvoicedQty,InventoryValuation.StartingExpectedValue,InventoryValuation.StartingExpectedQty,1);
                                    IsEmptyLine := IsEmptyLine AND ((InventoryValuation.StartingInvoicedValue = 0) AND (InventoryValuation.StartingInvoicedQty = 0));
                                    IF Args."Expected Cost" THEN
                                      IsEmptyLine := IsEmptyLine AND ((InventoryValuation.StartingExpectedValue = 0) AND (InventoryValuation.StartingExpectedQty = 0));
                                  END;
                                  ValueEntry.SETRANGE("Posting Date",Args."Starting Date",Args."Ending Date");
                                  ValueEntry.SETFILTER(
                                    "Item Ledger Entry Type",'%1|%2|%3|%4',
                                    ValueEntry."Item Ledger Entry Type"::Purchase,
                                    ValueEntry."Item Ledger Entry Type"::"Positive Adjmt.",
                                    ValueEntry."Item Ledger Entry Type"::Output,
                                    ValueEntry."Item Ledger Entry Type"::"Assembly Output");
                                  ValueEntry.CALCSUMS("Item Ledger Entry Quantity","Cost Amount (Actual)","Cost Amount (Expected)","Invoiced Quantity");
                                  AssignAmounts(ValueEntry,InventoryValuation.IncreaseInvoicedValue,InventoryValuation.IncreaseInvoicedQty,InventoryValuation.IncreaseExpectedValue,InventoryValuation.IncreaseExpectedQty,1);
                                  ValueEntry.SETRANGE("Posting Date",Args."Starting Date",Args."Ending Date");
                                  ValueEntry.SETFILTER(
                                    "Item Ledger Entry Type",'%1|%2|%3|%4',
                                    ValueEntry."Item Ledger Entry Type"::Sale,
                                    ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.",
                                    ValueEntry."Item Ledger Entry Type"::Consumption,
                                    ValueEntry."Item Ledger Entry Type"::"Assembly Consumption");
                                  ValueEntry.CALCSUMS("Item Ledger Entry Quantity","Cost Amount (Actual)","Cost Amount (Expected)","Invoiced Quantity");
                                  AssignAmounts(ValueEntry,InventoryValuation.DecreaseInvoicedValue,InventoryValuation.DecreaseInvoicedQty,InventoryValuation.DecreaseExpectedValue,InventoryValuation.DecreaseExpectedQty,-1);
                                  ValueEntry.SETRANGE("Posting Date",Args."Starting Date",Args."Ending Date");
                                  ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::Transfer);
                                  IF ValueEntry.FINDSET THEN
                                    REPEAT
                                      IF TRUE IN [ValueEntry."Valued Quantity" < 0,NOT GetOutboundItemEntry(ValueEntry."Item Ledger Entry No.")] THEN
                                        AssignAmounts(ValueEntry,InventoryValuation.DecreaseInvoicedValue,InventoryValuation.DecreaseInvoicedQty,InventoryValuation.DecreaseExpectedValue,InventoryValuation.DecreaseExpectedQty,-1)
                                      ELSE
                                        AssignAmounts(ValueEntry,InventoryValuation.IncreaseInvoicedValue,InventoryValuation.IncreaseInvoicedQty,InventoryValuation.IncreaseExpectedValue,InventoryValuation.IncreaseExpectedQty,1);
                                    UNTIL ValueEntry.NEXT = 0;
                                  IsEmptyLine := IsEmptyLine AND ((InventoryValuation.IncreaseInvoicedValue = 0) AND (InventoryValuation.IncreaseInvoicedQty = 0));
                                  IsEmptyLine := IsEmptyLine AND ((InventoryValuation.DecreaseInvoicedValue = 0) AND (InventoryValuation.DecreaseInvoicedQty = 0));
                                  IF Args."Expected Cost" THEN BEGIN
                                    IsEmptyLine := IsEmptyLine AND ((InventoryValuation.IncreaseExpectedValue = 0) AND (InventoryValuation.IncreaseExpectedQty = 0));
                                    IsEmptyLine := IsEmptyLine AND ((InventoryValuation.DecreaseExpectedValue = 0) AND (InventoryValuation.DecreaseExpectedQty = 0));
                                  END;
                                  ValueEntry.SETRANGE("Posting Date",0D,Args."Ending Date");
                                  ValueEntry.SETRANGE("Item Ledger Entry Type");
                                  ValueEntry.CALCSUMS("Cost Posted to G/L","Expected Cost Posted to G/L");
                                  InventoryValuation.ExpCostPostedToGL += ValueEntry."Expected Cost Posted to G/L";
                                  InventoryValuation.InvCostPostedToGL += ValueEntry."Cost Posted to G/L";
                                  InventoryValuation.StartingExpectedValue += InventoryValuation.StartingInvoicedValue;
                                  InventoryValuation.IncreaseExpectedValue += InventoryValuation.IncreaseInvoicedValue;
                                  InventoryValuation.DecreaseExpectedValue += InventoryValuation.DecreaseInvoicedValue;
                                  InventoryValuation.CostPostedToGL := InventoryValuation.ExpCostPostedToGL + InventoryValuation.InvCostPostedToGL;
                                  IF IsEmptyLine THEN
                                    CurrReport.SKIP;
                                  InventoryValuation."Item No." := "No.";
                                  InventoryValuation.Description := Description;
                                  InventoryValuation."Inventory Posting Group" := "Inventory Posting Group";
                                  InventoryValuation.SetPrintExpectedCost(Args);
                                  InventoryValuation.INSERT;
                                  InventoryValuation.SETRANGE("Item No.", "No.");
                                END;

               OnPostDataItem=BEGIN
                                InventoryValuation.RESET;
                              END;

               ReqFilterFields=No.,Inventory Posting Group,Statistics Group }

    { 1   ;1   ;DataItem;InventoryValuation  ;
               DataItemTable=Table70244;
               DataItemTableView=SORTING(Inventory Posting Group);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF (Args."Starting Date" = 0D) AND (Args."Ending Date" = 0D) THEN BEGIN
                     Args."Ending Date" := WORKDATE;
                     Args."Expected Cost" := TRUE;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1   ;2   ;Field     ;
                  Name=StartingDate;
                  CaptionML=[DAN=Startdato;
                             DEU=Startdatum;
                             ENU=Starting Date;
                             ESP=Fecha inicial;
                             FIN=Aloituspvm;
                             FRA=Date dÇbut;
                             ISL=Upphafsdagsetning;
                             ITA=Data inizio;
                             NLD=Begindatum;
                             NOR=Startdato;
                             SVE=Startdatum];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Starting Date" }

      { 2   ;2   ;Field     ;
                  Name=EndingDate;
                  CaptionML=[DAN=Slutdato;
                             DEU=Enddatum;
                             ENU=Ending Date;
                             ESP=Fecha final;
                             FIN=Lopetuspvm;
                             FRA=Date fin;
                             ISL=Lokadagsetning;
                             ITA=Data fine;
                             NLD=Einddatum;
                             NOR=Sluttdato;
                             SVE=Slutdatum];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Ending Date" }

      { 4   ;2   ;Group     ;
                  CaptionML=[DAN=Vis;
                             DEU=Anzeigen;
                             ENU=Show;
                             ESP=Mostrar;
                             FIN=NÑytÑ;
                             FRA=Afficher;
                             ISL=SÏna;
                             ITA=Mostra;
                             NLD=Weergeven;
                             NOR=Vis;
                             SVE=Show];
                  GroupType=Group }

      { 3   ;3   ;Field     ;
                  Name=IncludeExpectedCost;
                  CaptionML=[DAN=Forventet kostpris;
                             DEU=Soll-Kosten;
                             ENU=Expected Cost;
                             ESP=Coste previsto;
                             FIN=Oletettu kustannus;
                             FRA=Coñt prÇvu;
                             ISL=Vëntanl. kostna–ur;
                             ITA=Costo previsto;
                             NLD=Verwachte kosten;
                             NOR=Forventet kostnad;
                             SVE=FîrvÑntad kostnad];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Expected Cost" }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ValueEntry@1024 : Record 5802;
      ItemFilter@1008 : Text;
      StartDateText@1025 : Text[10];
      IsEmptyLine@1026 : Boolean;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000000();
    VAR
      ForNAVSetup@1000000001 : Record 70000;
      OutStream@1000000000 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    LOCAL PROCEDURE AssignAmounts@1(ValueEntry@1000 : Record 5802;VAR InvoicedValue@1001 : Decimal;VAR InvoicedQty@1002 : Decimal;VAR ExpectedValue@1003 : Decimal;VAR ExpectedQty@1004 : Decimal;Sign@1005 : Decimal);
    BEGIN
      InvoicedValue += ValueEntry."Cost Amount (Actual)" * Sign;
      InvoicedQty += ValueEntry."Invoiced Quantity" * Sign;
      ExpectedValue += ValueEntry."Cost Amount (Expected)" * Sign;
      ExpectedQty += ValueEntry."Item Ledger Entry Quantity" * Sign;
    END;

    LOCAL PROCEDURE GetOutboundItemEntry@4(ItemLedgerEntryNo@1001 : Integer) : Boolean;
    VAR
      ItemApplnEntry@1000 : Record 339;
      ItemLedgEntry@1002 : Record 32;
    BEGIN
      ItemApplnEntry.SETCURRENTKEY("Item Ledger Entry No.");
      ItemApplnEntry.SETRANGE("Item Ledger Entry No.",ItemLedgerEntryNo);
      IF NOT ItemApplnEntry.FINDFIRST THEN
        EXIT(TRUE);
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgEntry.SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      ItemLedgEntry.SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      ItemLedgEntry.SETFILTER("Global Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      ItemLedgEntry.SETFILTER("Global Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      ItemLedgEntry."Entry No." := ItemApplnEntry."Outbound Item Entry No.";
      EXIT(NOT ItemLedgEntry.FIND);
    END;

    PROCEDURE SetStartDate@5(DateValue@1001 : Date);
    BEGIN
      Args."Starting Date" := DateValue;
    END;

    PROCEDURE SetEndDate@6(DateValue@1001 : Date);
    BEGIN
      Args."Ending Date" := DateValue;
    END;

    PROCEDURE InitializeRequest@15(NewStartDate@1002 : Date;NewEndDate@1001 : Date;NewShowExpected@1000 : Boolean);
    BEGIN
      Args."Starting Date" := NewStartDate;
      Args."Ending Date" := NewEndDate;
      Args."Expected Cost" := NewShowExpected;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Item': WITH Item DO CASE ForNavOperation OF
        END;  'InventoryValuation': WITH InventoryValuation DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,CostPostedToGL);
                ReportForNav.AddTotal(DataItemId,1,DecreaseExpectedQty);
                ReportForNav.AddTotal(DataItemId,2,DecreaseExpectedValue);
                ReportForNav.AddTotal(DataItemId,3,DecreaseInvoicedQty);
                ReportForNav.AddTotal(DataItemId,4,DecreaseInvoicedValue);
                ReportForNav.AddTotal(DataItemId,5,ExpCostPostedToGL);
                ReportForNav.AddTotal(DataItemId,6,IncreaseExpectedQty);
                ReportForNav.AddTotal(DataItemId,7,IncreaseExpectedValue);
                ReportForNav.AddTotal(DataItemId,8,IncreaseInvoicedQty);
                ReportForNav.AddTotal(DataItemId,9,IncreaseInvoicedValue);
                ReportForNav.AddTotal(DataItemId,10,InvCostPostedToGL);
                ReportForNav.AddTotal(DataItemId,11,StartingExpectedQty);
                ReportForNav.AddTotal(DataItemId,12,StartingExpectedValue);
                ReportForNav.AddTotal(DataItemId,13,StartingInvoicedQty);
                ReportForNav.AddTotal(DataItemId,14,StartingInvoicedValue);
              END;
           'Restore': BEGIN
                 CostPostedToGL := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 DecreaseExpectedQty := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 DecreaseExpectedValue := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 DecreaseInvoicedQty := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 DecreaseInvoicedValue := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 ExpCostPostedToGL := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 IncreaseExpectedQty := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
                 IncreaseExpectedValue := ReportForNav.RestoreTotal(DataItemId,7,GroupTotalFieldNo);
                 IncreaseInvoicedQty := ReportForNav.RestoreTotal(DataItemId,8,GroupTotalFieldNo);
                 IncreaseInvoicedValue := ReportForNav.RestoreTotal(DataItemId,9,GroupTotalFieldNo);
                 InvCostPostedToGL := ReportForNav.RestoreTotal(DataItemId,10,GroupTotalFieldNo);
                 StartingExpectedQty := ReportForNav.RestoreTotal(DataItemId,11,GroupTotalFieldNo);
                 StartingExpectedValue := ReportForNav.RestoreTotal(DataItemId,12,GroupTotalFieldNo);
                 StartingInvoicedQty := ReportForNav.RestoreTotal(DataItemId,13,GroupTotalFieldNo);
                 StartingInvoicedValue := ReportForNav.RestoreTotal(DataItemId,14,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
4kwnv9PgD/8A</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70248 ForNAV Cust./Item Statistics
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kunde/Varestatistik;
               DEU=Debitor/Artikelstatistik;
               ENU=Customer/Item Statistics;
               ESP=Estad°sticas de clientes / art°culos;
               FIN=Asiakas/Nimikkeen tilastot;
               FRA=Statistiques client/article;
               ISL=Vi–skiptama–ur/Birg–aupplÏsingar;
               ITA=Statistiche cliente/articolo;
               NLD=Klant/Artikelstatistiek;
               NOR=Kunde/Varestatistikk;
               SVE=Kunde/Artikelstatistik;
               ESN=Estad°sticas cliente/producto];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   LoadWatermark;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Args              ;
               DataItemTable=Table70248;
               DataItemTableView=SORTING(Print Details);
               OnPreDataItem=BEGIN
                               INSERT;
                             END;

               Temporary=Yes }

    { 6836;    ;DataItem;                    ;
               DataItemTable=Table18;
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               ReportForNav.GetDataItem('Customer').NewPagePerRecord := Args."New Page Per Customer";
                             END;

               ReqFilterFields=No.,Search Name,Customer Posting Group }

    { 8894;1   ;DataItem;                    ;
               DataItemTable=Table5802;
               DataItemTableView=SORTING(Source Type,Source No.,Item Ledger Entry Type,Item No.,Posting Date)
                                 WHERE(Source Type=CONST(Customer),
                                       Item Ledger Entry Type=CONST(Sale),
                                       Expected Cost=CONST(No));
               ReqFilterFields=Item No.,Inventory Posting Group,Posting Date;
               DataItemLink=Source No.=FIELD(No.),
                            Global Dimension 1 Code=FIELD(Global Dimension 1 Filter),
                            Global Dimension 2 Code=FIELD(Global Dimension 2 Filter) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1000000002;2;Field  ;
                  Name=PrintDetails;
                  CaptionML=[DAN=Udskriv detaljer;
                             DEU=Details drucken;
                             ENU=Print Details;
                             ESP=Imprimir detalles;
                             FIN=Tulosta yksityiskohdat;
                             FRA=Imprimer dÇtails;
                             ISL=Prenta sundurli–un;
                             ITA=Stampa dettagli;
                             NLD=Details afdrukken;
                             NOR=Skriv ut spesifikasjoner;
                             SVE=Skriv ut detaljer];
                  SourceExpr=Args."Print Details" }

      { 1000000001;2;Field  ;
                  Name=NewPagePerCustomer;
                  CaptionML=[DAN=Skift side pr. debitor;
                             DEU=Neue Seite pro Debitor;
                             ENU=New Page per Customer;
                             ESP=P†gina nueva por cliente;
                             FIN=Uusi sivu asiakasta kohti;
                             FRA=Nouvelle page par client;
                             ISL=NÏ bla–s°–a † hvern vi–skiptamann;
                             ITA=Nuova pagina per cliente;
                             NLD=Nieuwe pagina per klant;
                             NOR=Sideskift per kunde;
                             SVE=Ny sida per kund];
                  SourceExpr=Args."New Page Per Customer" }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1480002 : TextConst 'ENU=Invalid Item';
      Text001@1480013 : TextConst 'ENU=Data';
      Text002@1480012 : TextConst 'DAN=Kunde/Varestatistik;DEU=Debitor/Artikelstatistik;ENU=Customer/Item Statistics;ESP=Estad°sticas de clientes / art°culos;FIN=Asiakas/Nimikkeen tilastot;FRA=Statistiques client/article;ISL=Vi–skiptama–ur/Birg–aupplÏsingar;ITA=Statistiche cliente/articolo;NLD=Klant/Artikelstatistiek;NOR=Kunde/Varestatistikk;SVE=Kunde/Artikelstatistik;ESN=Estad°sticas cliente/producto';
      Text003@1480011 : TextConst 'ENU=Company Name';
      Text004@1480010 : TextConst 'ENU=Report No.';
      Text005@1480009 : TextConst 'DAN=Rapportnavn;DEU=Berichtsnamen;ENU=Report Name;ESP=Nombre de informe;FIN=Raportin nimi;FRA=Nom Çtat;ISL=SkÏrsluheiti;ITA=Nome report;NLD=Rapportnaam;NOR=Rapport Navn;SVE=Rapportnamn';
      Text006@1480008 : TextConst 'DAN=Bruger ID;DEU=Nutzer ID;ENU=User ID;ESP=Usuario ID;FIN=KÑyttÑjÑ ID;FRA=Utilisateur ID;ISL=Notandi ID;ITA=Utente ID;NLD=Gebruikers ID;NOR=Bruker ID;SVE=AnvÑndar-ID';
      Text007@1480007 : TextConst 'ENU=Date / Time';
      Text008@1480006 : TextConst 'ENU=Customer Filters';
      Text009@1480005 : TextConst 'ENU=Value Entry Filters';
      Text010@1480004 : TextConst 'ENU=Contribution Margin';
      Text011@1480003 : TextConst 'ENU=Contribution Ratio';
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE LoadWatermark@1000000000();
    VAR
      ForNAVSetup@1000000001 : Record 70000;
      OutStream@1000000000 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("List Report Watermark");
        IF NOT "List Report Watermark".HASVALUE THEN
          EXIT;
        "List Report Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Value Entry"."Sales Amount (Actual)");
                ReportForNav.AddTotal(DataItemId,1,"Value Entry"."Discount Amount");
              END;
           'Restore': BEGIN
                 "Value Entry"."Sales Amount (Actual)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Value Entry"."Discount Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'ValueEntry': WITH "Value Entry" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Invoiced Quantity");
                ReportForNav.AddTotal(DataItemId,1,"Sales Amount (Actual)");
                ReportForNav.AddTotal(DataItemId,2,"Discount Amount");
                ReportForNav.AddTotal(DataItemId,3,"Cost Amount (Actual)");
                ReportForNav.AddTotal(DataItemId,4,"Invoiced Quantity");
                ReportForNav.AddTotal(DataItemId,5,"Sales Amount (Actual)");
                ReportForNav.AddTotal(DataItemId,6,"Cost Amount (Actual)");
                ReportForNav.AddTotal(DataItemId,7,"Discount Amount");
              END;
           'Restore': BEGIN
                 "Invoiced Quantity" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Sales Amount (Actual)" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Discount Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Cost Amount (Actual)" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Invoiced Quantity" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "Sales Amount (Actual)" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "Cost Amount (Actual)" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
                 "Discount Amount" := ReportForNav.RestoreTotal(DataItemId,7,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
/wU=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70250 ForNAV Statement
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kontoudtog;
               DEU=Kontoauszug;
               ENU=Statement;
               ESP=Extracto;
               FIN=Tiliote;
               FRA=RelevÇ;
               ISL=Reikningsyfirlit;
               ITA=Estratto conto;
               NLD=Rekeningoverzicht;
               NOR=Kontoutdrag;
               SVE=Kontoutdrag];
    OnInitReport=BEGIN
                   GLSetup.GET;
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                  COMMIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000001;;DataItem;Args              ;
               DataItemTable=Table70250;
               DataItemTableView=SORTING(Start Date) }

    { 2   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  ProcessCustomer;
                                  UpdateAging;
                                END;

               ReqFilterFields=No.;
               CalcFields=Balance }

    { 6523;1   ;DataItem;CurrencyLoop        ;
               DataItemTable=Table4;
               DataItemTableView=SORTING(Code);
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  Customer.SETRANGE("Date Filter",0D, Args."Start Date" - 1);
                                  Customer.SETRANGE("Currency Filter",CurrencyLoop.Code);
                                  Customer.CALCFIELDS("Net Change");
                                END;

               OnPostDataItem=BEGIN
                                Customer.SETRANGE("Currency Filter");
                              END;

               Temporary=Yes }

    { 3   ;2   ;DataItem;                    ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Posting Date,Currency Code);
               OnPreDataItem=BEGIN
                               SETRANGE("Customer No.", Customer."No.");
                               SETRANGE("Posting Date", Args."Start Date", Args."Ending Date");
                               SETRANGE("Currency Code",CurrencyLoop.Code);
                               SETRANGE("Date Filter", Args."Start Date", Args."Ending Date");
                             END;

               CalcFields=Remaining Amount,Original Amount }

    { 9065;2   ;DataItem;OverdueEntry        ;
               DataItemTable=Table21;
               DataItemTableView=SORTING(Customer No.,Open,Positive,Due Date);
               OnPreDataItem=BEGIN
                               SETRANGE("Customer No.", Customer."No.");
                               IF NOT Args."Include Aging Band" THEN
                                 SETRANGE("Due Date", 0D, Args."Ending Date"- 1);
                               SETRANGE("Currency Code", CurrencyLoop.Code);
                               IF (NOT Args."Show Overdue Entries") AND (NOT Args."Include Aging Band") THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Args."Include Aging Band" THEN BEGIN
                                    IF ("Posting Date" > Args."Ending Date") AND ("Due Date" >= Args."Ending Date") THEN
                                      CurrReport.SKIP;
                                    IF Args.Date = Args.Date::"Due Date" THEN
                                      IF "Due Date" >= Args."Ending Date" THEN
                                        CurrReport.SKIP;
                                  END;

                                  CALCFIELDS("Remaining Amount");
                                  IF "Remaining Amount" = 0 THEN
                                    CurrReport.SKIP;

                                  IF "Due Date" >= Args."Ending Date" THEN
                                    CurrReport.SKIP;
                                END;

               CalcFields=Original Amount,Remaining Amount;
               DataItemLinkReference=Customer;
               DataItemLink=Customer No.=FIELD(No.) }

    { 1000000000;1;DataItem;AgingBuffer      ;
               DataItemTable=Table70220;
               DataItemTableView=SORTING(Entry No.);
               DataItemLink=Account No.=FIELD(No.);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   InitRequestPageDataInternal
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1000000001;2;Field  ;
                  Name=DocumentDate;
                  CaptionML=[DAN=Bilagsdato;
                             DEU=Belegdatum;
                             ENU=Document Date;
                             FIN=Asiakirjan pvm;
                             FRA=Date document;
                             ISL=Dags. fylgiskjals;
                             ITA=Data documento;
                             NLD=Documentdatum;
                             NOR=Bilagsdato;
                             SVE=Dokumentdatum];
                  SourceExpr=Args."Document Date" }

      { 1000000000;2;Field  ;
                  Name=StartDate;
                  CaptionML=[DAN=Startdato;
                             DEU=Startdatum;
                             ENU=Start Date;
                             ESP=Fecha inicial;
                             FIN=Aloituspvm;
                             FRA=Date dÇbut;
                             ISL=Upphafsdagur;
                             ITA=Data di inizio;
                             NLD=Begindatum;
                             NOR=Startdato;
                             SVE=Start datum];
                  SourceExpr=Args."Start Date" }

      { 17  ;2   ;Field     ;
                  Name=EndDate;
                  CaptionML=[DAN=Slutdato;
                             DEU=Enddatum;
                             ENU=Ending Date;
                             ESP=Fecha final;
                             FIN=Lopetuspvm;
                             FRA=Date fin;
                             ISL=Lokadagsetning;
                             ITA=Data fine;
                             NLD=Einddatum;
                             NOR=Sluttdato;
                             SVE=Slutdatum];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Ending Date" }

      { 16  ;2   ;Field     ;
                  Name=ShowOverdueEntries;
                  CaptionML=[DAN=Vis forfaldne poster;
                             DEU=FÑllige Posten drucken;
                             ENU=Show Overdue Entries;
                             ESP=Muestra movs. vencidos;
                             FIN=NÑytÑ erÑÑntyneet tapahtumat;
                             FRA=Afficher Çcritures Çchues;
                             ISL=SÏna gjaldf. fërslur;
                             ITA=Mostra movimenti scaduti;
                             NLD=Vervallen posten weergeven;
                             NOR=Vis forfalte poster;
                             SVE=Visa fîrfallna transaktioner];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Show Overdue Entries" }

      { 15  ;2   ;Group     ;
                  Name=Include;
                  CaptionML=[DAN=Inkluder;
                             DEU=Einschlie·en;
                             ENU=Include;
                             ESP=Incluye;
                             FIN=SisÑllytÑ;
                             FRA=Inclure;
                             ISL=Hafa me–;
                             ITA=Includi;
                             NLD=Invoegen;
                             NOR=Inkluder;
                             SVE=Inkludera];
                  GroupType=Group }

      { 14  ;3   ;Field     ;
                  Name=IncludeAllCustomerswithLE;
                  CaptionML=[DAN=Medtag ogsÜ debitorer, der kun har saldo;
                             DEU=Alle Debitoren mit Saldo einbeziehen;
                             ENU=Include All Customers with a Balance;
                             ESP=Incluye todos los clientes con saldo;
                             FIN=SisÑllytÑ kaikki asiakkaat, joilla on saldo;
                             FRA=Inclure tous les clients ayant un solde.;
                             ISL=Skrifa £t alla me– stî–u;
                             ITA=Includi tutti i clienti con saldo;
                             NLD=Alle klanten met saldo;
                             NOR=Ta med alle kunder med saldo;
                             SVE=Ta med alla kunder med ett saldo];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print All Having Balance";
                  MultiLine=Yes;
                  OnValidate=BEGIN
                               IF NOT Args."Print All Having Entries" THEN
                                 Args."Print All Having Balance" := TRUE;
                             END;
                              }

      { 13  ;3   ;Field     ;
                  Name=IncludeAllCustomerswithBalance;
                  CaptionML=[DAN=Medtag alle debitorer, der har poster;
                             DEU=Alle Debitoren mit Buchungen einbeziehen;
                             ENU=Include All Customers with Ledger Entries;
                             ESP=Incluye todos los clientes con movs.;
                             FIN=SisÑllytÑ kaikki asiakkaat, joilla on tapahtumakirjauksia;
                             FRA=Inclure tous les clients mouvementÇs.;
                             ISL=Skrifa £t alla vskm. me– fërslur;
                             ITA=Includi tutti i clienti con movimenti contabili;
                             NLD=Alle klanten met posten;
                             NOR=Ta med alle kunder med poster;
                             SVE=Ta med alla kunder med reskontratransaktioner];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Print All Having Entries";
                  MultiLine=Yes;
                  OnValidate=BEGIN
                               IF NOT Args."Print All Having Balance" THEN
                                 Args."Print All Having Entries" := TRUE;
                             END;
                              }

      { 10  ;2   ;Group     ;
                  CaptionML=[DAN=Aldersford.intv. efter;
                             DEU=SaldenrÅckblick nach;
                             ENU=Aging Band by;
                             ESP=Rango antigÅedad por;
                             FIN=ErÑÑntymisjakso per;
                             FRA=Cumul par;
                             ISL=T°mabil aldursgreiningar eftir;
                             ITA=Periodo scadenziario per;
                             NLD=Vervaldatuminterval per;
                             NOR=Aldersfordeling pÜ basis av;
                             SVE=èldersspann per];
                  GroupType=Group }

      { 9   ;3   ;Field     ;
                  Name=IncludeAgingBand;
                  CaptionML=[DAN=Medtag aldersford.intv.;
                             DEU=Mit SaldenrÅckblick;
                             ENU=Include Aging Band;
                             ESP=Incluye rango antigÅedad;
                             FIN=Sis. erÑÑntymisjakso;
                             FRA=Inclure cumul date;
                             ISL=Taka aldursgreiningart°mabil me–;
                             ITA=Includi periodo scadenziario;
                             NLD=Vervaldatuminterval opnemen;
                             NOR=Vis aldersfordeling;
                             SVE=Ta med Üldersspann];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Include Aging Band" }

      { 8   ;3   ;Field     ;
                  Name=AgingBandPeriodLengt;
                  CaptionML=[DAN=Periodelëngde;
                             DEU=PeriodenlÑnge;
                             ENU=Period Length;
                             ESP=Longitud periodo;
                             FIN=Jakson pituus;
                             FRA=Base pÇriode;
                             ISL=Lengd t°mabils;
                             ITA=Durata periodo;
                             NLD=Periodelengte;
                             NOR=Periodelengde;
                             SVE=PeriodlÑngd];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Period Length" }

      { 7   ;3   ;Field     ;
                  Name=AgingBandby;
                  CaptionML=[DAN=Aldersford.intv. efter;
                             DEU=SaldenrÅckblick nach;
                             ENU=Aging Band by;
                             ESP=Rango antigÅedad por;
                             FIN=ErÑÑntymisjakso per;
                             FRA=Cumul par;
                             ISL=T°mabil aldursgreiningar eftir;
                             ITA=Periodo scadenziario per;
                             NLD=Vervaldatuminterval per;
                             NOR=Aldersfordeling pÜ basis av;
                             SVE=èldersspann per];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args.Date }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

      { 1000000004;1;Group  ;
                  Name=Output Options;
                  CaptionML=ENU=Output Options;
                  GroupType=Group }

      { 1000000003;2;Field  ;
                  Name=ReportOutput;
                  CaptionML=ENU=Report Output;
                  OptionCaptionML=[DAN=Print,Eksempel,Word,PDF,Email,XML;
                                   DEU=Print,Vorschau,Word,PDF,Email,XML;
                                   ENU=Print,Preview,Word,PDF,Email,XML;
                                   ESP=Print,Avance,Word,PDF,Email,XML;
                                   FIN=Print,Esikatselu,Word,PDF,Email,XML;
                                   FRA=Print,Aperáu,Word,PDF,Email,XML;
                                   ISL=Print,Preview,Word,PDF,Email,XML - RDLC layouts only;
                                   ITA=Print,Anteprima,Word,PDF,Email,XML;
                                   NLD=Print,Voorbeeld,Word,PDF,Email,XML - Alleen RDLC layouts;
                                   NOR="Print,ForhÜndsvisning,Word,PDF,Email,XML ";
                                   SVE=Print,Fîrhandsvisning,Word,PDF,Email,XML];
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SupportedOutputMethod;
                  OnValidate=VAR
                               CustomLayoutReporting@1000 : Codeunit 8800;
                             BEGIN
                               //ShowPrintRemaining := (SupportedOutputMethod = SupportedOutputMethod::Email);

                               CASE SupportedOutputMethod OF
                                 SupportedOutputMethod::Print:
                                   ChosenOutputMethod := CustomLayoutReporting.GetPrintOption;
                                 SupportedOutputMethod::Preview:
                                   ChosenOutputMethod := CustomLayoutReporting.GetPreviewOption;
                                 SupportedOutputMethod::Word:
                                   ChosenOutputMethod := CustomLayoutReporting.GetWordOption;
                                 SupportedOutputMethod::PDF:
                                   ChosenOutputMethod := CustomLayoutReporting.GetPDFOption;
                                 SupportedOutputMethod::Email:
                                   ChosenOutputMethod := CustomLayoutReporting.GetEmailOption;
                                 SupportedOutputMethod::XML:
                                   ChosenOutputMethod := CustomLayoutReporting.GetXMLOption;
                               END;
                             END;
                              }

      { 1000000002;2;Field  ;
                  Name=ChosenOutput;
                  ApplicationArea=#Advanced;
                  SourceExpr=ChosenOutputMethod;
                  Visible=False }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      GLSetup@1002 : Record 98;
      Language@1013 : Record 8;
      SupportedOutputMethod@1000000001 : 'Print,Preview,Word,PDF,Email,XML';
      ChosenOutputMethod@1000000000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE ProcessCustomer@1();
    VAR
      Currency@1000 : Record 4;
    BEGIN
      CurrencyLoop.RESET;
      CurrencyLoop.DELETEALL;
      WITH Customer DO BEGIN
        IF NOT CurrReport.PREVIEW THEN BEGIN
          LOCKTABLE;
          FIND;
          "Last Statement No." := "Last Statement No." + 1;
          MODIFY;
          COMMIT;
        END ELSE
          "Last Statement No." := "Last Statement No." + 1;
        SETRANGE("Date Filter",0D, Args."Ending Date");
        CALCFIELDS("Net Change");
        IF ("Net Change" <> 0) OR Args."Print All Having Balance" THEN BEGIN
          CurrencyLoop.Code := '';
          CurrencyLoop.INSERT;
          COPYFILTER("Currency Filter", Currency.Code);
          IF Currency.FINDSET THEN
            REPEAT
              CurrencyLoop := Currency;
              CurrencyLoop.INSERT;
            UNTIL Currency.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE GetDate@3(PostingDate@1000 : Date;DueDate@1001 : Date) : Date;
    BEGIN
      IF Args.Date = Args.Date::"Posting Date" THEN
        EXIT(PostingDate);
      EXIT(DueDate);
    END;

    LOCAL PROCEDURE InitRequestPageDataInternal@1091();
    BEGIN
      WITH Args DO BEGIN
        IF (NOT "Print All Having Entries") AND (NOT "Print All Having Balance") THEN
          "Print All Having Balance" := TRUE;
        IF FORMAT("Period Length") = '' THEN
          EVALUATE("Period Length",'<1M+CM>');
        IF "Document Date" = 0D THEN
          "Document Date" := TODAY;
        IF "Start Date" = 0D THEN
          "Start Date" := WORKDATE;
        IF "Ending Date" = 0D THEN
          "Ending Date" := WORKDATE;
      END;
    END;

    LOCAL PROCEDURE UpdateAging@1000000001();
    VAR
      AgingArgs@1000000001 : Record 70219;
      CustomerAging@1000000000 : Codeunit 70220;
    BEGIN
      IF NOT Args."Include Aging Band" THEN
        EXIT;
      CASE Args.Date OF
        Args.Date::"Due Date":
          AgingArgs."Aging By" := AgingArgs."Aging By"::"Due Date";
        Args.Date::"Posting Date":
          AgingArgs."Aging By" := AgingArgs."Aging By"::"Posting Date";
      END;
      AgingArgs."Ending Date" := Args."Ending Date";
      AgingArgs."Period Length" := Args."Period Length";
      AgingArgs."Column Count" := 5;
      AgingArgs.CalcDates;
      CustomerAging.GetAging(Customer, AgingBuffer, AgingArgs);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'OverdueEntry': WITH OverdueEntry DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Remaining Amount");
                ReportForNav.AddTotal(DataItemId,1,"Remaining Amount");
              END;
           'Restore': BEGIN
                 "Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'AgingBuffer': WITH AgingBuffer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Amount 1");
                ReportForNav.AddTotal(DataItemId,1,"Amount 2");
                ReportForNav.AddTotal(DataItemId,2,"Amount 3");
                ReportForNav.AddTotal(DataItemId,3,"Amount 4");
                ReportForNav.AddTotal(DataItemId,4,"Amount 5");
              END;
           'Restore': BEGIN
                 "Amount 1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount 2" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Amount 3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "Amount 4" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "Amount 5" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
ScA8t/iP/wc=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70252 ForNAV Reminder
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Rykkermeddelelse;
               DEU=Mahnung;
               ENU=Reminder;
               ESP=Recordatorio;
               FIN=Muistutus;
               FRA=Relance;
               ISL=InnheimtubrÇf;
               ITA=Sollecito;
               NLD=Aanmaning;
               NOR=Purring;
               SVE=PÜminnelses];
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Header            ;
               DataItemTable=Table297;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                END;
                                 }

    { 1000000001;1;DataItem;Line             ;
               DataItemTable=Table298;
               DataItemTableView=SORTING(Reminder No.,Line No.);
               DataItemLink=Reminder No.=FIELD(No.) }

    { 1000000002;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnAfterGetRecord=BEGIN
                                  IF NOT PrintVATAmountLines THEN
                                    CurrReport.BREAK;
                                END;

               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Remaining Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
8V/+CQ==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70253 ForNAV Reminder Test
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Rykkermeddelelse;
               DEU=Mahnung;
               ENU=Reminder Test;
               ESP=Recordatorio;
               FIN=Muistutus;
               FRA=Relance;
               ISL=InnheimtubrÇf;
               ITA=Sollecito;
               NLD=Aanmaning Test;
               NOR=Purring;
               SVE=PÜminnelsestest];
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Header            ;
               DataItemTable=Table295;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                END;
                                 }

    { 1000000001;1;DataItem;Line             ;
               DataItemTable=Table296;
               DataItemTableView=SORTING(Reminder No.,Line No.);
               DataItemLink=Reminder No.=FIELD(No.) }

    { 1000000002;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnAfterGetRecord=BEGIN
                                  IF NOT PrintVATAmountLines THEN
                                    CurrReport.BREAK;
                                END;

               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Remaining Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
L7g8XyJIQ/KXfwI=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70254 ForNAV Finance Charge Memo
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Rentenota;
               DEU=Zinsrechnung;
               ENU=Finance Charge Memo;
               ESP=Documento interÇs;
               FIN=ViivÑstyskululasku;
               FRA=Facture d'intÇràts;
               ISL=Vaxtareikningur;
               ITA=Nota addebito interessi;
               NLD=Rentefactuur;
               NOR=Rentenota;
               SVE=Finansiell laddningsmemo];
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Header            ;
               DataItemTable=Table304;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                END;
                                 }

    { 1000000001;1;DataItem;Line             ;
               DataItemTable=Table305;
               DataItemTableView=SORTING(Finance Charge Memo No.,Line No.);
               DataItemLink=Finance Charge Memo No.=FIELD(No.) }

    { 1000000002;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnAfterGetRecord=BEGIN
                                  IF NOT PrintVATAmountLines THEN
                                    CurrReport.BREAK;
                                END;

               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Remaining Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
+kua0Dyjb3VG7+N1esHE+RJOGpK//BM=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70255 ForNAV Finance Charge Memo T.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Rentenota;
               DEU=Zinsrechnung;
               ENU=Finance Charge Memo Test;
               ESP=Documento interÇs;
               FIN=ViivÑstyskululasku;
               FRA=Facture d'intÇràts;
               ISL=Vaxtareikningur;
               ITA=Nota addebito interessi;
               NLD=Rentefactuur Test;
               NOR=Rentenota;
               SVE=Finansiell laddningsmemotest];
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Header            ;
               DataItemTable=Table302;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                END;
                                 }

    { 1000000001;1;DataItem;Line             ;
               DataItemTable=Table303;
               DataItemTableView=SORTING(Finance Charge Memo No.,Line No.);
               DataItemLink=Finance Charge Memo No.=FIELD(No.) }

    { 1000000002;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnAfterGetRecord=BEGIN
                                  IF NOT PrintVATAmountLines THEN
                                    CurrReport.BREAK;
                                END;

               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Remaining Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
8i2ePf0lTVie0bc8Y/fxKr3g8nyJIA3JX/4J</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70270 ForNAV Item Variants
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Varevarianter;
               DEU=Artikelvariante;
               ENU=Item Variants;
               ESP=Variante del art°culo;
               FIN=Kohteen vaihtoehdot;
               FRA=Variante d'article;
               ISL=Vara Variant;
               ITA=Variante articolo;
               NLD=Artikelvarianten;
               NOR=Varevariant;
               SVE=Artikelvarianter];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(Inventory Posting Group) }

    { 1000000001;1;Column;HTMLTable          ;
               IncludeCaption=No;
               SourceExpr=HTMLTable }

    { 1000000002;1;Column;Color              ;
               IncludeCaption=No;
               SourceExpr=GetColor }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE HTMLTable@1000000000() : Text;
    BEGIN
      EXIT('<!DOCTYPE>' +
      '<html>'+
      '<head>'+
      GetStyle+
      '</head>'+
      '<body>'+
      '<table style="margin-left: 10px">'+
      '  <tr>'+
      '    <th>Color</th>'+
      '    <th>QTY</th>'+
      '  </tr>'+
      GetTableRows+
      '</table>'+
      '</body>'+
      '</html>');
    END;

    LOCAL PROCEDURE GetTableRows@1000000001() : Text;
    VAR
      ItemVariant@1000000000 : Record 5401;
      HTMLTable@1000000001 : Text;
    BEGIN
      ItemVariant.SETRANGE("Item No.", Item."No.");
      IF ItemVariant.FINDSET THEN REPEAT
        HTMLTable += '<tr>';
        HTMLTable += '<td>' + ItemVariant.Code+ '</td>';
        HTMLTable += '<td>' + FORMAT(ItemVariant.Description) + '</td>';
        HTMLTable += '</tr>';
      UNTIL ItemVariant.NEXT = 0;
      EXIT(HTMLTable);
    END;

    LOCAL PROCEDURE GetStyle@1000000002() : Text;
    BEGIN
      EXIT('<style>' +
           'table, th, td {'+
           'border: 1px solid black;'+
           'font-family: segoe ui;'+
           'font-size: 10px;'+
           '}'+
           '</style>');
    END;

    LOCAL PROCEDURE GetColor@1000000003() : Text;
    BEGIN
      EXIT(GetDemoColorFromPostingGroup(Item."Inventory Posting Group"));
    END;

    LOCAL PROCEDURE GetDemoColorFromPostingGroup@1000000004(Value@1000000002 : Code[10]) : Text;
    VAR
      InventoryPostingGroup@1000000001 : Record 94;
      i@1000000000 : Integer;
    BEGIN
      IF InventoryPostingGroup.FINDSET THEN REPEAT
        i += 1;
      UNTIL (InventoryPostingGroup.Code = Value) OR (InventoryPostingGroup.NEXT = 0);
      CASE i OF
        1: EXIT('BurlyWood');
        2: EXIT('DeepSkyBlue');
        3: EXIT('LightGreen');
        4: EXIT('LightPink');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Item);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Item': WITH Item DO CASE ForNavOperation OF
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>Ig0AAK1X227jNhB9L9B/IPjUAq6s+6WwduE4TdbYbBLETrIo8kJLo0S7smhIlB3vU7+mH9Yv6VCW
HUmht03RvIQakTPnzJwZ0aP3z8uMrKEoU56H1NB0SiCPeJzmjyGtRPKLT9+/+/GH0WdRsBtY8UKU
F2zLKzGDImVZ+g0K8rK8OziyNVNzpLeOiZJLtoSQNp7OeHHJ1pRMeC4Kns23K3x3CuvfnlcFlKXW
CqrdTluP5oAc2baWYQb7qCQkeyQDMqkyURWAthwqPJINyHW1yNLoI2zn/CvI3bEXMR98U/cSG2wd
8Z+m5Spj2x1uCXh8R6YCluSOIetclJR02Bz4WhhX1wzHCyi5WnyBSFzykHq66aHXsxSy+B4WmLp1
GsFtkYV08uvDBhZlKqB82Gw2lpbwImdrLeLLh1Mm2MM4y8icLTIoiakbviaexT74bZ6KkM4hF0/l
VTL+lGZZugQBBSXX7BE+QPr4hBvMQAaXlvs0Fk9oMGqOqxSXjo24sBIhHct6Doi3Qv/jbMO25QUk
Yhx/qUox4THcsayCMqSiqICiOggZnbA8LuslPsj8GE2p5bpX4V2iJCX5Up6k5Lzg1WrOBcvq1KBz
w0BgzZ6aNfKT/0yvZ79LYRPS2dXNfHp5/tM0X2MWeLEl17wUKOOd658pmcboVN//0QZsD3sL/w0k
WEUl9trlB2AxFDv4O64ts9HO6ix9zJnUnmQFjg9WENm2Fbmxu2CQJKaeJI7vBsxw7EUc49qnZFez
s5A6vmZj58xQQSgsRaQWdATfwC071i4pW0lqDs/ihD/vyTSPhoT/DRCH4SKSwPKcQYPogkdMQjrL
OEPVYIt1tHSVXxdpLmZRka7w9aQqiiaqdsKirxOe8QJb7nSbs2UalY0kZiC0+hUlEkFI//rjz0NN
m5LW7HcqwO21YF7Eph3ZPeymaajI02hYJ6kvBXOXNUeZtRMeb9sakM+d4k9Yjgg2Tbe0teAnkeU7
nmF5iZG4lu45TNd9K7EgCXyd6UacBHoMVq/2TYSDPizD05y3i8BV0rlOIwmupYMXi/Wq5DZOId1G
Ybi92jeSsU1fc01Ht4yB6Xmab5i2G7QK2/iu99dfnN85X06XOJ+OVvdwZKji1pTK24MXckD0e/jz
TT03FMLepfKfhH3CC+w7HFE4kGkPBeK44Zt+3vu59zv48MARiPimHfi+GeO65rheoBumZTeL1zB2
MoDslQZUeAJ1eHm8g1QaHDUi3cPSBp6HeNzA0l3TP1rCS/5/Dgfpra8FlSYM/Q0kDTVJzLgpG9Z3
TduzfdNQ570OPRPbDJAkL1KxbSCg29sSJPRxhnNgCfJrm7CsVOj54KgeSub3GFqNe/MNDM0jDC0n
MLENbOxU13MCT1VFRVU+zD9dNF31Ce9Z6UWaw37kHUrV2tSdim/LovWfs2ip22R4rE9efxD2dmWT
K9HaNdrDzDiCU1Vl5TcKzXWCsQ2qZd7EcLoO+85Gw+4VZ7Q7rLjzTPMoq2KYsJWoL7EN2hmvigjk
fTukrSJ2blSGSimtzcPXn9V/Ee0cRNPwnWCmKlizcdji3SXaLudLTkbD7/y4efc3</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70301 ForNAV US Check
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Check;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                  COMMIT;
                  CheckSetupIsValid;
                  LoadWatermark;
                  Args.TestMandatoryFields;
                  IF CurrReport.PREVIEW THEN
                    Args."Test Print" := TRUE;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000002;;DataItem;Args              ;
               DataItemTable=Table70300;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

    { 9788;1   ;DataItem;VoidGenJnlLine      ;
               DataItemTable=Table81;
               DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Posting Date,Document No.);
               OnPreDataItem=VAR
                               TestVoidCheck@1000000000 : Codeunit 70300;
                             BEGIN
                               IF NOT TestVoidCheck.TestVoidCheck(VoidGenJnlLine, Args, CurrReport.PREVIEW) THEN
                                 CurrReport.BREAK;
                             END;

               OnAfterGetRecord=VAR
                                  CheckManagement@1000000000 : Codeunit 367;
                                BEGIN
                                  CheckManagement.VoidCheck(VoidGenJnlLine);
                                END;

               ReqFilterFields=Journal Template Name,Journal Batch Name,Posting Date }

    { 1000000001;1;DataItem;GenJnlLnBuffer   ;
               DataItemTable=Table81;
               DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Line No.);
               OnPreDataItem=BEGIN
                               CreateGenJnlLnBuffer;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT Args.CreateModelFromGenJnlLn(GenJnlLnBuffer, Model) THEN
                                    CurrReport.SKIP;
                                END;

               Temporary=Yes }

    { 1000000004;2;DataItem;Model            ;
               DataItemTable=Table70303;
               DataItemTableView=SORTING(Page No.,Part No.,Line No.);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF NOT Args.GET THEN
                     Args.INSERT;
                 END;

      OnClosePage=BEGIN
                    Args.MODIFY;
                  END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 1000000006;2;Field  ;
                  Name=BankAccount;
                  CaptionML=ENU=Bank Account;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Bank Account No.";
                  TableRelation="Bank Account";
                  OnValidate=BEGIN
                               InputBankAccount;
                             END;
                              }

      { 1000000005;2;Field  ;
                  Name=LastCheckNo;
                  CaptionML=ENU=Last Check No.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Check No." }

      { 1000000004;2;Field  ;
                  Name=OneCheckPerVendorPerDocumentNo;
                  CaptionML=ENU=One Check per Vendor per Document No.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."One Check Per Vendor";
                  MultiLine=Yes;
                  OnValidate=BEGIN
                               Args.TESTFIELD("Test Print", FALSE);
                             END;
                              }

      { 1000000003;2;Field  ;
                  Name=ReprintChecks;
                  CaptionML=ENU=Reprint Checks;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Reprint Checks" }

      { 1000000002;2;Field  ;
                  Name=TestPrinting;
                  CaptionML=ENU=Test Print;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=Args."Test Print";
                  OnValidate=BEGIN
                               Args."One Check Per Vendor" := FALSE;
                             END;
                              }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    PROCEDURE SetArgs@2(Value@1000 : Record 70300);
    BEGIN
      Args := Value;
    END;

    [External]
    PROCEDURE InputBankAccount@8();
    VAR
      BankAccount@1000000000 : Record 270;
    BEGIN
      IF Args."Bank Account No." <> '' THEN BEGIN
        BankAccount.GET(Args."Bank Account No.");
        BankAccount.TESTFIELD(Blocked,FALSE);
        BankAccount.TESTFIELD("Last Check No.");
        Args."Check No." := BankAccount."Last Check No.";
      END;
    END;

    LOCAL PROCEDURE CheckSetupIsValid@1();
    VAR
      CheckSetup@1000 : Record 70310;
    BEGIN
      WITH CheckSetup DO BEGIN
        GET;
        IF Layout = Layout::" " THEN
          FIELDERROR(Layout);
      END;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000004();
    VAR
      CheckSetup@1000000002 : Record 70310;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH CheckSetup DO BEGIN
        GET;
        CALCFIELDS(Watermark);
        IF NOT Watermark.HASVALUE THEN
          EXIT;
      Watermark.CREATEOUTSTREAM(OutStream);
      END;
      ReportForNav.Watermark.Image.Load(OutStream);
    END;

    LOCAL PROCEDURE CreateGenJnlLnBuffer@1000000000();
    VAR
      GenJnlLn@1000000000 : Record 81;
    BEGIN
      IF Args."Test Print" THEN BEGIN
        GenJnlLnBuffer.INIT;
        GenJnlLnBuffer.INSERT;
      END ELSE
        WITH GenJnlLn DO BEGIN
          COPY(VoidGenJnlLine);
          IF NOT Args."Test Print" THEN BEGIN
            SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");
            SETRANGE("Check Printed",FALSE);
          END;
          SETRANGE("Account Type","Account Type"::"Fixed Asset");
          IF FIND('-') THEN
            FIELDERROR("Account Type");
          SETRANGE("Account Type");
          IF FINDSET THEN REPEAT
            GenJnlLnBuffer := GenJnlLn;
            GenJnlLnBuffer.INSERT;
          UNTIL NEXT = 0;
        END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Args);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Model': WITH Model DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Discount Amount");
                ReportForNav.AddTotal(DataItemId,2,"Net Amount");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Discount Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Net Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
3oriSqtl0jdvCnpZTHx7q+Gb2d//Fw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70501 ForNAV API Example VAT Curr.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Faktura;
               DEU=Rechnung;
               ENU=Invoice;
               ESP=Factura;
               FIN=Lasku;
               FRA=Facture;
               ISL=Reikningur;
               ITA=Fattura;
               NLD=Factuur;
               NOR=Faktura;
               SVE=Faktura];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  GetVatCurrency;
                                  UpdateNoPrinted;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

    { 1   ;1   ;DataItem;VATCurrency         ;
               DataItemTable=Table70997;
               DataItemTableView=SORTING(Currency Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  Name=NoOfCopies;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE GetVatCurrency@1();
    VAR
      GetVATCurrencyBuffer@1000000000 : Codeunit 70012;
    BEGIN
      VATCurrency.DELETEALL;
      GetVATCurrencyBuffer.GetVatCurrency(Header, VATCurrency);
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE GetNoOfCopies@1000000006() : Integer;
    VAR
      GetNoofCopies@1000000000 : Codeunit 70007;
    BEGIN
      EXIT(NoOfCopies + GetNoofCopies.GetNoOfCopies(Header));
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70518 ForNAV Tax Purchase Templ.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Purchase Template Sales Tax;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=VAR
                  ForNAVSetup@1000000000 : Record 70000;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               DataItemTableView=SORTING(No.);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70519 ForNAV Sales Templ. Sales Tax
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Template Sales Tax;
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=VAR
                  ForNAVSetup@1000000000 : Record 70000;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetSalesTaxDetails;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1   ;1   ;DataItem;SalesTaxBuffer      ;
               DataItemTable=Table70998;
               DataItemTableView=SORTING(Primary Key);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   ReportForNavOpenDesigner := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetSalesTaxDetails@1();
    VAR
      ForNAVGetSalesTaxDetails@1000 : Codeunit 70004;
    BEGIN
      SalesTaxBuffer.DELETEALL;
      ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70525 ForNAV Reminder Template
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Rykkermeddelelse Skabelon;
               DEU=Mahnung Vorlage;
               ENU=Reminder Template;
               ESP=Recordatorio Modelo;
               FIN=Muistutus Sapluuna;
               FRA=Relance Modäle;
               ISL=InnheimtubrÇf Sni–m†t;
               ITA=Sollecito Modello;
               NLD=Aanmaning Sjabloon;
               NOR=Purring Mal;
               SVE=PÜminnelsemall];
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;Header            ;
               DataItemTable=Table297;
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  UpdateNoPrinted;
                                END;
                                 }

    { 1000000001;1;DataItem;Line             ;
               DataItemTable=Table298;
               DataItemTableView=SORTING(Reminder No.,Line No.);
               DataItemLink=Reminder No.=FIELD(No.) }

    { 1000000002;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnAfterGetRecord=BEGIN
                                  IF NOT PrintVATAmountLines THEN
                                    CurrReport.BREAK;
                                END;

               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   ReportForNavOpenDesigner := TRUE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      Language@1000000000 : Record 8;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup."Inherit Language Code" THEN
        CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateNoPrinted@1000000005();
    VAR
      ForNAVUpdateNoPrinted@1000000000 : Codeunit 70003;
    BEGIN
      ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.PREVIEW);
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Remaining Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
5M//Dw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70526 ForNAV Template - Landscape
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Skabelon horisontal;
               DEU=Vorlage Horizontal;
               ENU=Template Landscape;
               ESP=Plantilla horizontal;
               FIN=Malli vaakasuora;
               FRA=Modäle horizontal;
               ISL=Sni–m†t l†rÇtt;
               ITA=Modello orizzontale;
               NLD=Sjabloon horizontaal;
               NOR=Mal horisontal;
               SVE=Mall Landskap];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table2000000026;
               MaxIteration=1 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Integer);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70527 ForNAV Template
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Skabelon;
               DEU=Vorlage;
               ENU=Template;
               ESP=Plantilla;
               FIN=Malli;
               FRA=Modäle;
               ISL=Sni–m†t;
               ITA=Modello;
               NLD=Sjabloon;
               NOR=Mal;
               SVE=Mall];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;                  ;
               DataItemTable=Table2000000026;
               MaxIteration=1 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Integer);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
OdrzXvjtPw==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70528 ForNAV Purchase Template
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Kõbsmal;
               DEU=Vorlage kaufen;
               ENU=Purchase Template;
               ESP=Plantilla de compra;
               FIN=Ostomalli;
               FRA=Modäle d'achat;
               ISL=Kaupm†t;
               ITA=Modello di acquisto;
               NLD=Sjabloon inkoop;
               NOR=Kjõpsmal;
               SVE=Kîpmall];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := TRUE;
                 END;

    OnPreReport=VAR
                  ForNAVSetup@1000000000 : Record 70000;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table122;
               DataItemTableView=SORTING(No.);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table123;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
+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
r3HkphE3ywv3KVzF1ywK+CT8nUV/+h8=</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Report 70529 ForNAV Sales Template
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Salgsskabelon;
               DEU=Verkaufsvorlage;
               ENU=Sales Template;
               ESP=Plantilla de ventas;
               FIN=Myyntimalli;
               FRA=Modäle de vente;
               ISL=Sala sni–m†t;
               ITA=Modello di vendita;
               NLD=Sjabloon verkoop;
               NOR=Salgsmal;
               SVE=FîrsÑljningsmall];
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
                   COMMIT;
                   ReportForNavOpenDesigner := ReportForNavAllowDesign;
                 END;

    OnPreReport=VAR
                  ForNAVSetup@1000000000 : Record 70000;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  ReportForNav.GetDataItem('Header').Copies := NoOfCopies;
                  LoadWatermark;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 2   ;    ;DataItem;Header              ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  ReportForNav.PageNo := 1;
                                  ChangeLanguage("Language Code");
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;

               ReqFilterFields=No.,Posting Date;
               CalcFields=Amount Including VAT,Amount }

    { 1000000000;1;Column;HasDiscount        ;
               IncludeCaption=No;
               SourceExpr=ForNAVCheckDocumentDiscount.HasDiscount(Header) }

    { 3   ;1   ;DataItem;Line                ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000001;1;DataItem;VATAmountLine    ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               OnPreDataItem=BEGIN
                               IF NOT PrintVATAmountLines THEN
                                 CurrReport.BREAK;
                             END;

               Temporary=Yes }

    { 1000000002;1;DataItem;VATClause        ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             ESP=Opciones;
                             FIN=Vaihtoehdot;
                             FRA=Les options;
                             ISL=Valkostir;
                             ITA=Opzioni;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ] }

      { 2   ;2   ;Field     ;
                  CaptionML=[DAN=Antal kopier;
                             DEU=Anzahl Kopien;
                             ENU=No. of Copies;
                             ESP=No. de copias;
                             FIN=Kopioiden lukumÑÑrÑ;
                             FRA=Nombre de copies;
                             ISL=Fjîldi afrita;
                             ITA=Nr. di copie;
                             NLD=Aantal exemplaren;
                             NOR=Antall eksemplarer;
                             SVE=Antal kopior;
                             ESN=Nß copias];
                  SourceExpr=NoOfCopies }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ForNAVCheckDocumentDiscount@1000000000 : Codeunit 70000;
      NoOfCopies@1000 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.2.0.1579, Version=3.2.0.1579, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ChangeLanguage@1000000002(LanguageCode@1000000001 : Code[10]);
    VAR
      Language@1000000000 : Record 8;
    BEGIN
      CurrReport.LANGUAGE(Language.GetLanguageID(LanguageCode));
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;

    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;

    LOCAL PROCEDURE PrintVATAmountLines@1000000003() : Boolean;
    VAR
      ForNAVSetup@1000000000 : Record 70000;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CASE "VAT Report Type" OF
          "VAT Report Type"::Always:
            EXIT(TRUE);
          "VAT Report Type"::"Multiple Lines":
            EXIT(VATAmountLine.COUNT > 1);
          "VAT Report Type"::Never:
            EXIT(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        IF NOT PrintLogo(ForNAVSetup) THEN
          EXIT;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;

    PROCEDURE PrintLogo@1000000004(ForNAVSetup@1000000000 : Record 70000) : Boolean;
    BEGIN
      IF NOT ForNAVSetup."Use Preprinted Paper" THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'PDF' THEN
        EXIT(TRUE);
      IF ReportForNav.PrinterSettings.PrintTo = 'Preview' THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      IF GUIALLOWED THEN BEGIN
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      PdfFile.CREATETEMPFILE;
      REPORT.SAVEASPDF(ReportForNav.ReportID, PdfFile.NAME + '.pdf', Header);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME + '.pdf') THEN BEGIN
        DOWNLOAD(PdfFile.NAME + '.pdf', '', '', '', FileName);
        ERASE(PdfFile.NAME + '.pdf');
      END;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000 : Text;SectionId@1001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000 : Text;Parameters@1001 : Text;ServerFileName@1002 : Text);
    VAR
      ServerFile@1003 : File;
      ServerInStream@1004 : InStream;
      Filter@1005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000 : Text;Parameter@1001 : Text;ParameterNo@1002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1001 : Boolean);
    VAR
      ClientFileName@1002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000 : Text;Operation@1001 : Text;GroupTotalFieldNo@1002 : Integer);
    VAR
      CurrRecRef@1003 : RecordRef;
      NextRecRef@1004 : RecordRef;
      CurrKeyRef@1005 : KeyRef;
      NextKeyRef@1006 : KeyRef;
      FieldIndex@1007 : Integer;
      GroupFieldIndex@1008 : Integer;
      ForNavOperation@1009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"VAT %");
                ReportForNav.AddTotal(DataItemId,1,"Line Amount");
                ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,3,"VAT Base");
              END;
           'Restore': BEGIN
                 "VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns="http://schemas.microsoft.com/sqlserver/reporting/2016/01/reportdefinition" xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner">
  <Description>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
rLIbyrPd2T5O//A/</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
</Report>
    END_OF_RDLDATA
  }
}

OBJECT Codeunit 70000 ForNAV Check Document Discount
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE HasDiscount@1000000001(Rec@1000000000 : Variant) : Boolean;
    VAR
      RecRefLib@1000000002 : Codeunit 70090;
      TestValidDociFace@1000000003 : Codeunit 70080;
      RecRef@1000000001 : RecordRef;
    BEGIN
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      EXIT(CheckLinesTableForDiscount(RecRef, FindDiscountFieldNoInLines(RecRef)));
    END;

    LOCAL PROCEDURE FindDiscountFieldNoInLines@1000000009(RecRef@1000000001 : RecordRef) : Integer;
    VAR
      Field@1000000000 : Record 2000000041;
      NoDiscountFieldErr@1000000002 : TextConst 'ENU=The connected line table does not contain a valid field for Line Discount.';
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER + 1);
      Field.SETRANGE(FieldName, 'Line Discount %');
      IF NOT Field.FINDFIRST THEN
        ERROR(NoDiscountFieldErr);

      EXIT(Field."No.");
    END;

    LOCAL PROCEDURE CheckLinesTableForDiscount@1000000011(VAR RecRef@1000000000 : RecordRef;FieldNo@1000000001 : Integer) : Boolean;
    VAR
      RecRefLib@1000000004 : Codeunit 70090;
      LineRec@1000000003 : RecordRef;
      FldRef@1000000002 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterFieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterFieldNo(RecRef, LineRec, FldRef, 'Document Type');

      FldRef := LineRec.FIELD(FieldNo);
      FldRef.SETFILTER('<>0');
      EXIT(NOT LineRec.ISEMPTY);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70001 ForNAV Get Vat Amount Lines
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetVatAmountLines@1000000000(Rec@1000000000 : Variant;VAR VATAmountLine@1000000001 : TEMPORARY Record 290);
    VAR
      DocLineBuffer@1000000006 : TEMPORARY Record 70999;
      RecRefLib@1000000002 : Codeunit 70090;
      TestValidDociFace@1000000004 : Codeunit 70080;
      RecRef@1000000003 : RecordRef;
      LineRec@1000000005 : RecordRef;
    BEGIN
      ThrowErrorIfNotTemp(VATAmountLine);
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      FindLinesRecRef(DocLineBuffer, RecRef, LineRec);
      CreateVATAmountLine(DocLineBuffer, VATAmountLine);
    END;

    LOCAL PROCEDURE ThrowErrorIfNotTemp@1000000001(VAR VATAmountLine@1000000000 : Record 290);
    VAR
      CheckTemporary@1000000002 : Codeunit 70008;
    BEGIN
      CheckTemporary.IsTemporary(VATAmountLine, TRUE);
    END;

    LOCAL PROCEDURE FindLinesRecRef@1000000003(VAR DocLineBuffer@1000000004 : Record 70999;VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000001 : RecordRef);
    VAR
      RecRefLib@1000000002 : Codeunit 70090;
      FldRef@1000000003 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterFieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterFieldNo(RecRef, LineRec, FldRef, 'Document Type');
      IF LineRec.FINDSET THEN REPEAT
        DocLineBuffer.CreateForRecRef(LineRec);
      UNTIL LineRec.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateVATAmountLine@1000000002(VAR DocLineBuffer@1000000001 : Record 70999;VAR VATAmountLine@1000000000 : Record 290);
    BEGIN
      WITH DocLineBuffer DO
        IF FINDSET THEN REPEAT
          VATAmountLine.INIT;
          VATAmountLine."VAT Identifier" := "VAT Identifier";
          VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
          VATAmountLine."Tax Group Code" := "Tax Group Code";
          VATAmountLine."VAT %" := "VAT %";
          VATAmountLine."VAT Base" := Amount;
          VATAmountLine."Amount Including VAT" := "Amount Including VAT";
          VATAmountLine."Line Amount" := "Line Amount";
          IF "Allow Invoice Disc." THEN
            VATAmountLine."Inv. Disc. Base Amount" := "Line Amount";
          VATAmountLine."Invoice Discount Amount" := "Inv. Discount Amount";
          VATAmountLine."VAT Clause Code" := "VAT Clause Code";
          IF ("VAT %" <> 0) OR ("VAT Clause Code" <> '') OR (Amount <> "Amount Including VAT") THEN
            VATAmountLine.InsertLine;
        UNTIL NEXT = 0;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70002 ForNAV Get Vat Clause
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TryGetVATClause@1000000000 : Integer;

    PROCEDURE GetVATClauses@1000000000(VAR VATAmountLine@1000000001 : TEMPORARY Record 290;VAR VATClause@1000000000 : Record 560;LanguageCode@1000000002 : Code[10]);
    BEGIN
      WITH VATAmountLine DO
        IF FINDSET THEN REPEAT
          TryGetVATClauseText(VATClause, "VAT Clause Code", LanguageCode);
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE TryGetVATClauseText@1000000002(VAR VATClausePar@1000000000 : Record 560;VATClauseCode@1000000002 : Code[20];LanguageCode@1000000003 : Code[10]);
    VAR
      VATClause@1000000001 : Record 560;
    BEGIN
      IF NOT VATClause.GET(VATClauseCode) THEN
        EXIT;

      VATClause.TranslateDescription(LanguageCode);

      VATClausePar := VATClause;
      IF VATClausePar.INSERT THEN;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70003 ForNAV Update No. Printed
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    Permissions=TableData 36=rm,
                TableData 38=rm,
                TableData 110=rm,
                TableData 112=rm,
                TableData 114=rm,
                TableData 120=rm,
                TableData 122=rm,
                TableData 124=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE UpdateNoPrinted@1000000001(Rec@1000000000 : Variant;Preview@1000 : Boolean);
    VAR
      RecRefLib@1000000003 : Codeunit 70090;
      RecRef@1000000001 : RecordRef;
    BEGIN
      IF Preview THEN
        EXIT;

      RecRefLib.ConvertToRecRef(Rec, RecRef);
      FindAndUpdateField(RecRef);
    END;

    LOCAL PROCEDURE FindAndUpdateField@1000000003(VAR RecRef@1000000000 : RecordRef);
    VAR
      Field@1000000001 : Record 2000000041;
      FldRef@1000000003 : FieldRef;
      NoPrinted@1000000004 : Integer;
      NotAValidTableErr@1000 : TextConst 'ENU=This table is not valid to be used with the Update No. Printed Function. Please contact your system administrator or ForNAV support.';
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, 'No. Printed');
      IF NOT Field.FINDFIRST THEN
        ERROR(NotAValidTableErr);

      FldRef := RecRef.FIELD(Field."No.");
      NoPrinted := FldRef.VALUE;
      NoPrinted +=1;
      FldRef.VALUE := NoPrinted;
      RecRef.MODIFY;
      COMMIT;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70004 ForNAV Get Sales Tax Details
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetSalesTax@1000000000(Rec@1000000000 : Variant;VAR SalesTaxBuffer@1000000001 : TEMPORARY Record 70998);
    VAR
      DocLineBuffer@1000000006 : TEMPORARY Record 70999;
      RecRefLib@1000000002 : Codeunit 70090;
      TestValidDociFace@1000000004 : Codeunit 70080;
      RecRef@1000000003 : RecordRef;
      LineRec@1000000005 : RecordRef;
    BEGIN
      ThrowErrorIfNotTemp(SalesTaxBuffer);
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      FindLinesRecRef(DocLineBuffer, RecRef, LineRec);
      CreateSalesTaxDetails(DocLineBuffer, SalesTaxBuffer);
    END;

    LOCAL PROCEDURE ThrowErrorIfNotTemp@1000000001(VAR SalesTaxBuffer@1000000000 : Record 70998);
    VAR
      CheckTemporary@1000000001 : Codeunit 70008;
    BEGIN
      CheckTemporary.IsTemporary(SalesTaxBuffer, TRUE);
    END;

    LOCAL PROCEDURE FindLinesRecRef@1000000003(VAR DocLineBuffer@1000000004 : Record 70999;VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000001 : RecordRef);
    VAR
      RecRefLib@1000000002 : Codeunit 70090;
      FldRef@1000000003 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterFieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterFieldNo(RecRef, LineRec, FldRef, 'Document Type');
      IF LineRec.FINDSET THEN REPEAT
        DocLineBuffer.CreateForRecRef(LineRec);
      UNTIL LineRec.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateSalesTaxDetails@1000000002(VAR DocLineBuffer@1000000001 : Record 70999;VAR SalesTaxBuffer@1000000000 : Record 70998);
    BEGIN
      SalesTaxBuffer.INIT;
      SalesTaxBuffer.INSERT;

      WITH DocLineBuffer DO
        IF FINDSET THEN REPEAT
          IF "VAT %" = 0 THEN
            SalesTaxBuffer."Exempt Amount" := SalesTaxBuffer."Exempt Amount" + Amount
          ELSE
            SalesTaxBuffer."Taxable Amount" := SalesTaxBuffer."Taxable Amount" + Amount;
          SalesTaxBuffer.MODIFY;
        UNTIL NEXT = 0;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70005 ForNAV Is Sales Tax
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CheckIsSalesTax@1() : Boolean;
    VAR
      AllObjWithCaption@1001 : Record 2000000058;
    BEGIN
      WITH AllObjWithCaption DO BEGIN
        SETRANGE("Object Type", "Object Type"::Table);
        SETRANGE("Object ID", 10000);
        EXIT(NOT ISEMPTY);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 70006 ForNAV Read Watermarks
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ReadFromFile@1(VAR ForNAVSetup@1004 : Record 70000;Which@1003 : Integer) : Boolean;
    VAR
      TempBlob@1002 : TEMPORARY Record 99008535;
      FileName@1000 : Text;
      InStream@1000000000 : InStream;
      OutStream@1000000001 : OutStream;
    BEGIN
      UPLOADINTOSTREAM('Select a file', '', 'PDF files (*.pdf)|*.pdf|All files (*.*)|*.*', FileName, InStream);
      TempBlob.Blob.CREATEOUTSTREAM(OutStream);
      COPYSTREAM(OutStream, InStream);

      WITH ForNAVSetup DO
        IF FileName <> '' THEN BEGIN
          CASE Which OF
            FIELDNO(Logo):
              BEGIN
                Logo := TempBlob.Blob;
                "Logo File Name" := GetFileNameFromFile(FileName);
              END;
            FIELDNO("Document Watermark"):
              BEGIN
               "Document Watermark" := TempBlob.Blob;
                "Document Watermark File Name" := GetFileNameFromFile(FileName);
              END;
            FIELDNO("List Report Watermark"):
              BEGIN
                "List Report Watermark" := TempBlob.Blob;
                "List Report Watermark File N." := GetFileNameFromFile(FileName);
              END;
          END;
          EXIT(TRUE);
        END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetFileNameFromFile@3(Value@1000 : Text) : Text;
    VAR
      LastPos@1001 : Integer;
      i@1002 : Integer;
    BEGIN
      WHILE i < STRLEN(Value) DO BEGIN
        i := i + 1;
        IF Value[i] = '\' THEN
          LastPos := i;
      END;

      EXIT(COPYSTR(Value, LastPos + 1));
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70007 ForNAV Get No. of Copies
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetNoOfCopies@1000000001(Rec@1000000000 : Variant) : Integer;
    VAR
      RecRefLib@1000000003 : Codeunit 70090;
      TestValidDociFace@1000000002 : Codeunit 70080;
      RecRef@1000000001 : RecordRef;
    BEGIN
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      IF NOT TestValidDociFace.CheckValid(RecRef) THEN
        EXIT(0);

      EXIT(FindNoOfCopiesFromBillToCustomerNo(RecRef));
    END;

    LOCAL PROCEDURE FindNoOfCopiesFromBillToCustomerNo@1000000003(VAR RecRef@1000000000 : RecordRef) : Integer;
    VAR
      Customer@1000000002 : Record 18;
      Field@1000000001 : Record 2000000041;
      FldRef@1000000003 : FieldRef;
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, 'Bill-to Customer No.');
      IF NOT Field.FINDFIRST THEN
        EXIT(0);

      FldRef := RecRef.FIELD(Field."No.");
      Customer.GET(FldRef.VALUE);
      EXIT(Customer."Invoice Copies");
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70008 ForNAV Check Temporary
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE IsTemporary@1000000001(Rec@1000000001 : Variant;ThrowError@1000000000 : Boolean) : Boolean;
    VAR
      RecRef@1000000002 : RecordRef;
      RecordRefLibrary@1000000003 : Codeunit 70090;
      RecordShouldBeTempErr@1000000004 : TextConst 'ENU=The Record Variable (%1) must be temporary when callng this API.';
    BEGIN
      RecordRefLibrary.ConvertToRecRef(Rec, RecRef);
      IF RecRef.ISTEMPORARY THEN
        EXIT(FALSE);

      IF ThrowError THEN
        ERROR(RecordShouldBeTempErr, RecRef.NAME);

      EXIT(TRUE);
    END;

    BEGIN
    {
      We use this codeunit because ReportsForNAV is backwards compatible with NAV 2015. This version does not support ISTEMPORARY on record variables
    }
    END.
  }
}

OBJECT Codeunit 70009 ForNAV First Time Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            IF CheckIfSetupExists THEN
              EXIT;

            AskForDefault;
            RunWizardIfSetupDoesNotExist;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE CheckIfSetupExists@2() : Boolean;
    VAR
      Setup@1000 : Record 70000;
    BEGIN
      EXIT(Setup.GET);
    END;

    LOCAL PROCEDURE AskForDefault@3();
    VAR
      SetDefaultsQst@1000 : TextConst 'CSY=Viltu setja upp ForNAV me? sj†lfgefnum gildum?;DAN=Voulez-vous configurer ForNAV avec les valeurs par dÇfaut?;ENU=Do you want to setup ForNAV with default values?;ESP=Mîchten Sie ForNAV mit Standardwerten einrichten?;FIN=Vuoi impostare ForNAV con valori predefiniti?;FRA=Vil du opsëtte ForNAV med standardvërdier?;ISL=Vil du sette opp ForNAV med standardverdier?;ITA=Haluatko mÑÑrittÑÑ ForNAV: n oletusarvot?;NLD=®Desea configurar ForNAV con valores predeterminados?;NOR=Wilt u ForNAV instellen met standaardwaarden?;SVE=Vill du stÑlla in ForNAV med standardvÑrden?';
      Setup@1001 : Record 70000;
      CheckSetup@1000000000 : Record 70310;
    BEGIN
      IF NOT CONFIRM(SetDefaultsQst, TRUE) THEN
        EXIT;

      Setup.InitSetup;
      Setup.CreateWebService;
      Setup.ReplaceReportSelection(TRUE);
      CheckSetup.InitSetup;
      CheckSetup.SetDefault(Setup);
      COMMIT;
    END;

    LOCAL PROCEDURE RunWizardIfSetupDoesNotExist@4();
    VAR
      Setup@1000 : Record 70000;
      SetupWizard@1000000000 : Page 70005;
    BEGIN
      IF Setup.GET THEN
        EXIT;

      SetupWizard.RUNMODAL;

      IF Setup.GET THEN
        COMMIT;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70010 ForNAV Check Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    TableNo=70000;
    OnRun=VAR
            CheckSetup@1000000000 : Record 70310;
          BEGIN
            CreateCheckSetupRecord(CheckSetup);
            SetCheckType(Rec, CheckSetup);
          END;

  }
  CODE
  {

    PROCEDURE CreateCheckSetupRecord@1000000001(VAR CheckSetup@1000000000 : Record 70310);
    BEGIN
      CheckSetup.InitSetup;
    END;

    PROCEDURE SetCheckType@1000000002(Setup@1000000001 : Record 70000;VAR CheckSetup@1000000000 : Record 70310);
    BEGIN
      WITH Setup DO BEGIN
        CASE "VAT Report Type" OF
          "VAT Report Type"::"N/A. (Sales Tax)":
            IF CheckSetup.Layout = CheckSetup.Layout::" " THEN
              CheckSetup.VALIDATE(Layout, CheckSetup.Layout::"Check-Stub-Stub");
          ELSE
            CheckSetup.VALIDATE(Layout, CheckSetup.Layout::" ");
        END;

        CheckSetup.MODIFY;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2018 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70011 ForNAV Create Web Services
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CreateWebService;
          END;

  }
  CODE
  {

    LOCAL PROCEDURE CreateWebService@1000000000();
    VAR
      TempWebService@1000000004 : TEMPORARY Record 70002;
      RecRef@1000000000 : RecordRef;
      FldRef@1000000001 : FieldRef;
    BEGIN
      CreateTempWebService(TempWebService);

      RecRef.OPEN(GetObjectID);

      WITH TempWebService DO BEGIN
        FINDSET;
        REPEAT
          FldRef := RecRef.FIELD(FIELDNO("Object Type"));
          FldRef.VALUE := "Object Type";

          FldRef := RecRef.FIELD(FIELDNO("Object ID"));
          FldRef.VALUE := "Object ID";

          FldRef := RecRef.FIELD(FIELDNO("Service Name"));
          FldRef.VALUE := "Service Name";
          FldRef.VALIDATE;

          IF NOT RecRef.INSERT THEN
            EXIT;

          FldRef := RecRef.FIELD(FIELDNO(Published));
          FldRef.VALIDATE(TRUE);

          RecRef.MODIFY;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetObjectID@1000000001() : Integer;
    VAR
      AllObjWithCaption@1000000000 : Record 2000000058;
    BEGIN
      WITH AllObjWithCaption DO BEGIN
        SETRANGE("Object Type", "Object Type"::Table);
        SETRANGE("Object ID", 2000000168);
        IF NOT ISEMPTY THEN
          EXIT(2000000168);
      END;

      EXIT(2000000076);
    END;

    LOCAL PROCEDURE CreateTempWebService@1000000004(VAR WebService@1000000000 : Record 70002);
    BEGIN
      WebService."Object Type" := WebService."Object Type"::Page;
      WebService."Object ID" := PAGE::Fields;
      WebService."Service Name" := 'Fields';
      WebService.INSERT;

      WebService."Object Type" := WebService."Object Type"::Page;
      WebService."Object ID" := PAGE::"ForNAV Fields Webservice";
      WebService."Service Name" := 'FieldsEx';
      WebService.INSERT;

      IF NOT IsCloud THEN
        EXIT;

      WebService."Object Type" := WebService."Object Type"::Codeunit;
      WebService."Object ID" := ObjectIDForCloudWS;
      WebService."Service Name" := 'ForNavBc';
      WebService.INSERT;
    END;

    LOCAL PROCEDURE IsCloud@1() : Boolean;
    VAR
      AllObj@1000 : Record 2000000038;
    BEGIN
      WITH AllObj DO BEGIN
        SETRANGE("Object Type", AllObj."Object Type"::Codeunit);
        SETRANGE("Object ID", ObjectIDForCloudWS);
        EXIT(NOT ISEMPTY);
      END;
    END;

    LOCAL PROCEDURE ObjectIDForCloudWS@2() : Integer;
    BEGIN
      EXIT(6189102);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 70012 ForNAV Get VAT Currency Buffer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetVatCurrency@1000000000(Rec@1000000000 : Variant;VAR VATCurrency@1000000001 : TEMPORARY Record 70997);
    VAR
      DocLineBuffer@1000000006 : TEMPORARY Record 70999;
      RecRefLib@1000000002 : Codeunit 70090;
      TestValidDociFace@1000000004 : Codeunit 70080;
      RecRef@1000000003 : RecordRef;
      LineRec@1000000005 : RecordRef;
    BEGIN
      ThrowErrorIfNotTemp(VATCurrency);
      RecRefLib.ConvertToRecRef(Rec, RecRef);
      IF NOT IsValid(GetCurrencyCode(RecRef)) THEN
        EXIT;

      TestValidDociFace.ThrowErrorIfNotValid(RecRef);
      FindLinesRecRef(DocLineBuffer, RecRef, LineRec);
      CreateVATAmountLine(DocLineBuffer, VATCurrency, GetPostingDate(RecRef), GetCurrencyCode(RecRef), GetCurrencyFactor(RecRef));
    END;

    LOCAL PROCEDURE IsValid@1(CurrencyCode@1001 : Code[10]) : Boolean;
    VAR
      GLSetup@1000 : Record 98;
    BEGIN
      GLSetup.GET;
      IF (NOT GLSetup."Print VAT specification in LCY") OR
         (CurrencyCode = '')
      THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ThrowErrorIfNotTemp@1000000001(VAR VATCurrency@1000000000 : Record 70997);
    VAR
      CheckTemporary@1000000002 : Codeunit 70008;
    BEGIN
      CheckTemporary.IsTemporary(VATCurrency, TRUE);
    END;

    LOCAL PROCEDURE FindLinesRecRef@1000000003(VAR DocLineBuffer@1000000004 : Record 70999;VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000001 : RecordRef);
    VAR
      RecRefLib@1000000002 : Codeunit 70090;
      FldRef@1000000003 : FieldRef;
    BEGIN
      LineRec.OPEN(RecRef.NUMBER + 1);

      RecRefLib.FindAndFilterFieldNo(RecRef, LineRec, FldRef, 'No.');
      RecRefLib.FindAndFilterFieldNo(RecRef, LineRec, FldRef, 'Document Type');
      IF LineRec.FINDSET THEN REPEAT
        DocLineBuffer.CreateForRecRef(LineRec);
      UNTIL LineRec.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateVATAmountLine@1000000002(VAR DocLineBuffer@1000000001 : Record 70999;VAR VATCurrency@1000000000 : Record 70997;PostingDate@1001 : Date;CurrencyCode@1002 : Code[10];CurrencyFactor@1003 : Decimal);
    VAR
      CurrExchRate@1000 : Record 330;
    BEGIN
      WITH DocLineBuffer DO
        IF FINDSET THEN REPEAT
          VATCurrency.INIT;
          VATCurrency."VAT Identifier" := "VAT Identifier";
          VATCurrency."VAT %" := "VAT %";
          VATCurrency."VAT Base Amount" := CurrExchRate.ExchangeAmtFCYToLCY(PostingDate,CurrencyCode, Amount, CurrencyFactor);
          VATCurrency."VAT Amount" := CurrExchRate.ExchangeAmtFCYToLCY(PostingDate,CurrencyCode, "Amount Including VAT" - Amount, CurrencyFactor);
          VATCurrency."Currency Factor" := CurrencyFactor;
          VATCurrency.InsertLine;
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE GetCurrencyCode@3(VAR RecRef@1000 : RecordRef) : Code[10];
    VAR
      Field@1003 : Record 2000000041;
      FldRef@1002 : FieldRef;
      NoPrinted@1001 : Integer;
      NotAValidTableErr@1004 : TextConst 'ENU=This table is not valid to be used with the Update No. Printed Function. Please contact your system administrator or ForNAV support.';
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, 'Currency Code');
      IF NOT Field.FINDFIRST THEN
        ERROR(NotAValidTableErr);

      FldRef := RecRef.FIELD(Field."No.");
      EXIT(FldRef.VALUE);
    END;

    LOCAL PROCEDURE GetPostingDate@4(VAR RecRef@1000 : RecordRef) : Date;
    VAR
      NotAValidTableErr@1002 : TextConst 'ENU=This table is not valid to be used with the Update No. Printed Function. Please contact your system administrator or ForNAV support.';
      Field@1005 : Record 2000000041;
      FldRef@1004 : FieldRef;
      NoPrinted@1003 : Integer;
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, 'Posting Date');
      IF NOT Field.FINDFIRST THEN
        ERROR(NotAValidTableErr);

      FldRef := RecRef.FIELD(Field."No.");
      EXIT(FldRef.VALUE);
    END;

    LOCAL PROCEDURE GetCurrencyFactor@2(VAR RecRef@1000 : RecordRef) : Decimal;
    VAR
      Field@1003 : Record 2000000041;
      FldRef@1002 : FieldRef;
      NoPrinted@1001 : Integer;
      NotAValidTableErr@1004 : TextConst 'ENU=This table is not valid to be used with the Update No. Printed Function. Please contact your system administrator or ForNAV support.';
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, 'Currency Factor');
      IF NOT Field.FINDFIRST THEN
        ERROR(NotAValidTableErr);

      FldRef := RecRef.FIELD(Field."No.");
      EXIT(FldRef.VALUE);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70013 ForNAV Check Design Allowed
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE DesignIsAllowed@2() : Boolean;
    VAR
      ReportLayoutSelection@1000 : Record 9651;
    BEGIN
      EXIT(ReportLayoutSelection.WRITEPERMISSION);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 70014 ForNAV Download Designer
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            HYPERLINK('http://www.fornav.com/report-watermarks/');
          END;

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Codeunit 70015 ForNAV Assisted Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Table,1808,OnRegisterAssistedSetup)]
    LOCAL PROCEDURE AddForNAVWizard@2(VAR TempAggregatedAssistedSetup@1000 : TEMPORARY Record 1808);
    VAR
      ForNAVSetup@1001 : Record 70000;
    BEGIN
      WITH TempAggregatedAssistedSetup DO
        AddExtensionAssistedSetup(PAGE::"ForNAV Setup Wizard", ForNAVSetup.TABLECAPTION, TRUE, ForNAVSetup.RECORDID, GetSetupStatus, '');
    END;

    [EventSubscriber(Table,1808,OnUpdateAssistedSetupStatus)]
    LOCAL PROCEDURE UpdateForNAVSetupStatus@3(VAR TempAggregatedAssistedSetup@1000 : TEMPORARY Record 1808);
    BEGIN
      WITH TempAggregatedAssistedSetup DO
        Status := GetSetupStatus;
    END;

    LOCAL PROCEDURE GetSetupStatus@4() : Integer;
    VAR
      AggregatedAssistedSetup@1000 : TEMPORARY Record 1808;
      ForNAVSetup@1001 : Record 70000;
    BEGIN
      WITH AggregatedAssistedSetup DO BEGIN
        IF ForNAVSetup.ISEMPTY THEN
          EXIT(Status::"Not Started");

        EXIT(Status::Completed);
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 70016 ForNAV Replace Reports
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Codeunit,44,OnAfterSubstituteReport)]
    LOCAL PROCEDURE ForNAVReplaceReports@2(ReportId@1000 : Integer;VAR NewReportId@1001 : Integer);
    VAR
      ReportReplacement@1002 : Record 70016;
    BEGIN
      IF ReportReplacement.GET(ReportId, USERID) THEN BEGIN
        NewReportId := ReportReplacement."Replace-With Report ID";
        EXIT;
      END;

      IF ReportReplacement.GET(ReportId) THEN BEGIN
        NewReportId := ReportReplacement."Replace-With Report ID";
        EXIT;
      END;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 70019 ForNAV Notifications
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            ShowSetupNotification; // Test Framework...
          END;

  }
  CODE
  {

    [EventSubscriber(Codeunit,2000000005,GetPrinterName,"",Skip,Skip)]
    LOCAL PROCEDURE OnFindPrinter@2(ReportID@1000 : Integer;VAR PrinterName@1001 : Text[250]);
    BEGIN
      ShowSetupNotification;
    END;

    LOCAL PROCEDURE ShowSetupNotification@1();
    VAR
      MyNotifications@1006 : Record 1518;
      ForNAVSetup@1001 : Record 70000;
      NotificationIDs@1004 : Codeunit 70022;
      MyNotification@1000 : Notification;
      ForNAVNotSetup@1002 : TextConst 'CSY=ForNAV er uppsett en ekki uppsetning. Viltu gera ?etta n£na?;DAN=ForNAV est installÇ mais pas configurÇ. Voulez-vous faire cela maintenant?;ENU=ForNAV is installed but not setup. Do you want to do this now?;ESP=ForNAV ist installiert, aber nicht eingerichtet. Willst du das jetzt machen?;FIN=ForNAV ä installato ma non configurato. Vuoi farlo ora?;FRA=ForNAV er installeret, men ikke konfigureret. ùnsker du at gõre det nu?;ISL=ForNAV er installert, men ikke oppsett. Vil du gjõre dette nÜ?;ITA=ForNAV on asennettu mutta ei asetettu. Haluatko tehdÑ tÑmÑn nyt?;NLD=ForNAV est† instalado pero no configurado. ®Quieres hacer esto ahora?;NOR=ForNAV is geãnstalleerd, maar niet ingesteld. Wil je dit nu doen?;SVE=ForNAV Ñr installerat men inte setup. Vill du gîra det nu?';
      Yes@1003 : TextConst 'CSY=J†;DAN=Oui;ENU=Yes;ESP=Ja;FIN=Sç;FRA=Ja;ISL=Ja;ITA=Joo;NLD=S°;NOR=Ja;SVE=Ja';
      NoAndDontAskAgain@1005 : TextConst 'CSY=Nei, og vinsamlegast ekki spyrja mig aftur.;DAN=Non, et s''il vous plaåt ne me demandez plus.;ENU=No, and please don''t remind me again.;ESP=Nein, und bitte frag mich nicht noch einmal.;FIN=No, e per favore non chiedermelo pió.;FRA=Nej, og lad mig ikke sporge mig igen.;ISL=Nei, og vër sÜ snill Ü ikke sporre meg igjen.;ITA=Ei, ÑlÑkÑ kysy minulta uudelleen.;NLD=No, y por favor no me vuelvas a preguntar.;NOR=Nee, en vraag me alsjeblieft niet nog een keer.;SVE=Nej, och frÜga mig inte igen.';
    BEGIN
      IF ForNAVSetup.GET THEN
        EXIT;

      IF NOT MyNotifications.IsEnabled(NotificationIDs.SetupForNAV) THEN
        EXIT;

      MyNotification.ID := NotificationIDs.SetupForNAV;
      MyNotification.MESSAGE := ForNAVNotSetup;
      MyNotification.ADDACTION(Yes, CODEUNIT::"ForNAV Notification Actions", 'SetupForNAV');
      MyNotification.ADDACTION(NoAndDontAskAgain, CODEUNIT::"ForNAV Notification Actions", 'DisableSetup');
      MyNotification.SEND;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70020 ForNAV Notification Actions
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE SetupForNAV@2(VAR MyNotification@1000 : Notification);
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");
    END;

    PROCEDURE DisableSetup@1(VAR MyNotification@1000 : Notification);
    VAR
      MyNotifications@1001 : Record 1518;
      NotificationID@1002 : GUID;
    BEGIN
      MyNotifications.LOCKTABLE;
      NotificationID := MyNotification.ID;
      IF MyNotifications.GET(USERID, NotificationID) THEN BEGIN
        MyNotifications.Enabled := FALSE;
        MyNotifications.MODIFY;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70021 ForNAV Initialize Notification
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState,"",Skip,Skip)]
    LOCAL PROCEDURE OnInitializingNotificationWithDefaultState@2();
    VAR
      MyNotifications@1000 : Record 1518;
      SetupForNAVTxt@1001 : TextConst 'ENU=Ask to setup ForNAV.';
      SetupForNAVDescriptionTxt@1002 : TextConst 'ENU=If you have ForNAV installed but don''t want to use it, switch off receiving the notification.';
      NotificationIDs@1003 : Codeunit 70022;
    BEGIN
      MyNotifications.InsertDefaultWithTableNum(NotificationIDs.SetupForNAV,
        SetupForNAVTxt,
        SetupForNAVDescriptionTxt,
        DATABASE::"ForNAV Setup");
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70022 ForNAV Notification IDs
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE SetupForNAV@2() : Text;
    BEGIN
      EXIT('cf8edf36-45c2-44c9-8367-cac5748bd597');
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70029 ForNAV Replace Report Sel.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=VAR
            Dlg@1000000000 : Dialog;
          BEGIN
            Dlg.OPEN('#1#####################################');
            Dlg.UPDATE(1, 'Create Object Buffer');

            CreateBuffer;

            ReplaceSalesOrderConfirmation;                          Dlg.UPDATE(1, 'Sales Order Confirmation');
            ReplaceSalesInvoice;                                    Dlg.UPDATE(1, 'Sales Invoice');
            ReplaceSalesCreditMemo;                                 Dlg.UPDATE(1, 'Sales Credit Memo');
            ReplaceSalesShipment;                                   Dlg.UPDATE(1, 'Sales Shipment');
            ReplaceSalesQuote;                                      Dlg.UPDATE(1, 'Sales Quote');
            ReplacePurchaseOrder;                                   Dlg.UPDATE(1, 'Purchase Order');
            ReplacePurchaseInvoice;                                 Dlg.UPDATE(1, 'Purchase Invoice');
            ReplacePurchaseQuote;                                   Dlg.UPDATE(1, 'Purchase Quote');
            ReplacePurchaseCreditMemo;                              Dlg.UPDATE(1, 'Purchase Credit Memo');
            ReplaceCheck;                                           Dlg.UPDATE(1, 'Check');
            ReplaceStatement;                                       Dlg.UPDATE(1, 'Statement');
            ReplaceReminder;                                        Dlg.UPDATE(1, 'Reminder');
            ReplaceReminderTest;                                    Dlg.UPDATE(1, 'Reminder Test');
            ReplaceFinanceChargeMemo;                               Dlg.UPDATE(1, 'Finance Charge Memo');
            ReplaceFinanceChargeMemoTest;                           Dlg.UPDATE(1, 'Finance Charge Memo Test');
          END;

  }
  CODE
  {
    VAR
      Object@1000000000 : TEMPORARY Record 70003;

    LOCAL PROCEDURE ReplaceSalesOrderConfirmation@1000000001();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Order");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Order";
        Sequence := '1';
        "Report ID" := FindReportID('Order Confirmation', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesInvoice@1000000000();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Invoice");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Invoice";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Invoice', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesCreditMemo@1000000002();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Cr.Memo");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Cr.Memo";
        Sequence := '1';
        "Report ID" := FindReportID('Credit Memo', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesShipment@1000000009();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Shipment");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Shipment";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Shipment', '');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceSalesQuote@1000000008();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"S.Quote");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"S.Quote";
        Sequence := '1';
        "Report ID" := FindReportID('Sales Quote', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseOrder@1000000005();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Order");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Order";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Order', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseQuote@1000000010();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Quote");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Quote";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Quote', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseInvoice@1000000003();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Invoice");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Invoice";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Invoice', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplacePurchaseCreditMemo@1000000007();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"P.Cr.Memo");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"P.Cr.Memo";
        Sequence := '1';
        "Report ID" := FindReportID('Purchase Cr. Memo', GetPrefix);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceCheck@1000000011();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"B.Check");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"B.Check";
        Sequence := '1';
        "Report ID" := FindReportID('US Check', '');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceStatement@1000000012();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"C.Statement");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"C.Statement";
        Sequence := '1';
        "Report ID" := FindReportID('Statement', '');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceReminder@1000000006();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::Reminder);
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::Reminder;
        Sequence := '1';
        "Report ID" := FindReportID('Reminder', '');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceReminderTest@2();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"Rem.Test");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"Rem.Test";
        Sequence := '1';
        "Report ID" := FindReportID('Reminder Test', '');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceFinanceChargeMemo@3();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"Fin.Charge");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"Fin.Charge";
        Sequence := '1';
        "Report ID" := FindReportID('Finance Charge Memo', '');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE ReplaceFinanceChargeMemoTest@4();
    VAR
      ReportSelections@1000000000 : Record 77;
    BEGIN
      WITH ReportSelections DO BEGIN
        SETRANGE(Usage, Usage::"F.C.Test");
        IF NOT ISEMPTY THEN
          DELETEALL;

        Usage := Usage::"F.C.Test";
        Sequence := '1';
        "Report ID" := FindReportID('Finance Charge Memo T.', '');
        INSERT;
      END;
    END;

    LOCAL PROCEDURE FindReportID@1000000004(ReportName@1000000001 : Text;Prefix@1000 : Text) : Integer;
    BEGIN
      WITH Object DO BEGIN
        SETCURRENTKEY(Name);
        SETRANGE(Name, 'ForNAV ' + Prefix +ReportName);
        FINDFIRST;
        EXIT(ID);
      END;
    END;

    LOCAL PROCEDURE GetPrefix@1() : Text;
    VAR
      ForNAVSetup@1000 : Record 70000;
    BEGIN
      ForNAVSetup.GET;
      IF ForNAVSetup.CheckIsSalesTax THEN
        EXIT('Tax ');

      EXIT('VAT ');
    END;

    LOCAL PROCEDURE CreateBuffer@1000000013();
    VAR
      AllObjWithCaption@1000000000 : Record 2000000058;
    BEGIN
      WITH AllObjWithCaption DO BEGIN
        SETRANGE("Object Type", "Object Type"::Report);
        IF FINDSET THEN REPEAT
          Object.ID := AllObjWithCaption."Object ID";
          Object.Name := AllObjWithCaption."Object Name";
          Object.INSERT;
        UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70080 ForNAV Test Valid Doc iFace
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ThrowErrorIfNotValid@1000000000(VAR RecRef@1000000000 : RecordRef);
    VAR
      NotValidTableErr@1000000002 : TextConst 'ENU=This table (%1) is not supported for this function.';
    BEGIN
      IF NOT CheckValid(RecRef) THEN
        ERROR(NotValidTableErr, RecRef.CAPTION);
    END;

    PROCEDURE CheckValid@1000000001(VAR RecRef@1000000000 : RecordRef) : Boolean;
    BEGIN
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Header":
          EXIT(TRUE);
        DATABASE::"Sales Shipment Header":
          EXIT(TRUE);
        DATABASE::"Sales Invoice Header":
          EXIT(TRUE);
        DATABASE::"Sales Cr.Memo Header":
          EXIT(TRUE);
        DATABASE::"Purchase Header":
          EXIT(TRUE);
        DATABASE::"Purch. Rcpt. Header":
          EXIT(TRUE);
        DATABASE::"Purch. Inv. Header":
          EXIT(TRUE);
        DATABASE::"Purch. Cr. Memo Hdr.":
          EXIT(TRUE);
        DATABASE::"Reminder Header":
          EXIT(TRUE);
        DATABASE::"Issued Reminder Header":
          EXIT(TRUE);
        DATABASE::"Finance Charge Memo Header":
          EXIT(TRUE);
        DATABASE::"Issued Fin. Charge Memo Header":
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70090 ForNAV RecordRef Library
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ConvertToRecRef@1000000002(VAR Rec@1000000000 : Variant;RecRef@1000000001 : RecordRef);
    VAR
      WrongDataTypeErr@1000000002 : TextConst 'ENU=Runtime Error: Wrong Datatype. Please contact your ForNAV reseller.';
    BEGIN
      CASE TRUE OF
        Rec.ISRECORDREF:
          RecRef := Rec;
        Rec.ISRECORD:
          RecRef.GETTABLE(Rec);
        ELSE
          ERROR(WrongDataTypeErr);
      END;
    END;

    PROCEDURE FindAndFilterFieldNo@1000000003(VAR RecRef@1000000000 : RecordRef;VAR LineRec@1000000004 : RecordRef;VAR FldRef@1000000001 : FieldRef;Value@1000000005 : Text);
    VAR
      Field@1000000003 : Record 2000000041;
      DocumentNoField@1000000002 : FieldRef;
    BEGIN
      Field.SETRANGE(TableNo, RecRef.NUMBER);
      Field.SETRANGE(FieldName, Value);
      IF NOT Field.FINDFIRST THEN
        EXIT;

      DocumentNoField := RecRef.FIELD(Field."No.");

      Field.RESET;
      Field.SETRANGE(TableNo, RecRef.NUMBER + 1);
      Field.SETRANGE("No.", Field."No.");
      IF NOT Field.FINDFIRST THEN
        EXIT;

      FldRef := LineRec.FIELD(Field."No.");
      FldRef.SETRANGE(DocumentNoField.VALUE);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70206 ForNAV Trial Balance
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetDataFromGLAccount@1000000000(VAR TrialBalance@1000000000 : Record 70206;VAR GLAccount@1000000001 : Record 15;VAR Args@1000000002 : Record 70205);
    VAR
      PriorFromDate@1000000004 : Date;
      PriorToDate@1000000003 : Date;
    BEGIN
      PriorFromDate := CALCDATE('<-1Y>',Args."From Date" + 1) - 1;
      PriorToDate := CALCDATE('<-1Y>',Args."To Date" + 1) - 1;

      WITH TrialBalance DO BEGIN
        GLAccount.SETRANGE("Date Filter",Args."From Date",Args."To Date");
        IF NOT Args."All Amounts in LCY" THEN BEGIN
          GLAccount.CALCFIELDS("Additional-Currency Net Change","Add.-Currency Balance at Date");
          "Net Change Actual" := GLAccount."Additional-Currency Net Change";
          "Balance at Date Actual" := GLAccount."Add.-Currency Balance at Date";
        END ELSE BEGIN
          GLAccount.CALCFIELDS("Net Change","Balance at Date");
          "Net Change Actual" := GLAccount."Net Change";
          "Balance at Date Actual" := GLAccount."Balance at Date";
        END;
        IF Args."Show by" = Args."Show by"::Budget THEN BEGIN
          GLAccount.CALCFIELDS("Budgeted Amount","Budget at Date");
          "Net Change Actual Last Year" := GLAccount."Budgeted Amount";
          "Balance at Date Act. Last Year" := GLAccount."Budget at Date";
        END ELSE BEGIN
          GLAccount.SETRANGE("Date Filter",PriorFromDate,PriorToDate);
          IF NOT Args."All Amounts in LCY" THEN BEGIN
            GLAccount.CALCFIELDS("Additional-Currency Net Change","Add.-Currency Balance at Date");
            "Net Change Actual Last Year" := GLAccount."Additional-Currency Net Change";
            "Balance at Date Act. Last Year" := GLAccount."Add.-Currency Balance at Date";
          END ELSE BEGIN
            GLAccount.CALCFIELDS("Net Change","Balance at Date");
            "Net Change Actual Last Year" := GLAccount."Net Change";
            "Balance at Date Act. Last Year" := GLAccount."Balance at Date";
          END;
        END;

        IF Args."Variance in Changes" OR Args."% Variance in Changes" THEN
          "Variance in Changes" := "Net Change Actual" - "Net Change Actual Last Year";
        IF Args."% Variance in Changes" AND ("Net Change Actual Last Year" <> 0) THEN
          "% Variance in Changes" := "Variance in Changes" / "Net Change Actual Last Year" * 100;
        IF Args."Variance in Balances" OR Args."% Variance in Balances" THEN
          "Variance in Balances"  := "Balance at Date Actual" - "Balance at Date Act. Last Year";
        IF Args."% Variance in Balances" AND ("Balance at Date Act. Last Year" <> 0) THEN
          "% Variance in Balances"  := "Variance in Balances"  / "Balance at Date Act. Last Year" * 100;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

      This codeunit is based on 10025 Paragraph Handling.
    }
    END.
  }
}

OBJECT Codeunit 70219 ForNAV Aging Calculation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetAging@1000000001(Rec@1000000000 : Variant;VAR AgingBuffer@1000000001 : Record 70220;VAR Args@1000000003 : Record 70219);
    VAR
      CustomerAging@1000000002 : Codeunit 70220;
      VendorAging@1000000004 : Codeunit 70221;
    BEGIN
      CASE GetAccountType(Rec) OF
        AgingBuffer."Account Type"::Customer:
          CustomerAging.GetAging(Rec, AgingBuffer, Args);
        AgingBuffer."Account Type"::Vendor:
          VendorAging.GetAging(Rec, AgingBuffer, Args);
      END;
    END;

    PROCEDURE GetAgingWithCurrency@1000000005(Rec@1000000000 : Variant;VAR AgingBuffer@1000000001 : Record 70220;VAR CurrAgingBuffer@1000000002 : Record 70220;VAR Args@1000000003 : Record 70219;VAR TempCurrency@1000000004 : TEMPORARY Record 4);
    VAR
      CustomerAging@1000000005 : Codeunit 70220;
      VendorAging@1000000006 : Codeunit 70221;
    BEGIN
      CASE GetAccountType(Rec) OF
        AgingBuffer."Account Type"::Customer:
          CustomerAging.GetAgingWithCurrency(Rec, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
        AgingBuffer."Account Type"::Vendor:
          VendorAging.GetAgingWithCurrency(Rec, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
      END;
    END;

    LOCAL PROCEDURE GetAccountType@1000000000(Rec@1000000001 : Variant) : Integer;
    VAR
      AgingBuffer@1000000004 : Record 70220;
      RecordRefLibrary@1000000002 : Codeunit 70090;
      UnsupportedTableErr@1000000000 : TextConst 'ENU=Unsupported Table';
      RecRef@1000000003 : RecordRef;
    BEGIN
      RecordRefLibrary.ConvertToRecRef(Rec, RecRef);
      CASE RecRef.NUMBER OF
        DATABASE::Customer:
          EXIT(AgingBuffer."Account Type"::Customer);
        DATABASE::Vendor:
          EXIT(AgingBuffer."Account Type"::Vendor);
        ELSE
          ERROR(UnsupportedTableErr);;
      END;
    END;

    PROCEDURE UpdateCurrencyTotals@7(VAR AgingBuffer@1000000002 : Record 70220;VAR CurrAgingBuffer@1000000001 : Record 70220;VAR TempCurrency@1000000000 : TEMPORARY Record 4);
    VAR
      i@1000 : Integer;
    BEGIN
      CurrAgingBuffer.RESET;
      CurrAgingBuffer.SETRANGE("Currency Code", AgingBuffer."Currency Code");
      IF NOT TempCurrency.GET(AgingBuffer."Currency Code") THEN BEGIN
        TempCurrency.Code := AgingBuffer."Currency Code";
        TempCurrency.INSERT;
        CurrAgingBuffer."Entry No." :=  TempCurrency.COUNT;
        CurrAgingBuffer."Currency Code" := AgingBuffer."Currency Code";
        CurrAgingBuffer.Amount := AgingBuffer.Amount;
        CurrAgingBuffer.Balance := AgingBuffer.Balance;
        CurrAgingBuffer."Amount 1" := AgingBuffer."Amount 1";
        CurrAgingBuffer."Amount 2" := AgingBuffer."Amount 2";
        CurrAgingBuffer."Amount 3" := AgingBuffer."Amount 3";
        CurrAgingBuffer."Amount 4" := AgingBuffer."Amount 4";
        CurrAgingBuffer."Amount 5" := AgingBuffer."Amount 5";
        CurrAgingBuffer.INSERT;
      END ELSE BEGIN
        CurrAgingBuffer.SETRANGE("Currency Code", AgingBuffer."Currency Code");
        CurrAgingBuffer.FINDFIRST;
        CurrAgingBuffer.Amount += AgingBuffer.Amount;
        CurrAgingBuffer.Balance += AgingBuffer.Balance;
        CurrAgingBuffer."Amount 1" += AgingBuffer."Amount 1";
        CurrAgingBuffer."Amount 2" += AgingBuffer."Amount 2";
        CurrAgingBuffer."Amount 3" += AgingBuffer."Amount 3";
        CurrAgingBuffer."Amount 4" += AgingBuffer."Amount 4";
        CurrAgingBuffer."Amount 5" += AgingBuffer."Amount 5";
        CurrAgingBuffer.MODIFY;
        CurrAgingBuffer.RESET;
      END;
    END;

    PROCEDURE GetCurrencyCode@1000000009(Value@1000000000 : Code[10]) : Code[10];
    VAR
      GLSetup@1000000001 : Record 98;
    BEGIN
      IF Value <> '' THEN
        EXIT(Value);

      GLSetup.GET;
      EXIT(GLSetup."LCY Code");
    END;

    PROCEDURE MoveValuesToPeriod@1000000006(VAR AgingBuffer@1000000000 : Record 70220;PeriodIndex@1000000001 : Integer);
    VAR
      Fld@1000000004 : Record 2000000041;
      RecRef@1000000002 : RecordRef;
      FldRef@1000000003 : FieldRef;
    BEGIN
      RecRef.GETTABLE(AgingBuffer);
      Fld.SETRANGE(TableNo, RecRef.NUMBER);
      Fld.SETRANGE(FieldName, 'Amount ' + FORMAT(PeriodIndex));
      Fld.FINDFIRST;
      FldRef := RecRef.FIELD(Fld."No.");

      FldRef.VALUE := AgingBuffer.Balance;

      Fld.SETRANGE(FieldName, 'Amount ' + FORMAT(PeriodIndex) + ' (LCY)');
      Fld.FINDFIRST;
      FldRef := RecRef.FIELD(Fld."No.");

      FldRef.VALUE := AgingBuffer."Balance (LCY)";

      RecRef.SETTABLE(AgingBuffer);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70220 ForNAV Customer Aging
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempCustLedgEntry@1000000003 : TEMPORARY Record 21;

    PROCEDURE GetAging@1000000001(VAR Cust@1000000000 : Record 18;VAR AgingBuffer@1000000001 : Record 70220;VAR Args@1000000003 : Record 70219);
    VAR
      CurrAgingBuffer@1000000004 : TEMPORARY Record 70220;
      TempCurrency@1000000002 : TEMPORARY Record 4;
    BEGIN
      GetAgingWithCurrency(Cust, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
    END;

    PROCEDURE GetAgingWithCurrency@1000000005(VAR Cust@1000000000 : Record 18;VAR AgingBuffer@1000000001 : Record 70220;VAR CurrAgingBuffer@1000000002 : Record 70220;VAR Args@1000000003 : Record 70219;VAR TempCurrency@1000000004 : TEMPORARY Record 4);
    BEGIN
      ClearData(AgingBuffer);
      GetBasedOnDetailedEntry(Cust, Args);
      GetBasedOnOpenEntry(Cust, Args);
      CreateAgingBuffer(Cust, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
      AgingBuffer.SetCaptions(Args);
    END;

    LOCAL PROCEDURE GetBasedOnDetailedEntry@1000000002(VAR Cust@1000000002 : Record 18;VAR Args@1000000003 : Record 70219);
    VAR
      DetailedCustLedgEntry@1000000000 : Record 379;
      CustLedgEntry@1000000001 : Record 21;
    BEGIN
      WITH DetailedCustLedgEntry DO BEGIN
        SETCURRENTKEY("Customer No.", "Posting Date", "Entry Type", "Currency Code");
        SETRANGE("Customer No.", Cust."No.");
        SETRANGE("Entry Type", DetailedCustLedgEntry."Entry Type"::Application);
        SETRANGE("Posting Date", 0D, Args."Ending Date");
        SETFILTER("Posting Date", '%1..', Args."Ending Date" + 1);

        IF FINDSET THEN REPEAT
          IF CustLedgEntry.GET("Cust. Ledger Entry No.") THEN
            IF CustLedgEntry.Open THEN BEGIN
              CustLedgEntry.SETRANGE("Date Filter",0D, Args."Ending Date");
              CustLedgEntry.CALCFIELDS("Remaining Amount");
              IF CustLedgEntry."Remaining Amount" <> 0 THEN
                InsertTemp(CustLedgEntry);
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetBasedOnOpenEntry@1000000003(VAR Cust@1000000000 : Record 18;VAR Args@1000000002 : Record 70219);
    VAR
      CustLedgEntry@1000000001 : Record 21;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        SETCURRENTKEY("Customer No.", Open, Positive, "Due Date", "Currency Code");
        SETRANGE("Customer No.", Cust."No.");
        SETRANGE(Open, TRUE);

        IF Args."Aging By" = Args."Aging By"::"Posting Date" THEN BEGIN
          SETRANGE("Posting Date", 0D, Args."Ending Date");
          SETRANGE("Date Filter", 0D, Args."Ending Date");
        END;

        IF FINDSET THEN REPEAT
        IF Args."Aging By" = Args."Aging By"::"Posting Date" THEN BEGIN
           CALCFIELDS("Remaining Amt. (LCY)");
           IF "Remaining Amt. (LCY)" <> 0 THEN
             InsertTemp(CustLedgEntry);
         END ELSE
           InsertTemp(CustLedgEntry);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateAgingBuffer@1000000015(VAR Cust@1000000002 : Record 18;VAR AgingBuffer@1000000001 : Record 70220;VAR CurrAgingBuffer@1000000000 : Record 70220;VAR Args@1000000003 : Record 70219;VAR TempCurrency@1000000006 : TEMPORARY Record 4);
    VAR
      DetailedCustLedgEntry@1000000004 : Record 379;
      AgingCalculation@1000000007 : Codeunit 70219;
      PeriodIndex@1000000005 : Integer;
    BEGIN
      WITH TempCustLedgEntry DO
        IF FINDSET THEN REPEAT
          AgingBuffer.INIT;
          AgingBuffer."Entry No." := "Entry No.";
          AgingBuffer."Account No." := "Customer No.";
          AgingBuffer.GetAccountName;
          AgingBuffer."Credit Limit (LCY)" := Cust."Credit Limit (LCY)";
          IF NOT Args."Print Amounts in LCY" THEN
            AgingBuffer."Currency Code" := AgingCalculation.GetCurrencyCode("Currency Code");
          AgingBuffer."Document No." := "Document No.";
          AgingBuffer."External Document No." := "External Document No.";
          AgingBuffer."Document Type" := "Document Type";
          AgingBuffer."Document Date" := "Document Date";
          AgingBuffer."Posting Date" := "Posting Date";
          AgingBuffer."Due Date" := "Due Date";

          DetailedCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",TempCustLedgEntry."Entry No.");
          IF DetailedCustLedgEntry.FINDSET THEN REPEAT
            IF (DetailedCustLedgEntry."Entry Type" = DetailedCustLedgEntry."Entry Type"::"Initial Entry") AND
               (TempCustLedgEntry."Posting Date" > Args."Ending Date") AND (Args."Aging By" <> Args."Aging By"::"Posting Date")
            THEN BEGIN
              IF TempCustLedgEntry."Document Date" <= Args."Ending Date" THEN
                DetailedCustLedgEntry."Posting Date" :=  TempCustLedgEntry."Document Date"
              ELSE
                IF (TempCustLedgEntry."Due Date" <= Args."Ending Date") AND (Args."Aging By" = Args."Aging By"::"Due Date") THEN
                  DetailedCustLedgEntry."Posting Date" := TempCustLedgEntry."Due Date";
            END;
            IF (DetailedCustLedgEntry."Posting Date" <= Args."Ending Date") OR
               (TempCustLedgEntry.Open AND (Args."Aging By" = Args."Aging By"::"Due Date") AND (TempCustLedgEntry."Due Date" > Args."Ending Date") AND (TempCustLedgEntry."Posting Date" <= Args."Ending Date"))
            THEN BEGIN
              IF DetailedCustLedgEntry."Entry Type" IN
                 [DetailedCustLedgEntry."Entry Type"::"Initial Entry",
                  DetailedCustLedgEntry."Entry Type"::"Unrealized Loss",
                  DetailedCustLedgEntry."Entry Type"::"Unrealized Gain",
                  DetailedCustLedgEntry."Entry Type"::"Realized Loss",
                  DetailedCustLedgEntry."Entry Type"::"Realized Gain",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount (VAT Excl.)",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount (VAT Adjustment)",
                  DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance",
                  DetailedCustLedgEntry."Entry Type"::"Payment Tolerance (VAT Excl.)",
                  DetailedCustLedgEntry."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Excl.)",
                  DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)"]
              THEN BEGIN
                IF NOT Args."Print Amounts in LCY" THEN
                  AgingBuffer.Amount += DetailedCustLedgEntry.Amount
                ELSE
                  AgingBuffer.Amount += DetailedCustLedgEntry."Amount (LCY)";
                AgingBuffer."Amount (LCY)" += DetailedCustLedgEntry."Amount (LCY)";
              END;

              IF DetailedCustLedgEntry."Posting Date" <= Args."Ending Date" THEN BEGIN
                IF NOT Args."Print Amounts in LCY" THEN
                  AgingBuffer.Balance += DetailedCustLedgEntry.Amount
                ELSE
                  AgingBuffer.Balance += DetailedCustLedgEntry."Amount (LCY)";
                AgingBuffer."Balance (LCY)" += DetailedCustLedgEntry."Amount (LCY)";

              END;
            END;
          UNTIL DetailedCustLedgEntry.NEXT = 0;

          IF AgingBuffer.Balance <> 0 THEN BEGIN
            CASE Args."Aging By" OF
             Args."Aging By"::"Due Date":
               PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Due Date");
             Args."Aging By"::"Posting Date":
               PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Posting Date");
             Args."Aging By"::"Document Date":
               BEGIN
                 IF AgingBuffer."Document Date" > Args."Ending Date" THEN BEGIN
                   AgingBuffer.Balance := 0;
                   AgingBuffer."Balance (LCY)" := 0;
                   AgingBuffer."Document Date" := AgingBuffer."Posting Date";
                 END;
                 PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Document Date");
               END;
            END;

            AgingCalculation.MoveValuesToPeriod(AgingBuffer, PeriodIndex);

            AgingBuffer.INSERT;
            IF NOT Args."Print Amounts in LCY" THEN
              AgingCalculation.UpdateCurrencyTotals(AgingBuffer, CurrAgingBuffer, TempCurrency);
         END;
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE InsertTemp@1000000004(VAR CustLedgEntry@1000000000 : Record 21);
    BEGIN
      WITH TempCustLedgEntry DO BEGIN
        IF GET(CustLedgEntry."Entry No.") THEN
          EXIT;

        TempCustLedgEntry := CustLedgEntry;

        INSERT;
      END;
    END;

    LOCAL PROCEDURE ClearData@1000000000(VAR AgingBuffer@1000000001 : Record 70220);
    BEGIN
      AgingBuffer.RESET;
      AgingBuffer.DELETEALL;
      TempCustLedgEntry.RESET;
      TempCustLedgEntry.DELETEALL;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70221 ForNAV Vendor Aging
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempVendorLedgerEntry@1000000003 : TEMPORARY Record 25;

    PROCEDURE GetAging@1000000001(VAR Vend@1000000000 : Record 23;VAR AgingBuffer@1000000001 : Record 70220;VAR Args@1000000003 : Record 70219);
    VAR
      CurrAgingBuffer@1000000004 : TEMPORARY Record 70220;
      TempCurrency@1000000002 : TEMPORARY Record 4;
    BEGIN
      GetAgingWithCurrency(Vend, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
    END;

    PROCEDURE GetAgingWithCurrency@1000000005(VAR Vend@1000000000 : Record 23;VAR AgingBuffer@1000000001 : Record 70220;VAR CurrAgingBuffer@1000000002 : Record 70220;VAR Args@1000000003 : Record 70219;VAR TempCurrency@1000000004 : TEMPORARY Record 4);
    BEGIN
      ClearData(AgingBuffer);
      GetBasedOnDetailedEntry(Vend, Args);
      GetBasedOnOpenEntry(Vend, Args);
      CreateAgingBuffer(Vend, AgingBuffer, CurrAgingBuffer, Args, TempCurrency);
      AgingBuffer.SetCaptions(Args);
    END;

    LOCAL PROCEDURE GetBasedOnDetailedEntry@1000000002(VAR Vend@1000000002 : Record 23;VAR Args@1000000003 : Record 70219);
    VAR
      DetailedVendorLedgEntry@1000000000 : Record 380;
      VendorLedgerEntry@1000000001 : Record 25;
    BEGIN
      WITH DetailedVendorLedgEntry DO BEGIN
        SETCURRENTKEY("Vendor No.", "Posting Date", "Entry Type", "Currency Code");
        SETRANGE("Vendor No.", Vend."No.");
        SETRANGE("Entry Type", DetailedVendorLedgEntry."Entry Type"::Application);
        SETRANGE("Posting Date", 0D, Args."Ending Date");
        SETFILTER("Posting Date", '%1..', Args."Ending Date" + 1);

        IF FINDSET THEN REPEAT
          IF VendorLedgerEntry.GET("Vendor Ledger Entry No.") THEN
            IF VendorLedgerEntry.Open THEN BEGIN
              VendorLedgerEntry.SETRANGE("Date Filter",0D, Args."Ending Date");
              VendorLedgerEntry.CALCFIELDS("Remaining Amount");
              IF VendorLedgerEntry."Remaining Amount" <> 0 THEN
                InsertTemp(VendorLedgerEntry);
          END;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetBasedOnOpenEntry@1000000003(VAR Vend@1000000000 : Record 23;VAR Args@1000000002 : Record 70219);
    VAR
      VendorLedgerEntry@1000000001 : Record 25;
    BEGIN
      WITH VendorLedgerEntry DO BEGIN
        SETCURRENTKEY("Vendor No.", Open, Positive, "Due Date", "Currency Code");
        SETRANGE("Vendor No.", Vend."No.");
        SETRANGE(Open, TRUE);

        IF Args."Aging By" = Args."Aging By"::"Posting Date" THEN BEGIN
          SETRANGE("Posting Date", 0D, Args."Ending Date");
          SETRANGE("Date Filter", 0D, Args."Ending Date");
        END;

        IF FINDSET THEN REPEAT
        IF Args."Aging By" = Args."Aging By"::"Posting Date" THEN BEGIN
           CALCFIELDS("Remaining Amt. (LCY)");
           IF "Remaining Amt. (LCY)" <> 0 THEN
             InsertTemp(VendorLedgerEntry);
         END ELSE
           InsertTemp(VendorLedgerEntry);
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateAgingBuffer@1000000015(VAR Vend@1000000002 : Record 23;VAR AgingBuffer@1000000001 : Record 70220;VAR CurrAgingBuffer@1000000000 : Record 70220;VAR Args@1000000003 : Record 70219;VAR TempCurrency@1000000006 : TEMPORARY Record 4);
    VAR
      DetailedVendorLedgEntry@1000000004 : Record 380;
      AgingCalculation@1000000007 : Codeunit 70219;
      PeriodIndex@1000000005 : Integer;
    BEGIN
      WITH TempVendorLedgerEntry DO
        IF FINDSET THEN REPEAT
          AgingBuffer.INIT;
          AgingBuffer."Entry No." := "Entry No.";
          AgingBuffer."Account Type" := AgingBuffer."Account Type"::Vendor;
          AgingBuffer."Account No." := "Vendor No.";
          AgingBuffer.GetAccountName;
      //    AgingBuffer."Customer Credit Limit (LCY)" := Vend."Credit Limit (LCY)";
          IF NOT Args."Print Amounts in LCY" THEN
            AgingBuffer."Currency Code" := AgingCalculation.GetCurrencyCode("Currency Code");
          AgingBuffer."Document No." := "Document No.";
          AgingBuffer."External Document No." := "External Document No.";
          AgingBuffer."Document Type" := "Document Type";
          AgingBuffer."Document Date" := "Document Date";
          AgingBuffer."Posting Date" := "Posting Date";
          AgingBuffer."Due Date" := "Due Date";

          DetailedVendorLedgEntry.SETRANGE("Vendor Ledger Entry No.",TempVendorLedgerEntry."Entry No.");
          IF DetailedVendorLedgEntry.FINDSET THEN REPEAT
            IF (DetailedVendorLedgEntry."Entry Type" = DetailedVendorLedgEntry."Entry Type"::"Initial Entry") AND
               (TempVendorLedgerEntry."Posting Date" > Args."Ending Date") AND (Args."Aging By" <> Args."Aging By"::"Posting Date")
            THEN BEGIN
              IF TempVendorLedgerEntry."Document Date" <= Args."Ending Date" THEN
                DetailedVendorLedgEntry."Posting Date" :=  TempVendorLedgerEntry."Document Date"
              ELSE
                IF (TempVendorLedgerEntry."Due Date" <= Args."Ending Date") AND (Args."Aging By" = Args."Aging By"::"Due Date") THEN
                  DetailedVendorLedgEntry."Posting Date" := TempVendorLedgerEntry."Due Date";
            END;
            IF (DetailedVendorLedgEntry."Posting Date" <= Args."Ending Date") OR
               (TempVendorLedgerEntry.Open AND (Args."Aging By" = Args."Aging By"::"Due Date") AND (TempVendorLedgerEntry."Due Date" > Args."Ending Date") AND (TempVendorLedgerEntry."Posting Date" <= Args."Ending Date"))
            THEN BEGIN
              IF DetailedVendorLedgEntry."Entry Type" IN
                 [DetailedVendorLedgEntry."Entry Type"::"Initial Entry",
                  DetailedVendorLedgEntry."Entry Type"::"Unrealized Loss",
                  DetailedVendorLedgEntry."Entry Type"::"Unrealized Gain",
                  DetailedVendorLedgEntry."Entry Type"::"Realized Loss",
                  DetailedVendorLedgEntry."Entry Type"::"Realized Gain",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount (VAT Excl.)",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount (VAT Adjustment)",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Tolerance",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount Tolerance",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Tolerance (VAT Excl.)",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Tolerance (VAT Adjustment)",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Excl.)",
                  DetailedVendorLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)"]
              THEN BEGIN
                IF NOT Args."Print Amounts in LCY" THEN
                  AgingBuffer.Amount += DetailedVendorLedgEntry.Amount
                ELSE
                  AgingBuffer.Amount += DetailedVendorLedgEntry."Amount (LCY)";
                AgingBuffer."Amount (LCY)" += DetailedVendorLedgEntry."Amount (LCY)";
              END;

              IF DetailedVendorLedgEntry."Posting Date" <= Args."Ending Date" THEN BEGIN
                IF NOT Args."Print Amounts in LCY" THEN
                  AgingBuffer.Balance += DetailedVendorLedgEntry.Amount
                ELSE
                  AgingBuffer.Balance += DetailedVendorLedgEntry."Amount (LCY)";
                AgingBuffer."Balance (LCY)" += DetailedVendorLedgEntry."Amount (LCY)";

              END;
            END;
          UNTIL DetailedVendorLedgEntry.NEXT = 0;

          IF AgingBuffer.Balance <> 0 THEN BEGIN
            CASE Args."Aging By" OF
             Args."Aging By"::"Due Date":
               PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Due Date");
             Args."Aging By"::"Posting Date":
               PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Posting Date");
             Args."Aging By"::"Document Date":
               BEGIN
                 IF AgingBuffer."Document Date" > Args."Ending Date" THEN BEGIN
                   AgingBuffer.Balance := 0;
                   AgingBuffer."Balance (LCY)" := 0;
                   AgingBuffer."Document Date" := AgingBuffer."Posting Date";
                 END;
                 PeriodIndex := Args.GetPeriodIndex(AgingBuffer."Document Date");
               END;
            END;

            AgingCalculation.MoveValuesToPeriod(AgingBuffer, PeriodIndex);

            AgingBuffer.INSERT;
            IF NOT Args."Print Amounts in LCY" THEN
              AgingCalculation.UpdateCurrencyTotals(AgingBuffer, CurrAgingBuffer, TempCurrency);
         END;
        UNTIL NEXT = 0;
    END;

    LOCAL PROCEDURE InsertTemp@1000000004(VAR VendorLedgerEntry@1000000000 : Record 25);
    BEGIN
      WITH TempVendorLedgerEntry DO BEGIN
        IF GET(VendorLedgerEntry."Entry No.") THEN
          EXIT;

        TempVendorLedgerEntry := VendorLedgerEntry;

        INSERT;
      END;
    END;

    LOCAL PROCEDURE ClearData@1000000000(VAR AgingBuffer@1000000001 : Record 70220);
    BEGIN
      AgingBuffer.RESET;
      AgingBuffer.DELETEALL;
      TempVendorLedgerEntry.RESET;
      TempVendorLedgerEntry.DELETEALL;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70300 ForNAV Test Void Check
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE TestVoidCheck@1000000001(VAR GenJnlLn@1000000001 : Record 81;VAR Args@1000000006 : Record 70300;Preview@1000000005 : Boolean) : Boolean;
    VAR
      Text000Err@1000000004 : TextConst 'ENU=Preview is not allowed.';
      Text001Err@1000000003 : TextConst 'ENU=Last Check No. must be filled in.';
      Text002Err@1000000002 : TextConst '@@@="%1=Field caption for Line No. field.; %2=Field caption for Document No. field.";ENU=Filters on %1 and %2 are not allowed.';
      USText004Err@1000000007 : TextConst 'ENU=Last Check No. must include at least one digit, so that it can be incremented.';
    BEGIN
      IF Preview THEN
        EXIT(FALSE);

      IF Args."Check No." = '' THEN
        ERROR(Text001Err);
      IF INCSTR(Args."Check No.") = '' THEN
        ERROR(USText004Err);
      IF Args."Test Print" THEN
        EXIT(FALSE);
      IF NOT Args."Reprint Checks" THEN
        EXIT(FALSE);
      WITH GenJnlLn DO BEGIN

        IF (GETFILTER("Line No.") <> '') OR (GETFILTER("Document No.") <> '') THEN
          ERROR(
            Text002Err,FIELDCAPTION("Line No."),FIELDCAPTION("Document No."));

        SETRANGE("Bank Payment Type", "Bank Payment Type"::"Computer Check");
        SETRANGE("Check Printed",TRUE);
      END;

      EXIT(TRUE);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70301 ForNAV Check Update Journal
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE UpdateJournal@1000000001(Args@1000000003 : Record 70300;VAR Check@1000000001 : Record 70301;VAR GenJnlLine@1000000000 : Record 81);
    VAR
      GenJnlLine2@1000000002 : Record 81;
      Text013@1000000004 : TextConst 'ENU=%1 already exists.;ESP=%1 ist schon vorhanden.;FRA=%1 findes allerede.;NOR=%1 bestaat reeds.';
      GenJnlLine3@1000000006 : Record 81;
      BankAcc@1000000008 : Record 270;
      HighestLineNo@1000000007 : Integer;
      BalancingType@1000000009 : 'G/L Account,Customer,Vendor,Bank Account';
      Text014@1000000010 : TextConst 'ENU=Check for %1 %2;ESP=Scheck fÅr %1 %2;FRA=Undersõg for %1 %2;NOR=Cheque voor %1 %2';
      Text062@1000000011 : TextConst 'ENU=G/L Account,Customer,Vendor,Bank Account;ESP=Sachkonto,Debitor,Kreditor,Bankkonto;FRA=Finanskonto,Debitor,Kreditor,Bankkonto;NOR=Grootboekrekening,Klant,Leverancier,Bank';
    BEGIN
      IF Args."Test Print" THEN
        EXIT;

      WITH Check DO BEGIN
        BankAcc.GET("Bank Account No.");
        BankAcc."Last Check No." := "Check No.";
        BankAcc.MODIFY;
        IF Args."Test Print" THEN
          EXIT;
        IF "Check No." <> GenJnlLine."Document No." THEN BEGIN
          GenJnlLine3.RESET;
          GenJnlLine3.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
          GenJnlLine3.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
          GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
          GenJnlLine3.SETRANGE("Posting Date",GenJnlLine."Posting Date");
          GenJnlLine3.SETRANGE("Document No.","Check No.");
          IF GenJnlLine3.FIND('-') THEN
            GenJnlLine3.FIELDERROR("Document No.",STRSUBSTNO(Text013,"Check No."));
        END;

        IF "Application Method" <> "Application Method"::MoreLinesOneEntry THEN BEGIN
          GenJnlLine3 := GenJnlLine;
          GenJnlLine3.TESTFIELD("Posting No. Series",'');
          GenJnlLine3."Document No." := "Check No.";
          GenJnlLine3."Check Printed" := TRUE;
          GenJnlLine3.MODIFY;
        END ELSE BEGIN
          GenJnlLine2.RESET;
          GenJnlLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
          GenJnlLine2.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
          GenJnlLine2.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
          GenJnlLine2.SETRANGE("Posting Date",GenJnlLine."Posting Date");
          GenJnlLine2.SETRANGE("Document No.",GenJnlLine."Document No.");
          GenJnlLine2.SETRANGE("Account Type",GenJnlLine."Account Type");
          GenJnlLine2.SETRANGE("Account No.",GenJnlLine."Account No.");
          GenJnlLine2.SETRANGE("Bal. Account Type",GenJnlLine."Bal. Account Type");
          GenJnlLine2.SETRANGE("Bal. Account No.",GenJnlLine."Bal. Account No.");
          GenJnlLine2.SETRANGE("Bank Payment Type",GenJnlLine."Bank Payment Type");
          IF GenJnlLine2.FIND('-') THEN BEGIN
            HighestLineNo := GenJnlLine2."Line No.";
            REPEAT
              IF GenJnlLine2."Line No." > HighestLineNo THEN
                HighestLineNo := GenJnlLine2."Line No.";
              GenJnlLine3 := GenJnlLine2;
              GenJnlLine3.TESTFIELD("Posting No. Series",'');
              GenJnlLine3."Bal. Account No." := '';
              GenJnlLine3."Bank Payment Type" := GenJnlLine3."Bank Payment Type"::" ";
              GenJnlLine3."Document No." := "Check No.";
              GenJnlLine3."Check Printed" := TRUE;
              GenJnlLine3.VALIDATE(Amount);
              GenJnlLine3.MODIFY;
            UNTIL GenJnlLine2.NEXT = 0;
          END;

          GenJnlLine3.RESET;
          GenJnlLine3 := GenJnlLine;
          GenJnlLine3.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
          GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
          GenJnlLine3."Line No." := HighestLineNo;
          IF GenJnlLine3.NEXT = 0 THEN
            GenJnlLine3."Line No." := HighestLineNo + 10000
          ELSE BEGIN
            WHILE GenJnlLine3."Line No." = HighestLineNo + 1 DO BEGIN
              HighestLineNo := GenJnlLine3."Line No.";
              IF GenJnlLine3.NEXT = 0 THEN
                GenJnlLine3."Line No." := HighestLineNo + 20000;
            END;
            GenJnlLine3."Line No." := (GenJnlLine3."Line No." + HighestLineNo) DIV 2;
          END;
          GenJnlLine3.INIT;
          GenJnlLine3.VALIDATE("Posting Date",GenJnlLine."Posting Date");
          GenJnlLine3."Document Type" := GenJnlLine."Document Type";
          GenJnlLine3."Document No." := "Check No.";
          GenJnlLine3."Account Type" := GenJnlLine3."Account Type"::"Bank Account";
          GenJnlLine3.VALIDATE("Account No.",BankAcc."No.");
          IF BalancingType <> BalancingType::"G/L Account" THEN
            GenJnlLine3.Description := STRSUBSTNO(Text014,SELECTSTR(BalancingType + 1,Text062),"Balancing No.");
          GenJnlLine3.VALIDATE(Amount,- Amount);
          GenJnlLine3."Bank Payment Type" := GenJnlLine3."Bank Payment Type"::"Computer Check";
          GenJnlLine3."Check Printed" := TRUE;
          GenJnlLine3."Source Code" := GenJnlLine."Source Code";
          GenJnlLine3."Reason Code" := GenJnlLine."Reason Code";
          GenJnlLine3."Allow Zero-Amount Posting" := TRUE;
          GenJnlLine3.INSERT;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70302 ForNAV Create Stub
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE FromCheck@1000000001(Args@1000000004 : Record 70300;VAR Check@1000000000 : Record 70301;VAR Stub@1000000001 : Record 70302;GenJnlLine@1000000006 : Record 81);
    VAR
      CustLedgerEntry@1000000003 : Record 21;
      VendorLedgerEntry@1000000002 : Record 25;
      FoundLast@1000000005 : Boolean;
      FoundNegative@1000000008 : Boolean;
      RemainingAmount@1000000007 : Decimal;
    BEGIN
      InitCode(Args, Check, GenJnlLine, CustLedgerEntry, VendorLedgerEntry, FoundLast, FoundNegative);
      RemainingAmount := Check.Amount;
      RepeatCode(Args, Check, Stub, GenJnlLine, CustLedgerEntry, VendorLedgerEntry, FoundLast, RemainingAmount, FoundNegative);
    END;

    LOCAL PROCEDURE InitCode@1000000000(Args@1000000002 : Record 70300;Check@1000000004 : Record 70301;GenJnlLine@1000000005 : Record 81;VAR CustLedgEntry@1000000000 : Record 21;VAR VendLedgEntry@1000000001 : Record 25;VAR FoundLast@1000000003 : Boolean;VAR FoundNegative@1000000006 : Boolean);
    BEGIN
      IF NOT Args."Test Print" THEN
        IF TRUE THEN BEGIN
          FoundLast := TRUE;
          CASE Check."Application Method" OF
            Check."Application Method"::OneLineOneEntry:
              FoundLast := FALSE;
            Check."Application Method"::OneLineID:
              CASE Check."Balancing Type" OF
                Check."Balancing Type"::Customer:
                  BEGIN
                    CustLedgEntry.RESET;
                    CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                    CustLedgEntry.SETRANGE("Customer No.",Check."Balancing No.");
                    CustLedgEntry.SETRANGE(Open,TRUE);
                    CustLedgEntry.SETRANGE(Positive,TRUE);
                    CustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                    FoundLast := NOT CustLedgEntry.FIND('-');
                    IF FoundLast THEN BEGIN
                      CustLedgEntry.SETRANGE(Positive,FALSE);
                      FoundLast := NOT CustLedgEntry.FIND('-');
                      FoundNegative := TRUE;
                    END ELSE
                      FoundNegative := FALSE;
                  END;
                Check."Balancing Type"::Vendor:
                  BEGIN
                    VendLedgEntry.RESET;
                    VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                    VendLedgEntry.SETRANGE("Vendor No.",Check."Balancing No.");
                    VendLedgEntry.SETRANGE(Open,TRUE);
                    VendLedgEntry.SETRANGE(Positive,TRUE);
                    VendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                    FoundLast := NOT VendLedgEntry.FIND('-');
                    IF FoundLast THEN BEGIN
                      VendLedgEntry.SETRANGE(Positive,FALSE);
                      FoundLast := NOT VendLedgEntry.FIND('-');
                      FoundNegative := TRUE;
                    END ELSE
                      FoundNegative := FALSE;
                  END;
              END;
            Check."Application Method"::MoreLinesOneEntry:
              FoundLast := FALSE;
          END;
        END
      ELSE
        FoundLast := FALSE;
    END;

    LOCAL PROCEDURE RepeatCode@1000000002(Args@1000000003 : Record 70300;Check@1000000006 : Record 70301;VAR Stub@1000000005 : Record 70302;GenJnlLine@1000000007 : Record 81;VAR CustLedgEntry@1000000001 : Record 21;VAR VendLedgEntry@1000000000 : Record 25;VAR FoundLast@1000000002 : Boolean;VAR RemainingAmount@1000000004 : Decimal;FoundNegative@1000000010 : Boolean);
    VAR
      LineAmount2@1000000008 : Decimal;
      CurrentLineAmount@1000000009 : Decimal;
      GenJnlLine2@1000000011 : Record 81;
      Text016@1000000013 : TextConst 'ENU=In the Check report, One Check per Vendor and Document No.\';
      Text017@1000000012 : TextConst 'ENU=must not be activated when Applies-to ID is specified in the journal lines.';
    BEGIN
      IF Check."Application Method" = Check."Application Method"::MoreLinesOneEntry THEN
        GetGenJnlLnForMoreLinesOneEntry(GenJnlLine, GenJnlLine2);

      REPEAT
        IF NOT Args."Test Print" THEN BEGIN
          IF FoundLast THEN BEGIN
            IF RemainingAmount <> 0 THEN BEGIN
              Stub."Document No." := '';
              Stub."External Document No." := '';
              Stub.Amount := RemainingAmount;
              LineAmount2 := RemainingAmount;
              CurrentLineAmount := LineAmount2;
              Stub."Discount Amount" := 0;
              Stub."Currency Code" := GenJnlLine."Currency Code";
              Stub.INSERT;
              RemainingAmount := 0;
            END ELSE
              EXIT;
          END ELSE BEGIN
            CASE Check."Application Method" OF
              Check."Application Method"::OneLineOneEntry:
                BEGIN
                  CASE Check."Balancing Type" OF
                    Check."Balancing Type"::Customer:
                      BEGIN
                        CustLedgEntry.RESET;
                        CustLedgEntry.SETCURRENTKEY("Document No.");
                        CustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                        CustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                        CustLedgEntry.SETRANGE("Customer No.",Check."Balancing No.");
                        CustLedgEntry.FIND('-');
                        Stub.CustUpdateAmounts(CustLedgEntry,RemainingAmount,LineAmount2);
                      END;
                    Check."Balancing Type"::Vendor:
                      BEGIN
                        VendLedgEntry.RESET;
                        VendLedgEntry.SETCURRENTKEY("Document No.");
                        VendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                        VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                        VendLedgEntry.SETRANGE("Vendor No.",Check."Balancing No.");
                        VendLedgEntry.FIND('-');
                        Stub.VendUpdateAmounts(VendLedgEntry,RemainingAmount,LineAmount2);
                      END;
                  END;
                  RemainingAmount := RemainingAmount - LineAmount2;
                  CurrentLineAmount := LineAmount2;
                  FoundLast := TRUE;
                END;
              Check."Application Method"::OneLineID:
                BEGIN
                  CASE Check."Balancing Type" OF
                    Check."Balancing Type"::Customer:
                      BEGIN
                        Stub."Currency Code" := GenJnlLine."Currency Code";
                        Stub.CustUpdateAmounts(CustLedgEntry,RemainingAmount,LineAmount2);
                        FoundLast := (CustLedgEntry.NEXT = 0) OR (RemainingAmount <= 0);
                        IF FoundLast AND NOT FoundNegative THEN BEGIN
                          CustLedgEntry.SETRANGE(Positive,FALSE);
                          FoundLast := NOT CustLedgEntry.FIND('-');
                          FoundNegative := TRUE;
                        END;
                      END;
                    Check."Balancing Type"::Vendor:
                      BEGIN
                        Stub."Currency Code" := GenJnlLine."Currency Code";
                        Stub.VendUpdateAmounts(VendLedgEntry,RemainingAmount,LineAmount2);
                        FoundLast := (VendLedgEntry.NEXT = 0) OR (RemainingAmount <= 0);
                        IF FoundLast AND NOT FoundNegative THEN BEGIN
                          VendLedgEntry.SETRANGE(Positive,FALSE);
                          FoundLast := NOT VendLedgEntry.FIND('-');
                          FoundNegative := TRUE;
                        END;
                      END;
                  END;
                  RemainingAmount := RemainingAmount - LineAmount2;
                  CurrentLineAmount := LineAmount2
                END;
              Check."Application Method"::MoreLinesOneEntry:
                BEGIN
                  CurrentLineAmount := GenJnlLine2.Amount;
                  LineAmount2 := CurrentLineAmount;
                  IF GenJnlLine2."Applies-to ID" <> '' THEN
                    ERROR(
                      Text016 +
                      Text017);
                  GenJnlLine2.TESTFIELD("Check Printed",FALSE);
                  GenJnlLine2.TESTFIELD("Bank Payment Type",GenJnlLine2."Bank Payment Type"::"Computer Check");
                  IF GenJnlLine2."Applies-to Doc. No." = '' THEN BEGIN
                    Stub."Document No." := '';
                    Stub."External Document No." := '';
                    Stub.Amount := CurrentLineAmount;
                    Stub."Discount Amount" := 0;
                    Stub."Currency Code" := GenJnlLine."Currency Code";
                    Stub.INSERT;
                  END ELSE BEGIN
                    CASE Check."Balancing Type" OF
                      Check."Balancing Type"::"G/L Account":
                        BEGIN
                          Stub."Document No." := GenJnlLine2."Document No.";
                          Stub."External Document No." := GenJnlLine2."External Document No.";
                          Stub.Amount := CurrentLineAmount;
                          Stub."Discount Amount" := 0;
                          Stub."Currency Code" := GenJnlLine."Currency Code";
                          Stub.INSERT;
                        END;
                      Check."Balancing Type"::Customer:
                        BEGIN
                          CustLedgEntry.RESET;
                          CustLedgEntry.SETCURRENTKEY("Document No.");
                          CustLedgEntry.SETRANGE("Document Type",GenJnlLine2."Applies-to Doc. Type");
                          CustLedgEntry.SETRANGE("Document No.",GenJnlLine2."Applies-to Doc. No.");
                          CustLedgEntry.SETRANGE("Customer No.",Check."Balancing No.");
                          CustLedgEntry.FIND('-');
                          Stub."Currency Code" := GenJnlLine."Currency Code";
                          Stub.CustUpdateAmounts(CustLedgEntry,CurrentLineAmount,LineAmount2);
                          Stub.Amount := CurrentLineAmount;
                        END;
                      Check."Balancing Type"::Vendor:
                        BEGIN
                          VendLedgEntry.RESET;
                          VendLedgEntry.SETCURRENTKEY("Document No.");
                          VendLedgEntry.SETRANGE("Document Type",GenJnlLine2."Applies-to Doc. Type");
                          VendLedgEntry.SETRANGE("Document No.",GenJnlLine2."Applies-to Doc. No.");
                          VendLedgEntry.SETRANGE("Vendor No.",Check."Balancing No.");
                          VendLedgEntry.FIND('-');
                          Stub."Currency Code" := GenJnlLine."Currency Code";
                          Stub.VendUpdateAmounts(VendLedgEntry,CurrentLineAmount,LineAmount2);
                          Stub.Amount := CurrentLineAmount; // WTF??
                        END;
                      Check."Balancing Type"::"Bank Account":
                        BEGIN
                          Stub."Document No." := GenJnlLine2."Document No.";
                          Stub."External Document No." := GenJnlLine2."External Document No.";
                          Stub.Amount := CurrentLineAmount;
                          Stub."Discount Amount" := 0;
                          Stub."Currency Code" := GenJnlLine."Currency Code";
                          Stub.INSERT;
                        END;
                    END;
                  END;
                  FoundLast := GenJnlLine2.NEXT = 0;
                END;
            END;
          END;
        END ELSE BEGIN
          IF FoundLast THEN
            EXIT;
          FoundLast := TRUE;
          Stub."Document No." := 'XXXXXXXXXX';
          Stub."External Document No." := 'XXXXXXXXXX';
          Stub.Amount := 0;
          Stub."Discount Amount" := 0;
          Stub."Currency Code" := GenJnlLine."Currency Code";
          Stub.INSERT;
        END;
      UNTIL FoundLast;
    END;

    LOCAL PROCEDURE GetGenJnlLnForMoreLinesOneEntry@1000000020(GenJnlLine@1000000000 : Record 81;VAR GenJnlLine2@1000000001 : Record 81);
    BEGIN
      WITH GenJnlLine DO BEGIN

        GenJnlLine2.RESET;
        GenJnlLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
        GenJnlLine2.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlLine2.SETRANGE("Journal Batch Name","Journal Batch Name");
        GenJnlLine2.SETRANGE("Posting Date","Posting Date");
        GenJnlLine2.SETRANGE("Document No.","Document No.");
        GenJnlLine2.SETRANGE("Account Type","Account Type");
        GenJnlLine2.SETRANGE("Account No.","Account No.");
        GenJnlLine2.SETRANGE("Bal. Account Type","Bal. Account Type");
        GenJnlLine2.SETRANGE("Bal. Account No.","Bal. Account No.");
        GenJnlLine2.SETRANGE("Bank Payment Type","Bank Payment Type");
        GenJnlLine2.FIND('-');
      END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70303 ForNAV Create Check Ledg. Ent.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CreateCheckLedgerEntry@1000000000(Args@1000000000 : Record 70300;Check@1000000003 : Record 70301;GenJnlLine@1000000001 : Record 81);
    VAR
      CheckLedgEntry@1000000002 : Record 272;
      CheckManagement@1000000004 : Codeunit 367;
    BEGIN
      IF NOT Args."Test Print" THEN BEGIN
        WITH GenJnlLine DO BEGIN
          CheckLedgEntry.INIT;
          CheckLedgEntry."Bank Account No." := Args."Bank Account No.";
          CheckLedgEntry."Posting Date" := "Posting Date";
          CheckLedgEntry."Document Type" := "Document Type";
          CheckLedgEntry."Document No." := Args."Check No.";
          CheckLedgEntry.Description := Description;
          CheckLedgEntry."Bank Payment Type" := "Bank Payment Type";
          CheckLedgEntry."Bal. Account Type" := Check."Balancing Type";
          CheckLedgEntry."Bal. Account No." := Check."Balancing No.";
          IF Check.Amount > 0 THEN BEGIN
            CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::Printed;
            CheckLedgEntry.Amount := Check.Amount;
          END ELSE BEGIN
            CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::Voided;
            CheckLedgEntry.Amount := 0;
          END;
          CheckLedgEntry."Check Date" := "Posting Date";
          CheckLedgEntry."Check No." := Args."Check No.";
          CheckManagement.InsertCheck(CheckLedgEntry,RECORDID);

        END;
      END ELSE
        WITH GenJnlLine DO BEGIN
          CheckLedgEntry.INIT;
          CheckLedgEntry."Bank Account No." := Args."Bank Account No.";
          CheckLedgEntry."Posting Date" := "Posting Date";
          CheckLedgEntry."Document No." := Args."Check No.";
          CheckLedgEntry.Description := 'XXXXXX';
          CheckLedgEntry."Bank Payment Type" := "Bank Payment Type"::"Computer Check";
          CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::"Test Print";
          CheckLedgEntry."Check Date" := "Posting Date";
          CheckLedgEntry."Check No." := Args."Check No.";
          CheckManagement.InsertCheck(CheckLedgEntry,RECORDID);
        END;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70304 ForNAV Create Check Model
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE CreateFromGenJnlLn@1000000006(VAR Args@1000000002 : Record 70300;VAR GenJnlLn@1000000001 : Record 81;VAR Model@1000000000 : Record 70303) : Boolean;
    VAR
      Check@1000000004 : TEMPORARY Record 70301;
      Stub@1000000003 : TEMPORARY Record 70302;
    BEGIN
      IF NOT ValidLine(Args, GenJnlLn, Model) THEN
        EXIT(FALSE);

      CLEAR(Model);

      Check.CreateFromGenJnlLn(Args, GenJnlLn);
      Check.GetStub(Args, Stub, GenJnlLn);
      Check.UpdateJournal(Args, GenJnlLn);
      Check.CreateCheckLedgerEntry(Args, GenJnlLn);
      CreateModel(Check, Stub, Model);

      EXIT(TRUE);
    END;

    PROCEDURE CreateModel@1000000001(VAR Check@1000000000 : Record 70301;VAR Stub@1000000001 : Record 70302;VAR Model@1000000002 : Record 70303);
    VAR
      NextLineNo@1000000004 : Integer;
    BEGIN
      Model.DELETEALL;

      ForEachStubCreateModel(Check, Stub, Model, NextLineNo);
      CreateEmptyLinesInStub(Model, NextLineNo);
      SetDataInModel(Model);
    END;

    LOCAL PROCEDURE ForEachStubCreateModel@1000000005(VAR Check@1000000003 : Record 70301;VAR Stub@1000000001 : Record 70302;VAR Model@1000000000 : Record 70303;VAR NextLineNo@1000000005 : Integer);
    VAR
      CheckSetup@1000000004 : Record 70310;
    BEGIN
      CheckSetup.GET;

      WITH Stub DO BEGIN
        FINDSET;
        REPEAT
          CreateModelFromStub(Stub, Model, NextLineNo);
          UpdateModelWithCheck(Check, Model);
        UNTIL (NEXT = 0) OR (CheckSetup.Layout = CheckSetup.Layout::"3 Checks");
      END;
    END;

    LOCAL PROCEDURE CreateModelFromStub@1000000000(VAR Stub@1000000001 : Record 70302;VAR Model@1000000000 : Record 70303;VAR NextLineNo@1000000002 : Integer);
    BEGIN
      WITH Model DO BEGIN
        INIT;
        "Document Date" := Stub."Document Date";
        "Document No." := Stub."Document No.";
        "External Document No." := Stub."External Document No.";
        Amount := Stub.Amount;
        "Discount Amount" := Stub."Discount Amount";
        "Net Amount" := Stub.Amount - Stub."Discount Amount";
        "Document Type" := Stub."Document Type";
        "Amount Paid" := Stub."Amount Paid";
        "Job No." := Stub."Job No.";
        "Currency Code" := Stub."Currency Code";
        SetPageAndLineNo(NextLineNo);
        INSERT;
      END;
    END;

    LOCAL PROCEDURE UpdateModelWithCheck@1000000003(VAR Check@1000000002 : Record 70301;VAR Model@1000000000 : Record 70303);
    BEGIN
      WITH Model DO BEGIN
        "Posting Date" := Check."Posting Date";
        Test := Check.Test;
        "Check No." := Check."Check No.";
        "Amount Written in Text" := Check."Amount as Text (LCY)";
        "Amount in Numbers" := Check."Amount Filled as Text";
        "Pay-to Vendor No." := Check."Pay-to Vendor No.";
        "Pay-to Name" := Check."Pay-to Name";
        "Pay-to Name 2" := Check."Pay-to Name 2";
        "Pay-to Address" := Check."Pay-to Address";
        "Pay-to Address 2" := Check."Pay-to Address 2";
        "Pay-to Post Code" := Check."Pay-to Post Code";
        "Pay-to City" := Check."Pay-to City";
        "Pay-to County" := Check."Pay-to County";
        "Pay-to Country/Region Code" := Check."Pay-to Country/Region Code";
        "Bank Name" := Check."Bank Name";
        MODIFY;
        Duplicate;
      END;
    END;

    LOCAL PROCEDURE SetDataInModel@1000000004(VAR Model@1000000000 : Record 70303);
    BEGIN
      WITH Model DO BEGIN
        RESET;
        FINDSET;
        REPEAT
          SetType;
          SetIsVoid;
          SetAddress;
          SetMICRLine;
          SetPayToAddress;
          VoidCheckFields;
          MODIFY;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CreateEmptyLinesInStub@1000000002(VAR Model@1000000001 : Record 70303;VAR NextLineNo@1000000000 : Integer);
    VAR
      CheckSetup@1000000002 : Record 70310;
    BEGIN
      CheckSetup.GET;
      IF NextLineNo >= CheckSetup."No. of Lines (Stub)" THEN
        EXIT;

      WHILE NextLineNo < CheckSetup."No. of Lines (Stub)" DO
        WITH Model DO BEGIN
          INIT;
          "Part No." := 1;
          NextLineNo  += 1;
          "Line No." := NextLineNo;
          INSERT;
          Duplicate;
        END;
    END;

    LOCAL PROCEDURE ValidLine@1000000007(VAR Args@1000000001 : Record 70300;VAR GenJnlLn@1000000000 : Record 81;VAR Model@1000000003 : Record 70303) : Boolean;
    BEGIN
      WITH Args DO
        IF NOT "One Check Per Vendor" THEN
          EXIT(TRUE);

      IF NOT Model.FINDFIRST THEN
        EXIT(TRUE);

      EXIT(GenJnlLn."Account No." <> Model."Pay-to Vendor No.");
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Codeunit 70305 ForNAV Amount as Text
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      OnesText@1000000005 : ARRAY [20] OF Text[30];
      TensText@1000000004 : ARRAY [10] OF Text[30];
      ExponentText@1000000003 : ARRAY [5] OF Text[30];

    [External]
    PROCEDURE FormatNoText@1(VAR NoText@1000 : ARRAY [2] OF Text[80];No@1001 : Decimal;CurrencyCode@1002 : Code[10]);
    VAR
      PrintExponent@1003 : Boolean;
      Ones@1004 : Integer;
      Tens@1005 : Integer;
      Hundreds@1006 : Integer;
      Exponent@1007 : Integer;
      NoTextIndex@1008 : Integer;
      DecimalPosition@1010 : Decimal;
      Text026@1000000002 : TextConst 'ENU=ZERO;ESP=NULL;FRA=NUL;NOR=NUL';
      Text027@1000000001 : TextConst 'ENU=HUNDRED;ESP=HUNDERT;FRA=HUNDREDE;NOR=HONDERD';
      Text028@1000000000 : TextConst 'ENU=AND;ESP=UND;FRA=OG;NOR=EN';
    BEGIN
      CLEAR(NoText);
      NoTextIndex := 1;
      NoText[1] := '****';

      IF No < 1 THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,Text026)
      ELSE
        FOR Exponent := 4 DOWNTO 1 DO BEGIN
          PrintExponent := FALSE;
          Ones := No DIV POWER(1000,Exponent - 1);
          Hundreds := Ones DIV 100;
          Tens := (Ones MOD 100) DIV 10;
          Ones := Ones MOD 10;
          IF Hundreds > 0 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Hundreds]);
            AddToNoText(NoText,NoTextIndex,PrintExponent,Text027);
          END;
          IF Tens >= 2 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[Tens]);
            IF Ones > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones]);
          END ELSE
            IF (Tens * 10 + Ones) > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Tens * 10 + Ones]);
          IF PrintExponent AND (Exponent > 1) THEN
            AddToNoText(NoText,NoTextIndex,PrintExponent,ExponentText[Exponent]);
          No := No - (Hundreds * 100 + Tens * 10 + Ones) * POWER(1000,Exponent - 1);
        END;

      AddToNoText(NoText,NoTextIndex,PrintExponent,Text028);
      DecimalPosition := GetAmtDecimalPosition;
      AddToNoText(NoText,NoTextIndex,PrintExponent,(FORMAT(No * DecimalPosition) + '/' + FORMAT(DecimalPosition)));

      IF CurrencyCode <> '' THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,CurrencyCode);
    END;

    LOCAL PROCEDURE AddToNoText@2(VAR NoText@1000 : ARRAY [2] OF Text[80];VAR NoTextIndex@1001 : Integer;VAR PrintExponent@1002 : Boolean;AddText@1003 : Text[30]);
    VAR
      Text029@1000000000 : TextConst 'ENU=%1 results in a written number that is too long.;ESP=%1 ist das Ergebnis einer zu langen Nummer.;FRA=%1 resulterer i et skrevet tal, der er for langt.;NOR=Het uitgeschreven getal %1 te lang.';
    BEGIN
      PrintExponent := TRUE;

      WHILE STRLEN(NoText[NoTextIndex] + ' ' + AddText) > MAXSTRLEN(NoText[1]) DO BEGIN
        NoTextIndex := NoTextIndex + 1;
        IF NoTextIndex > ARRAYLEN(NoText) THEN
          ERROR(Text029,AddText);
      END;

      NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + ' ' + AddText,'<');
    END;

    LOCAL PROCEDURE GetAmtDecimalPosition@22() : Decimal;
    VAR
      Currency@1000 : Record 4;
    BEGIN
      //IF GenJnlLine."Currency Code" = '' THEN
        Currency.InitRoundingPrecision;
      //ELSE BEGIN
      //  Currency.GET(GenJnlLine."Currency Code");
      //  Currency.TESTFIELD("Amount Rounding Precision");
      //END;
      EXIT(1 / Currency."Amount Rounding Precision");
    END;

    [External]
    PROCEDURE InitTextVariable@5();
    VAR
      Text032@1000000029 : TextConst 'ENU=ONE';
      Text033@1000000028 : TextConst 'ENU=TWO';
      Text034@1000000027 : TextConst 'ENU=THREE';
      Text035@1000000026 : TextConst 'ENU=FOUR';
      Text036@1000000025 : TextConst 'ENU=FIVE';
      Text037@1000000024 : TextConst 'ENU=SIX';
      Text038@1000000023 : TextConst 'ENU=SEVEN';
      Text039@1000000022 : TextConst 'ENU=EIGHT';
      Text040@1000000021 : TextConst 'ENU=NINE';
      Text041@1000000020 : TextConst 'ENU=TEN';
      Text042@1000000019 : TextConst 'ENU=ELEVEN';
      Text043@1000000018 : TextConst 'ENU=TWELVE';
      Text044@1000000017 : TextConst 'ENU=THIRTEEN';
      Text045@1000000016 : TextConst 'ENU=FOURTEEN';
      Text046@1000000015 : TextConst 'ENU=FIFTEEN';
      Text047@1000000014 : TextConst 'ENU=SIXTEEN';
      Text048@1000000013 : TextConst 'ENU=SEVENTEEN';
      Text049@1000000012 : TextConst 'ENU=EIGHTEEN';
      Text050@1000000011 : TextConst 'ENU=NINETEEN';
      Text051@1000000010 : TextConst 'ENU=TWENTY';
      Text052@1000000009 : TextConst 'ENU=THIRTY';
      Text053@1000000008 : TextConst 'ENU=FORTY';
      Text054@1000000007 : TextConst 'ENU=FIFTY';
      Text055@1000000006 : TextConst 'ENU=SIXTY';
      Text056@1000000005 : TextConst 'ENU=SEVENTY';
      Text057@1000000004 : TextConst 'ENU=EIGHTY';
      Text058@1000000003 : TextConst 'ENU=NINETY';
      Text059@1000000002 : TextConst 'ENU=THOUSAND';
      Text060@1000000001 : TextConst 'ENU=MILLION';
      Text061@1000000000 : TextConst 'ENU=BILLION';
    BEGIN
      OnesText[1] := Text032;
      OnesText[2] := Text033;
      OnesText[3] := Text034;
      OnesText[4] := Text035;
      OnesText[5] := Text036;
      OnesText[6] := Text037;
      OnesText[7] := Text038;
      OnesText[8] := Text039;
      OnesText[9] := Text040;
      OnesText[10] := Text041;
      OnesText[11] := Text042;
      OnesText[12] := Text043;
      OnesText[13] := Text044;
      OnesText[14] := Text045;
      OnesText[15] := Text046;
      OnesText[16] := Text047;
      OnesText[17] := Text048;
      OnesText[18] := Text049;
      OnesText[19] := Text050;

      TensText[1] := '';
      TensText[2] := Text051;
      TensText[3] := Text052;
      TensText[4] := Text053;
      TensText[5] := Text054;
      TensText[6] := Text055;
      TensText[7] := Text056;
      TensText[8] := Text057;
      TensText[9] := Text058;

      ExponentText[1] := '';
      ExponentText[2] := Text059;
      ExponentText[3] := Text060;
      ExponentText[4] := Text061;
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 70306 ForNAV Read Check Watermarks
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ReadFromFile@1(VAR ForNAVCheckSetup@1004 : Record 70310;Which@1003 : Integer) : Boolean;
    VAR
      TempBlob@1002 : TEMPORARY Record 99008535;
      InStream@1005 : InStream;
      OutStream@1001 : OutStream;
      FileName@1000 : Text;
    BEGIN
      UPLOADINTOSTREAM('Select a file', '', 'PDF files (*.pdf)|*.pdf|All files (*.*)|*.*', FileName, InStream);
      TempBlob.Blob.CREATEOUTSTREAM(OutStream);
      COPYSTREAM(OutStream, InStream);

      WITH ForNAVCheckSetup DO
        IF FileName <> '' THEN BEGIN
          CASE Which OF
            FIELDNO(Watermark):
              BEGIN
                Watermark := TempBlob.Blob;
                "Watermark File Name" := GetFileNameFromFile(FileName);
              END;
            FIELDNO(Signature):
              BEGIN
                Signature := TempBlob.Blob;
                "Signature File Name" := GetFileNameFromFile(FileName);
              END;
          END;
          EXIT(TRUE);
        END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetFileNameFromFile@3(Value@1000 : Text) : Text;
    VAR
      LastPos@1001 : Integer;
      i@1002 : Integer;
    BEGIN
      WHILE i < STRLEN(Value) DO BEGIN
        i := i + 1;
        IF Value[i] = '\' THEN
          LastPos := i;
      END;

      EXIT(COPYSTR(Value, LastPos + 1));
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Page 70000 ForNAV Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=ForNAV Opsëtning;
               DEU=ForNAV Einrichtung;
               ENU=ForNAV Setup;
               ESP=Configuraci¢n ForNAV;
               FIN=ForNAV asetukset;
               FRA=Configuration ForNAV;
               ISL=Uppsetning ForNAV;
               ITA=Setup ForNAV;
               NLD=ForNAV Instellingen;
               NOR=ForNAV oppsett;
               SVE=ForNAV instÑllning];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table70000;
    PageType=Card;
    OnOpenPage=BEGIN
                 InitSetup;
               END;

    ActionList=ACTIONS
    {
      { 1       ;    ;ActionContainer;
                      Name=ActionItems;
                      ActionContainerType=ActionItems }
      { 11      ;1   ;ActionGroup;
                      Name=Watermark;
                      CaptionML=[DAN=Vandmërke;
                                 DEU=Wasserzeichen;
                                 ENU=Watermark;
                                 ESP=Filigrana;
                                 FIN=Vesileima;
                                 FRA=Filigrane;
                                 ISL=Vatnsmerki;
                                 ITA=Filigrana;
                                 NLD=Watermerk;
                                 NOR=Vannmerke;
                                 SVE=VattenmÑrke] }
      { 10      ;2   ;Action    ;
                      Name=DownloadWatermark;
                      CaptionML=[DAN=Hent Vandmërke;
                                 DEU=Wasserzeichen Herunterladen;
                                 ENU=Download Watermark;
                                 ESP=Filigrana Descargar;
                                 FIN=Vesileima ladata;
                                 FRA=TÇlÇcharger le filigrane;
                                 ISL=Vatnsmerki Sëkja;
                                 ITA=Filigrana Scaricare;
                                 NLD=Download Watermerk;
                                 NOR=Nedlasting Vannmerke;
                                 SVE=HÑmta vattenmÑrke];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Link;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DownloadWatermarks;
                               END;
                                }
      { 8       ;1   ;ActionGroup;
                      Name=Delete;
                      CaptionML=[DAN=Slet;
                                 DEU=Lîschen;
                                 ENU=Delete;
                                 ESP=Borrar;
                                 FIN=Poistaa;
                                 FRA=Effacer;
                                 ISL=Ey–a;
                                 ITA=Elimina;
                                 NLD=Verwijderen;
                                 NOR=Slett;
                                 SVE=Radera] }
      { 14      ;2   ;Action    ;
                      Name=DeleteDocWatermark;
                      CaptionML=[DAN=Dokument Vandmërke;
                                 DEU=Dokument Wasserzeichen;
                                 ENU=Document Watermark;
                                 ESP=Marca de agua del documento;
                                 FIN=Asiakirjan vesileima;
                                 FRA=Filigrane de document;
                                 ISL=Document Watermark;
                                 ITA=Documento Watermark;
                                 NLD=Document watermerk;
                                 NOR=Dokument vannmerke;
                                 SVE=Dokument vattenstÑmpel];
                      Image=Delete;
                      OnAction=VAR
                                 AreYouSureQst@1000 : TextConst 'ENU=Are you sure you want to clear %1?';
                               BEGIN
                                 IF NOT CONFIRM(AreYouSureQst, FALSE, FIELDCAPTION("Document Watermark")) THEN
                                   EXIT;

                                 "Document Watermark File Name" := 'Click to import...';
                                 CLEAR("Document Watermark");
                                 MODIFY;
                               END;
                                }
      { 15      ;2   ;Action    ;
                      Name=DeleteListWatermark;
                      CaptionML=[DAN=Rapport Vandmërke;
                                 DEU=Berichts Wasserzeichen;
                                 ENU=List Report Watermark;
                                 ESP=Marca de agua de informe;
                                 FIN=Raportin vesileima;
                                 FRA=Filigrane du Çtat;
                                 ISL=List Report Watermark;
                                 ITA=Watermark Report;
                                 NLD=Rapport watermerk;
                                 NOR=Rapport vannmerke;
                                 SVE=Lista Rapport VattenmÑrke];
                      Image=Delete;
                      OnAction=VAR
                                 AreYouSureQst@1000 : TextConst 'ENU=Are you sure you want to clear %1?';
                               BEGIN
                                 IF NOT CONFIRM(AreYouSureQst, FALSE, FIELDCAPTION("List Report Watermark")) THEN
                                   EXIT;

                                 "List Report Watermark File N." := 'Click to import...';
                                 CLEAR("List Report Watermark");
                                 MODIFY;
                               END;
                                }
      { 16      ;2   ;Action    ;
                      Name=DeleteLogo;
                      CaptionML=[DAN=Logo;
                                 DEU=Logo;
                                 ENU=Logo;
                                 ESP=Logotipo;
                                 FIN=Logo;
                                 FRA=Logo;
                                 ISL=Kennimerki;
                                 ITA=Logo;
                                 NLD=Logo;
                                 NOR=Logo;
                                 SVE=Logo];
                      Image=Delete;
                      OnAction=VAR
                                 AreYouSureQst@1000 : TextConst 'ENU=Are you sure you want to clear %1?';
                               BEGIN
                                 IF NOT CONFIRM(AreYouSureQst, FALSE, FIELDCAPTION(Logo)) THEN
                                   EXIT;

                                 "Logo File Name" := 'Click to import...';
                                 CLEAR(Logo);
                                 MODIFY;
                               END;
                                }
      { 12      ;1   ;ActionGroup;
                      Name=ForNAV;
                      CaptionML=ENU=ForNAV }
      { 2       ;2   ;Action    ;
                      Name=ReplaceReports;
                      CaptionML=[DAN=Erstatte Rapportvalg;
                                 DEU=Berichtsauswahl Ersetzen;
                                 ENU=Replace Report Selections;
                                 ESP=Reemplazar Selecci¢n informes;
                                 FIN=Korvata Raporttivalinnat;
                                 FRA=Remplacer SÇlection des Çtats;
                                 ISL=Skipta £t SkÏrsluval;
                                 ITA=Sostituire Selezioni report;
                                 NLD=Vervang Rapportselecties;
                                 NOR=Erstatte Rapportvalg;
                                 SVE=Byt rapportval];
                      Image=SwitchCompanies;
                      OnAction=BEGIN
                                 ReplaceReportSelection(FALSE);
                               END;
                                }
      { 9       ;2   ;Action    ;
                      Name=CreateWebservice;
                      CaptionML=[DEU=Web Service;
                                 ENU=Web Service;
                                 ESP=Servicio Web;
                                 FIN=WWW-palvelu;
                                 FRA=Service web;
                                 ISL=VefÁj¢nusta;
                                 ITA=Servizio Web;
                                 NLD=Webservice;
                                 NOR=Webtjeneste;
                                 SVE=Web Service];
                      Image=ServiceSetup;
                      OnAction=BEGIN
                                 CreateWebService;
                               END;
                                }
      { 13      ;1   ;ActionGroup;
                      Name=Template;
                      CaptionML=[DAN=Skabelon;
                                 DEU=Vorlage;
                                 ENU=Template;
                                 ESP=Plantilla;
                                 FIN=Malli;
                                 FRA=Modäle;
                                 ISL=Sni–m†t;
                                 ITA=Modello;
                                 NLD=Sjabloon;
                                 NOR=Mal;
                                 SVE=Mall] }
      { 1000000014;2 ;Action    ;
                      Name=DesignTemplatePortrait;
                      CaptionML=[DAN=Design generelt skabelon (portrët);
                                 DEU=Design Allgemeine Vorlage (Portrait);
                                 ENU=Design General Template (Portrait);
                                 ESP=Plantilla general de dise§o (retrato);
                                 FIN=Suunnittelupohjamalli (muotokuva);
                                 FRA=Modäle gÇnÇral de conception (Portrait);
                                 ISL=Hînnun Almenn sni–m†t (Portrait);
                                 ITA=Modello generale di progettazione (verticale);
                                 NLD=Ontwerp algemeen sjabloon (portret);
                                 NOR=Design generell mal (portrett);
                                 SVE=Design AllmÑn Mall (PortrÑtt)];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=UnitOfMeasure;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DesignTemplatePortrait;
                               END;
                                }
      { 21      ;2   ;Action    ;
                      Name=DesignTemplateLandscape;
                      CaptionML=[DAN=Design General Template (Landskab);
                                 DEU=Design Allgemeine Vorlage (Landschaft);
                                 ENU=Design General Template (Landscape);
                                 ESP=Plantilla general de dise§o (paisaje);
                                 FIN=Suunnittelumuoto (maisema);
                                 FRA=Modäle gÇnÇral de conception (paysage);
                                 ISL=Hînnun Almenn sni–m†t (Landslag);
                                 ITA=Modello generale di progettazione (orizzontale);
                                 NLD=Ontwerp algemeen sjabloon (liggend);
                                 NOR=Design generell mal (landskap);
                                 SVE=Design AllmÑn Mall (Landskap)];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=VATPostingSetup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DesignTemplateLandscape;
                               END;
                                }
      { 4       ;2   ;Action    ;
                      Name=DesignSalesTemplate;
                      CaptionML=[DAN=Design Salgsskabelon;
                                 DEU=Design Verkaufsvorlage;
                                 ENU=Design Sales Template;
                                 ESP=Dise§o de plantilla de ventas;
                                 FIN=Suunnittelumalli;
                                 FRA=Modäle de vente de conception;
                                 ISL=Hînnun sîluskilm†la;
                                 ITA=Modello di vendita;
                                 NLD=Ontwerp verkoopsjabloon;
                                 NOR=Design Salgsmal;
                                 SVE=Design Sales Template];
                      Promoted=Yes;
                      Image=Design;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DesignSalesTemplate;
                               END;
                                }
      { 1000000009;2 ;Action    ;
                      Name=DesignPurchaseTemplate;
                      CaptionML=[DAN=Design indkõbsmal;
                                 DEU=Design Kaufvorlage;
                                 ENU=Design Purchase Template;
                                 ESP=Plantilla de compra de dise§o;
                                 FIN=Mallin ostomalli;
                                 FRA=Modäle d'achat de conception;
                                 ISL=Hînnun kaupm†ls;
                                 ITA=Modello di acquisto del design;
                                 NLD=Ontwerp inkoopsjabloon;
                                 NOR=Design kjõpsmal;
                                 SVE=Design inkîpsmall];
                      Promoted=Yes;
                      Image=DesignCodeBehind;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DesignPurchaseTemplate;
                               END;
                                }
      { 3       ;2   ;Action    ;
                      Name=DesignReminderTemplate;
                      CaptionML=[DAN=Design pÜmindelse skabelon;
                                 DEU=Design-Erinnerungsvorlage;
                                 ENU=Design Reminder Template;
                                 ESP=Plantilla de recordatorio de dise§o;
                                 FIN=Design muistutusmalli;
                                 FRA=Modäle de rappel de conception;
                                 ISL=Sni–m†t fyrir hînnun †minningar;
                                 ITA=Modello di promemoria di progettazione;
                                 NLD=Ontwerp aanmaningssjabloon;
                                 NOR=Design pÜminnelsesmal;
                                 SVE=Designminnesmall];
                      Promoted=Yes;
                      Image=CreateElectronicReminder;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DesignReminderTemplate;
                               END;
                                }
      { 1000000011;  ;ActionContainer;
                      Name=RelatedInformation;
                      ActionContainerType=RelatedInformation }
      { 1000000013;1 ;Action    ;
                      Name=Translations;
                      CaptionML=[DAN=Oversëttelse;
                                 DEU=öbersetzung;
                                 ENU=Translations;
                                 ESP=Traducci¢n;
                                 FIN=KÑÑnnîs;
                                 FRA=Traduction;
                                 ISL=ËÏ–ingar;
                                 ITA=Traduzioni;
                                 NLD=Vertaling;
                                 NOR=Oversettelse;
                                 SVE=ôversÑttning];
                      RunObject=Page 70001;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Translations;
                      PromotedCategory=Report }
    }
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=General;
                CaptionML=[DAN=Generel;
                           DEU=Allgemeines;
                           ENU=General;
                           ESP=General;
                           FIN=Yleinen;
                           FRA=GÇnÇral;
                           ISL=Almennt;
                           ITA=Generale;
                           NLD=Algemeen;
                           NOR=Generell;
                           SVE=AllmÑn];
                GroupType=Group }

    { 1000000010;2;Field  ;
                SourceExpr="Inherit Language Code" }

    { 1000000012;2;Field  ;
                SourceExpr="Use Preprinted Paper" }

    { 1000000002;1;Group  ;
                Name=Tax Setup;
                CaptionML=[DAN=Skatteopsëtning;
                           DEU=Steuer einrichten;
                           ENU=Tax Setup;
                           ESP=Configuraci¢n impuestos;
                           FIN=Veroasetukset;
                           FRA=Paramätres taxe;
                           ISL=Uppsetning skatts;
                           ITA=Setup imposta;
                           NLD=Belastinginstelling;
                           NOR=Mva-oppsett;
                           SVE=SkatteuppsÑttning];
                GroupType=Group }

    { 1000000003;2;Field  ;
                SourceExpr="VAT Report Type" }

    { 1000000004;1;Group  ;
                Name=Text;
                CaptionML=[DAN=Tekst;
                           DEU=Text;
                           ENU=Text;
                           ESP=Texto;
                           FIN=Teksti;
                           FRA=Texte;
                           ISL=Texti;
                           ITA=Testo;
                           NLD=Tekst;
                           NOR=Tekst;
                           SVE=Text];
                GroupType=Group }

    { 5   ;2   ;Field     ;
                SourceExpr="Payment Note";
                MultiLine=Yes }

    { 1000000005;2;Field  ;
                SourceExpr="Legal Conditions";
                MultiLine=Yes }

    { 17  ;1   ;Group     ;
                Name=Logo;
                CaptionML=[DAN=Logo;
                           DEU=Logo;
                           ENU=Logo;
                           ESP=Logotipo;
                           FIN=Logo;
                           FRA=Logo;
                           ISL=Kennimerki;
                           ITA=Logo;
                           NLD=Logo;
                           NOR=Logo;
                           SVE=Logo];
                GroupType=Group }

    { 18  ;2   ;Field     ;
                CaptionML=[DAN=Logo;
                           DEU=Logo;
                           ENU=Logo;
                           ESP=Logotipo;
                           FIN=Logo;
                           FRA=Logo;
                           ISL=Kennimerki;
                           ITA=Logo;
                           NLD=Logo;
                           NOR=Logo;
                           SVE=Logo];
                SourceExpr="Logo File Name";
                OnDrillDown=VAR
                              TempBlob@1001 : Record 99008535;
                              FileManagement@1000 : Codeunit 419;
                            BEGIN
                              CALCFIELDS(Logo);
                              IF "Logo File Name" <> 'Click to import...' THEN BEGIN
                                TempBlob.Blob := Logo;
                                HYPERLINK(FileManagement.BLOBExport(TempBlob, "Logo File Name", FALSE));
                              END ELSE
                                ImportWatermarkFromClientFile(FIELDNO(Logo));
                              MODIFY;
                            END;
                             }

    { 19  ;2   ;Field     ;
                CaptionML=[DAN=Dokument Vandmërke;
                           DEU=Dokument Wasserzeichen;
                           ENU=Document Watermark;
                           ESP=Marca de agua del documento;
                           FIN=Asiakirjan vesileima;
                           FRA=Filigrane de document;
                           ISL=Document Watermark;
                           ITA=Documento Watermark;
                           NLD=Document watermerk;
                           NOR=Dokument vannmerke;
                           SVE=Dokument vattenstÑmpel];
                SourceExpr="Document Watermark File Name";
                Editable=FALSE;
                OnDrillDown=VAR
                              TempBlob@1001 : Record 99008535;
                              FileManagement@1000 : Codeunit 419;
                            BEGIN
                              CALCFIELDS("Document Watermark");
                              IF "Document Watermark File Name" <> 'Click to import...' THEN BEGIN
                                TempBlob.Blob := "Document Watermark";
                                HYPERLINK(FileManagement.BLOBExport(TempBlob, "Document Watermark File Name", FALSE));
                              END ELSE
                                ImportWatermarkFromClientFile(FIELDNO("Document Watermark"));
                              MODIFY;
                            END;
                             }

    { 20  ;2   ;Field     ;
                CaptionML=[DAN=Rapport Vandmërke;
                           DEU=Berichts Wasserzeichen;
                           ENU=List Report Watermark;
                           ESP=Marca de agua de informe;
                           FIN=Raportin vesileima;
                           FRA=Filigrane du Çtat;
                           ISL=List Report Watermark;
                           ITA=Watermark Report;
                           NLD=Rapport watermerk;
                           NOR=Rapport vannmerke;
                           SVE=Lista Rapport VattenmÑrke];
                SourceExpr="List Report Watermark File N.";
                OnDrillDown=VAR
                              TempBlob@1001 : Record 99008535;
                              FileManagement@1000 : Codeunit 419;
                            BEGIN
                              CALCFIELDS("List Report Watermark");
                              IF "List Report Watermark File N." <> 'Click to import...' THEN BEGIN
                                TempBlob.Blob := "List Report Watermark";
                                HYPERLINK(FileManagement.BLOBExport(TempBlob, "List Report Watermark File N.", FALSE));
                              END ELSE
                                ImportWatermarkFromClientFile(FIELDNO("List Report Watermark"));
                              MODIFY;
                            END;
                             }

    { 1000000006;0;Container;
                ContainerType=FactBoxArea }

    { 1000000007;1;Part   ;
                PartType=System;
                SystemPartID=MyNotes }

    { 1000000008;1;Part   ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Page 70001 ForNAV Legal Cond. Translation
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=VilkÜr og betingelser;
               DEU=Bedingungen;
               ENU=ForNAV Legal Cond. Translation;
               ESP=TÇrminos y condiciones;
               FIN=Ehdot;
               FRA=Conditions gÇnÇrales;
               ISL=µkvë–i og skilm†lar;
               ITA=Termini e condizioni;
               NLD=Voorwaarden;
               NOR=VilkÜr og betingelser;
               SVE=Juridisk fîrklaring. ôversÑttning];
    SourceTable=Table70001;
    PageType=List;
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1000000002;2;Field  ;
                SourceExpr="Language Code" }

    { 1000000003;2;Field  ;
                SourceExpr="Legal Conditions" }

  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Page 70004 ForNAV Reports
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=ForNAV Rapport;
               DEU=Fornav Berichten;
               ENU=ForNAV Reports;
               ESP=ForNAV informes;
               FIN=ForNAV Raportti;
               FRA=ForNAV Rapport;
               ISL=ForNAV SkÏrsla;
               ITA=ForNAV report;
               NLD=ForNAV Rapport;
               NOR=ForNAV Rapport;
               SVE=ForNAV Rapportera];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table70004;
    PageType=List;
    SourceTableTemporary=Yes;
    OnOpenPage=BEGIN
                 GetReports;
               END;

    ActionList=ACTIONS
    {
      { 5       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 6       ;1   ;Action    ;
                      Name=Run;
                      CaptionML=[DAN=Run;
                                 DEU=Run;
                                 ENU=Run;
                                 ESP=Run;
                                 FIN=Run;
                                 FRA=Run;
                                 ISL=Run;
                                 ITA=Run;
                                 NLD=Run;
                                 NOR=Run;
                                 SVE=Run];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExecuteBatch;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 REPORT.RUN(ID);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                SourceExpr=Category }

    { 7   ;2   ;Field     ;
                SourceExpr=ID }

    { 4   ;2   ;Field     ;
                SourceExpr=Name }

  }
  CODE
  {

    LOCAL PROCEDURE GetReports@2();
    VAR
      AllObjWithCaption@1000 : Record 2000000058;
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"ForNAV First Time Setup");

      AllObjWithCaption.SETRANGE("Object ID", 50000, 99999);
      AllObjWithCaption.SETRANGE("Object Type", AllObjWithCaption."Object Type"::Report);
      AllObjWithCaption.SETFILTER("Object Name", 'ForNAV*');
      IF AllObjWithCaption.FINDSET THEN REPEAT
        ID := AllObjWithCaption."Object ID";
        Name := AllObjWithCaption."Object Caption";
        Category := GetCategory(AllObjWithCaption."Object Name");
        IF IsValidForLocalization(AllObjWithCaption."Object Name") THEN
          INSERT;
      UNTIL AllObjWithCaption.NEXT = 0;

      AllObjWithCaption.SETRANGE("Object ID", 6188471, 6189471);
      IF AllObjWithCaption.FINDSET THEN REPEAT
        ID := AllObjWithCaption."Object ID";
        Name := AllObjWithCaption."Object Caption";
        Category := GetCategory(AllObjWithCaption."Object Name");
        IF IsValidForLocalization(AllObjWithCaption."Object Name") THEN
          INSERT;
      UNTIL AllObjWithCaption.NEXT = 0;

      IF FINDFIRST THEN;
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Page 70005 ForNAV Setup Wizard
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=ForNAV Opsëtning;
               DEU=ForNAV Einrichtung;
               ENU=ForNAV Setup;
               ESP=Configuraci¢n ForNAV;
               FIN=ForNAV asetukset;
               FRA=Configuration ForNAV;
               ISL=Uppsetning ForNAV;
               ITA=Setup ForNAV;
               NLD=ForNAV Instellingen;
               NOR=ForNAV oppsett;
               SVE=ForNAV instÑllning];
    SourceTable=Table70000;
    PageType=NavigatePage;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             LoadTopBanners;
           END;

    OnOpenPage=BEGIN
                 INIT;
                 IsSalesTax := CheckSalesTax.CheckIsSalesTax;
                 IF Setup.GET THEN
                   TRANSFERFIELDS(Setup)
                 ELSE BEGIN
                   CheckIsSalesTax;
                   "Legal Conditions" := LegalConditionsTxt;
                   "Payment Note" := PaymentNoteTxt;
                   "VAT Report Type" := "VAT Report Type"::"Multiple Lines";
                 END;
                 INSERT;

                 Step := Step::Start;
                 EnableControls(FALSE);
               END;

    ActionList=ACTIONS
    {
      { 19      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 18      ;1   ;Action    ;
                      Name=ActionBack;
                      CaptionML=[DAN=Tilbage;
                                 DEU=ZurÅck;
                                 ENU=Back;
                                 ESP=Espalda;
                                 FIN=Takaisin;
                                 FRA=Arriäre;
                                 ISL=Til baka;
                                 ITA=Indietro;
                                 NLD=Terug;
                                 NOR=Tilbake;
                                 SVE=Tillbaka];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=BackActionEnabled;
                      InFooterBar=Yes;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 NextStep(TRUE);
                               END;
                                }
      { 16      ;1   ;Action    ;
                      Name=ActionNext;
                      CaptionML=[DAN=Nëste;
                                 DEU=NÑchste;
                                 ENU=Next;
                                 ESP=Siguiente;
                                 FIN=Seuraava;
                                 FRA=Suivant;
                                 ISL=Nësta;
                                 ITA=Prossimo;
                                 NLD=Volgende;
                                 NOR=Neste;
                                 SVE=NÑsta];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NextActionEnabled;
                      InFooterBar=Yes;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 NextStep(FALSE);
                               END;
                                }
      { 8       ;1   ;Action    ;
                      Name=ActionFinish;
                      CaptionML=[DAN=Komplet;
                                 DEU=Fertig;
                                 ENU=Finish;
                                 ESP=Finalizar;
                                 FIN=TÑydellinen;
                                 FRA=Terminer;
                                 ISL=Kl†ra;
                                 ITA=Completo;
                                 NLD=Voltooien;
                                 NOR=Komplett;
                                 SVE=FullstÑndig];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=FinishActionEnabled;
                      InFooterBar=Yes;
                      Image=Approve;
                      OnAction=BEGIN
                                 FinishAction;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 5   ;0   ;Container ;
                ContainerType=ContentArea }

    { 4   ;1   ;Group     ;
                Visible=TopBannerVisible AND NOT FinalStepVisible;
                Editable=FALSE;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaRepositoryStandard.Image;
                Editable=FALSE;
                ShowCaption=No }

    { 2   ;1   ;Group     ;
                Visible=TopBannerVisible AND FinalStepVisible;
                Editable=FALSE;
                GroupType=Group }

    { 1   ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaRepositoryDone.Image;
                Editable=FALSE;
                ShowCaption=No }

    { 11  ;1   ;Group     ;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 10  ;2   ;Group     ;
                CaptionML=[DAN=Velkommen til ForNAV Setup;
                           DEU=Willkommen bei ForNAV Setup;
                           ENU=Welcome to ForNAV Setup;
                           ESP=Bienvenido a la configuraci¢n de ForNAV;
                           FIN=Tervetuloa ForNAV-asennusohjelmaan;
                           FRA=Bienvenue dans l'installation de ForNAV;
                           ISL=Velkomin ° ForNAV Setup;
                           ITA=Benvenuti in ForNAV Setup;
                           NLD=Welkom bij ForNAV Setup;
                           NOR=Velkommen til ForNAV Setup;
                           SVE=VÑlkommen till ForNAV Setup];
                Visible=FirstStepVisible;
                GroupType=Group }

    { 9   ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU="The ForNAV report package contains several documents that are optimized to work with our designer. " }

    { 7   ;2   ;Group     ;
                CaptionML=[DAN=Lad os starte!;
                           DEU=Fangen wir an!;
                           ENU=Let's go!;
                           ESP=≠Comencemos!;
                           FIN=Aloitetaan!;
                           FRA=Commenáons!;
                           ISL=Vi– skulum byrja!;
                           ITA=Iniziamo!;
                           NLD=Laten we beginnen!;
                           NOR=La oss begynne!;
                           SVE=LÜt oss bîrja!];
                GroupType=Group }

    { 6   ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next so you can set up the ForNAV report package. }

    { 15  ;1   ;Group     ;
                Visible=FinalStepVisible;
                GroupType=Group }

    { 13  ;2   ;Group     ;
                CaptionML=[DAN=Det er det!;
                           DEU=Das ist es!;
                           ENU=That's it!;
                           ESP=Eso es todo!;
                           FIN=Se on se!;
                           FRA=C'est áa!;
                           ISL=Ëa– er Áa–!;
                           ITA=Questo ä tutto!;
                           NLD=Dat is alles!;
                           NOR=Det er det!;
                           SVE=Det Ñr det!];
                GroupType=Group }

    { 12  ;3   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=To enable the ForNAV report package choose Finish. }

    { 21  ;1   ;Group     ;
                Visible=Step1Visible;
                GroupType=Group;
                InstructionalTextML=ENU=Step1. Select your payment note and legal clause. }

    { 14  ;2   ;Field     ;
                SourceExpr="Payment Note" }

    { 23  ;2   ;Field     ;
                SourceExpr="Legal Conditions" }

    { 1000000003;1;Group  ;
                Visible=Step2Visible and (NOT IsSalesTax);
                GroupType=Group;
                InstructionalTextML=ENU=How to you want to print VAT on your documents? }

    { 24  ;2   ;Field     ;
                SourceExpr="VAT Report Type";
                Visible=NOT IsSalesTax }

    { 22  ;1   ;Group     ;
                Visible=Step2Visible and IsSalesTax;
                GroupType=Group;
                InstructionalTextML=ENU=Which check layout are you using? }

    { 1000000002;2;Field  ;
                Name=CheckLayout;
                CaptionML=[DAN=Layout;
                           DEU=Layout;
                           ENU=Layout;
                           ESP=Dise§o;
                           FIN=Asettelu;
                           FRA=Mise en page;
                           ISL=Uppsetning;
                           ITA=Layout;
                           NLD=Lay-out;
                           NOR=Utseende;
                           SVE=Layout];
                SourceExpr=CheckSetup.Layout;
                Visible=IsSalesTax }

    { 17  ;1   ;Group     ;
                Visible=Step3Visible;
                GroupType=Group;
                InstructionalTextML=ENU=Do you want to replace the current report selections with the ForNAV reports? }

    { 20  ;2   ;Field     ;
                Name=ReplaceReports;
                CaptionML=[DAN=Erstatte Rapportvalg;
                           DEU=Berichtsauswahl Ersetzen;
                           ENU=Replace Report Selections;
                           ESP=Reemplazar Selecci¢n informes;
                           FIN=Korvata Raporttivalinnat;
                           FRA=Remplacer SÇlection des Çtats;
                           ISL=Skipta £t SkÏrsluval;
                           ITA=Sostituire Selezioni report;
                           NLD=Vervang Rapportselecties;
                           NOR=Erstatte Rapportvalg;
                           SVE=Byt rapportval];
                SourceExpr=ReplaceReports }

    { 30  ;1   ;Group     ;
                Visible=Step3Visible;
                GroupType=Group;
                InstructionalTextML=ENU=Do you want to create the fields webservice? }

    { 29  ;2   ;Field     ;
                CaptionML=ENU=Create The ForNAV Web Services;
                SourceExpr=CreateTheWebService }

    { 1000000001;1;Group  ;
                Visible=Step2Visible;
                GroupType=Group;
                InstructionalTextML=ENU=A watermark can make your reports look nicer. Do you want to import one? }

    { 1000000000;2;Field  ;
                Name=ImportWatermark;
                SourceExpr=WatermarkTxt;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ImportWatermarkFromClientFile(FIELDNO("Document Watermark"));
                            END;

                ShowCaption=No }

    { 28  ;2   ;Field     ;
                Name=ImportWatermarkList;
                SourceExpr=WatermarkListTxt;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ImportWatermarkFromClientFile(FIELDNO("List Report Watermark"));
                            END;

                ShowCaption=No }

    { 26  ;2   ;Field     ;
                Name=ImportCompanyLogo;
                SourceExpr=CompanyLogoTxt;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              ImportWatermarkFromClientFile(FIELDNO(Logo));
                            END;

                ShowCaption=No }

  }
  CODE
  {
    VAR
      MediaRepositoryStandard@1001 : Record 9400;
      MediaRepositoryDone@1000 : Record 9400;
      Setup@1005 : Record 70000;
      CheckSetup@1000000001 : Record 70310;
      CheckSalesTax@1020 : Codeunit 70005;
      IsSalesTax@1014 : Boolean;
      TopBannerVisible@1003 : Boolean;
      FinalStepVisible@1002 : Boolean;
      FirstStepVisible@1004 : Boolean;
      FinishActionEnabled@1007 : Boolean;
      BackActionEnabled@1008 : Boolean;
      NextActionEnabled@1009 : Boolean;
      Step1Visible@1011 : Boolean;
      Step2Visible@1010 : Boolean;
      Step3Visible@1013 : Boolean;
      ReplaceReports@1012 : Boolean;
      CreateTheWebService@1019 : Boolean;
      Step@1006 : 'Start,Step1,Step2,Step3,Finish';
      WatermarkTxt@1000000000 : TextConst 'ENU=Click to import a watermark for document reports';
      WatermarkListTxt@1018 : TextConst 'ENU=Click to import a watermark for list reports';
      CompanyLogoTxt@1017 : TextConst 'ENU=Click to import a company logo';
      PaymentNoteTxt@1015 : TextConst 'ENU=- You can print a payment note here -';
      LegalConditionsTxt@1016 : TextConst 'ENU=- You can print your legal conditions here -';

    LOCAL PROCEDURE LoadTopBanners@40();
    BEGIN
      IF MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE)) AND
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE))
      THEN
        TopBannerVisible := MediaRepositoryDone.Image.HASVALUE;
    END;

    LOCAL PROCEDURE EnableControls@2(Backwards@1000 : Boolean);
    BEGIN
      ResetControls;

      CASE Step OF
        Step::Start:
          ShowStartStep;
        Step::Step1:
          ShowStep1;
        Step::Step2:
          ShowStep2;
        Step::Step3:
          ShowStep3;
        Step::Finish:
          ShowFinishStep;
      END;
    END;

    LOCAL PROCEDURE ShowStartStep@24();
    BEGIN
      FirstStepVisible := TRUE;
      FinishActionEnabled := FALSE;
      BackActionEnabled := FALSE;
    END;

    LOCAL PROCEDURE ShowStep1@33();
    BEGIN
      Step1Visible := TRUE;
    END;

    LOCAL PROCEDURE ShowStep2@34();
    BEGIN
      Step2Visible := TRUE;
    END;

    LOCAL PROCEDURE ShowStep3@4();
    BEGIN
      Step3Visible := TRUE;
    END;

    LOCAL PROCEDURE ShowFinishStep@35();
    BEGIN
      FinalStepVisible := TRUE;
      NextActionEnabled := FALSE;
    END;

    LOCAL PROCEDURE ResetControls@1();
    BEGIN
      FinishActionEnabled := 1=1;
      BackActionEnabled := TRUE;
      NextActionEnabled := TRUE;

      FirstStepVisible := FALSE;
      Step1Visible := FALSE;
      Step2Visible := FALSE;
      Step3Visible := FALSE;
      FinalStepVisible := FALSE;
    END;

    LOCAL PROCEDURE NextStep@41(Backwards@1000 : Boolean);
    BEGIN
      IF Backwards THEN
        Step := Step - 1
      ELSE
        Step := Step + 1;

      EnableControls(Backwards);
    END;

    LOCAL PROCEDURE FinishAction@12();
    BEGIN
      StoreSetup;
      CurrPage.CLOSE;
    END;

    LOCAL PROCEDURE StoreSetup@3();
    VAR
      SetCheckSetup@1000000000 : Codeunit 70010;
    BEGIN
      IF NOT Setup.GET THEN BEGIN
        Setup.INIT;
        Setup.INSERT;
      END;

      IF NOT CheckSetup.GET THEN BEGIN
        CheckSetup.INIT;
        CheckSetup.INSERT;
      END;

      CALCFIELDS(Logo, "Document Watermark", "List Report Watermark");
      Setup.TRANSFERFIELDS(Rec);

      IF NOT Setup.Logo.HASVALUE THEN
        Setup.GetCompanyLogo;

      Setup.MODIFY;
      IF ReplaceReports THEN
        Setup.ReplaceReportSelection(TRUE);
      IF CreateTheWebService THEN
        CreateWebService;

      SetCheckSetup.SetCheckType(Setup, CheckSetup);
    END;

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Page 70006 ForNAV Fields Webservice
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=ENU=FieldsEx;
    SourceTable=Table2000000041;
    PageType=List;
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                CaptionML=ENU=TableNo;
                SourceExpr=TableNo }

    { 4   ;2   ;Field     ;
                CaptionML=[DAN=Nummer;
                           DEU=Nr.;
                           ENU=No.;
                           ESP=Nß;
                           FIN=Nro;
                           FRA=N¯;
                           ISL=Nr.;
                           ITA=Nr.;
                           NLD=Nr.;
                           NOR=Nr.;
                           SVE=Nr];
                SourceExpr="No." }

    { 6   ;2   ;Field     ;
                CaptionML=ENU=TableName;
                SourceExpr=TableName }

    { 8   ;2   ;Field     ;
                CaptionML=ENU=FieldName;
                SourceExpr=FieldName }

    { 10  ;2   ;Field     ;
                CaptionML=ENU=Type;
                SourceExpr=Type }

    { 12  ;2   ;Field     ;
                CaptionML=ENU=Class;
                SourceExpr=Class }

    { 3   ;2   ;Field     ;
                SourceExpr=RelationTableNo }

    { 5   ;2   ;Field     ;
                SourceExpr=RelationFieldNo }

    { 7   ;2   ;Field     ;
                SourceExpr=OptionString }

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Page 70016 ForNAV Replace Reports
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    CaptionML=[DAN=Erstat med Rapport;
               DEU=Ersetzen mit Berichts;
               ENU=ForNAV Replace With Report;
               ESP=Id. de informe;
               FIN=Korvata Raportin tunnus;
               FRA=Remplacer par Çtat;
               ISL=Skipta £t fyrir SkÏrslukenni;
               ITA=Sostituirlo con report;
               NLD=Vervang door Rapport;
               NOR=Erstatt med Rapport;
               SVE=ErsÑtta med Rapport];
    SourceTable=Table70016;
    PageType=List;
    ActionList=ACTIONS
    {
      { 8       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;Action    ;
                      Name=ReplaceReports;
                      CaptionML=[DAN=Erstatte Rapportvalg;
                                 DEU=Berichtsauswahl Ersetzen;
                                 ENU=Replace Report Selections;
                                 ESP=Reemplazar Selecci¢n informes;
                                 FIN=Korvata Raporttivalinnat;
                                 FRA=Remplacer SÇlection des Çtats;
                                 ISL=Skipta £t SkÏrsluval;
                                 ITA=Sostituire Selezioni report;
                                 NLD=Vervang Rapportselecties;
                                 NOR=Erstatte Rapportvalg;
                                 SVE=Byt rapportval];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Default;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CreateForNAVDefaultReportReplacement;
                               END;
                                }
      { 10      ;1   ;Action    ;
                      Name=Test;
                      CaptionML=[DAN=Test;
                                 DEU=Test;
                                 ENU=Test;
                                 ESP=Test;
                                 FIN=Test;
                                 FRA=Test;
                                 ISL=Test;
                                 ITA=Test;
                                 NLD=Test;
                                 NOR=Test;
                                 SVE=Test];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=TestReport;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TestReport;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                SourceExpr="Report ID" }

    { 4   ;2   ;Field     ;
                SourceExpr="User-ID" }

    { 5   ;2   ;Field     ;
                SourceExpr="Replace-With Report ID" }

    { 6   ;2   ;Field     ;
                SourceExpr="Report Name" }

    { 7   ;2   ;Field     ;
                SourceExpr="Replace-With Report Name" }

  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Page 70310 ForNAV Check Setup
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table70310;
    PageType=Card;
    OnOpenPage=BEGIN
                 InitSetup;
               END;

    ActionList=ACTIONS
    {
      { 1000000025;  ;ActionContainer;
                      Name=ActionItems;
                      ActionContainerType=ActionItems }
      { 1000000024;1 ;ActionGroup;
                      Name=Watermark }
      { 1000000023;2 ;Action    ;
                      Name=DownloadWatermark;
                      CaptionML=ENU=Download Watermarks;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Link;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DownloadWatermarks;
                               END;
                                }
      { 1000000022;1 ;ActionGroup;
                      Name=Delete Visuals }
      { 1000000019;2 ;Action    ;
                      Name=DeleteWatermark;
                      CaptionML=[DAN=Vandmërke;
                                 DEU=Wasserzeichen;
                                 ENU=Watermark;
                                 ESP=Filigrana;
                                 FIN=Vesileima;
                                 FRA=Filigrane;
                                 ISL=Vatnsmerki;
                                 ITA=Filigrana;
                                 NLD=Watermerk;
                                 NOR=Vannmerke;
                                 SVE=VattenmÑrke];
                      Image=Delete;
                      OnAction=VAR
                                 AreYouSureQst@1000 : TextConst 'ENU=Are you sure you want to clear %1?';
                               BEGIN
                                 IF NOT CONFIRM(AreYouSureQst, FALSE, FIELDCAPTION(Watermark)) THEN
                                   EXIT;

                                 "Watermark File Name" := 'Click to import...';
                                 CLEAR(Watermark);
                                 MODIFY;
                               END;
                                }
      { 1000000011;2 ;Action    ;
                      Name=DeleteSignature;
                      CaptionML=ENU=Signature;
                      Image=Delete;
                      OnAction=VAR
                                 AreYouSureQst@1000 : TextConst 'ENU=Are you sure you want to clear %1?';
                               BEGIN
                                 IF NOT CONFIRM(AreYouSureQst, FALSE, FIELDCAPTION(Signature)) THEN
                                   EXIT;

                                 "Signature File Name" := 'Click to import...';
                                 CLEAR(Signature);
                                 MODIFY;
                               END;
                                }
      { 1000000018;1 ;ActionGroup;
                      Name=System }
      { 1000000017;2 ;Action    ;
                      Name=ReplaceReports;
                      CaptionML=ENU=Replace Reportselection;
                      Image=SwitchCompanies;
                      OnAction=BEGIN
                                 ERROR('TODO');
                                 //ReplaceReportSelection(FALSE);
                               END;
                                }
      { 1000000014;1 ;ActionGroup;
                      Name=Template }
      { 1000000012;2 ;Action    ;
                      Name=DesignTemplate;
                      CaptionML=ENU=Design;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=VATPostingSetup;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 DesignTemplate;
                               END;
                                }
      { 1000000007;  ;ActionContainer;
                      Name=RelatedInformation;
                      ActionContainerType=RelatedInformation }
      { 1000000006;1 ;Action    ;
                      Name=Translations;
                      CaptionML=[DAN=Oversëttelse;
                                 DEU=öbersetzung;
                                 ENU=Translations;
                                 ESP=Traducci¢n;
                                 FIN=KÑÑnnîs;
                                 FRA=Traduction;
                                 ISL=ËÏ–ingar;
                                 ITA=Traduzioni;
                                 NLD=Vertaling;
                                 NOR=Oversettelse;
                                 SVE=ôversÑttning];
                      RunObject=Page 70001;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Translations;
                      PromotedCategory=Report }
    }
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                ContainerType=ContentArea }

    { 1000000001;1;Group  ;
                Name=General;
                GroupType=Group }

    { 1000000002;2;Field  ;
                SourceExpr=Layout }

    { 1000000015;2;Field  ;
                SourceExpr="No. of Lines (Stub)" }

    { 1000000009;1;Group  ;
                Name=Visuals;
                GroupType=Group }

    { 1000000008;2;Field  ;
                CaptionML=[DAN=Vandmërke;
                           DEU=Wasserzeichen;
                           ENU=Watermark;
                           ESP=Filigrana;
                           FIN=Vesileima;
                           FRA=Filigrane;
                           ISL=Vatnsmerki;
                           ITA=Filigrana;
                           NLD=Watermerk;
                           NOR=Vannmerke;
                           SVE=VattenmÑrke];
                SourceExpr="Watermark File Name";
                OnDrillDown=VAR
                              TempBlob@1001 : Record 99008535;
                              FileManagement@1000 : Codeunit 419;
                            BEGIN
                              CALCFIELDS(Watermark);
                              IF "Watermark File Name" <> 'Click to import...' THEN BEGIN
                                TempBlob.Blob := Watermark;
                                HYPERLINK(FileManagement.BLOBExport(TempBlob, "Watermark File Name", FALSE));
                              END ELSE
                                ImportWatermarkFromClientFile(FIELDNO(Watermark));
                              MODIFY;
                            END;
                             }

    { 1000000010;2;Field  ;
                SourceExpr="Signature File Name";
                OnDrillDown=VAR
                              TempBlob@1000000001 : Record 99008535;
                              FileManagement@1000000000 : Codeunit 419;
                            BEGIN
                              CALCFIELDS(Signature);
                              IF "Signature File Name" <> 'Click to import...' THEN BEGIN
                                TempBlob.Blob := Signature;
                                HYPERLINK(FileManagement.BLOBExport(TempBlob, "Signature File Name", FALSE));
                              END ELSE
                                ImportWatermarkFromClientFile(FIELDNO(Signature));
                              MODIFY;
                            END;
                             }

    { 1000000005;0;Container;
                ContainerType=FactBoxArea }

    { 1000000004;1;Part   ;
                PartType=System;
                SystemPartID=MyNotes }

    { 1000000003;1;Part   ;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2017 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    }
    END.
  }
}

OBJECT Query 70240 ForNAV Inventory to G/L Recon.
{
  OBJECT-PROPERTIES
  {
    Date=;
    Time=;
    Version List=FORNAV3.2.0.1579/RP2.0.0;
  }
  PROPERTIES
  {
  }
  ELEMENTS
  {
    { 1000000004;;DataItem;                  ;
               DataItemTable=Table27 }

    { 1000000001;1;Column;                   ;
               DataSource=No. }

    { 1000000003;1;Filter;                   ;
               DataSource=Date Filter }

    { 1000000002;1;DataItem;                 ;
               DataItemTable=Table5802;
               DataItemLink=Item No.=Item."No.",
                            Posting Date=Item."Date Filter",
                            Location Code=Item."Location Filter",
                            Variant Code=Item."Variant Filter" }

    { 1000000016;2;Column;                   ;
               DataSource=Variant Code }

    { 1000000005;2;Column;                   ;
               DataSource=Location Code }

    { 1000000017;2;Filter;                   ;
               ColumnFilter=Item_Ledger_Entry_No=FILTER(<>0);
               DataSource=Item Ledger Entry No. }

    { 1000000000;2;Filter;                   ;
               ColumnFilter=Valued_Quantity=FILTER(<0);
               DataSource=Valued Quantity }

    { 1000000006;2;Column;                   ;
               DataSource=Cost Amount (Expected);
               MethodType=Totals;
               Method=Sum }

    { 1000000007;2;Column;                   ;
               DataSource=Cost Amount (Expected) (ACY);
               MethodType=Totals;
               Method=Sum }

    { 1000000008;2;Column;Sum_Expected_Cost_Posted_to_GL;
               DataSource=Expected Cost Posted to G/L;
               MethodType=Totals;
               Method=Sum }

    { 1000000009;2;Column;Sum_Exp_Cost_Posted_to_GL_ACY;
               DataSource=Exp. Cost Posted to G/L (ACY);
               MethodType=Totals;
               Method=Sum }

    { 1000000010;2;Column;                   ;
               DataSource=Valued Quantity;
               MethodType=Totals;
               Method=Sum }

    { 1000000011;2;Column;                   ;
               DataSource=Invoiced Quantity;
               MethodType=Totals;
               Method=Sum }

    { 1000000012;2;Column;                   ;
               DataSource=Cost Amount (Actual);
               MethodType=Totals;
               Method=Sum }

    { 1000000013;2;Column;                   ;
               DataSource=Cost Amount (Actual) (ACY);
               MethodType=Totals;
               Method=Sum }

    { 1000000014;2;Column;                   ;
               DataSource=Cost Posted to G/L;
               MethodType=Totals;
               Method=Sum }

    { 1000000015;2;Column;                   ;
               DataSource=Cost Posted to G/L (ACY);
               MethodType=Totals;
               Method=Sum }

  }
  CODE
  {

    BEGIN
    END.
  }
}

