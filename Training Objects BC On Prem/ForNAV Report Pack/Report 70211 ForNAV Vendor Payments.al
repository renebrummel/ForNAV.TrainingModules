dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.3.2.0.1579")
	{
		type(ForNav.Report; ForNavReport70211){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream70211){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 70211 "ForNAV Vendor Payments"
{
	Caption = 'Vendor Payments';
	WordLayout = './Layouts/ForNAV Vendor Payments.docx'; DefaultLayout = Word;

	dataset
	{
		dataitem(Args;"ForNAV Vendor Payments Args.")
		{
			DataItemTableView = sorting("Consider Discount");
			UseTemporary = true;
			column(ReportForNavId_1; 1) {}
			dataitem(Vendor;Vendor)
			{
				PrintOnlyIfDetail = true;
				RequestFilterFields = "No.","Vendor Posting Group","Purchaser Code",Priority,"Payment Method Code";
				column(ReportForNavId_3182; 3182) {}
				dataitem("Vendor Ledger Entry";"Vendor Ledger Entry")
				{
					CalcFields = Amount,"Remaining Amount","Remaining Amt. (LCY)","Amount (LCY)";
					DataItemLink = "Vendor No."=field("No."),"Global Dimension 1 Code"=field("Global Dimension 1 Filter"),"Global Dimension 2 Code"=field("Global Dimension 2 Filter");
					DataItemTableView = sorting("Vendor No.",Open,Positive,"Due Date","Currency Code") where(Open=const(true),"On Hold"=const(''));
					column(ReportForNavId_4114; 4114) {}
					column(DiscountToTake; DiscountToTake)
					{
						IncludeCaption = false;
					}
					trigger OnAfterGetRecord();
					begin
						if "Original Pmt. Disc. Possible" < 0 then
						  SetRange("Date Filter",Args."Payment Date", Args."Payment Discount Date");
						CalcAmounts("Vendor Ledger Entry");
					end;
					
					trigger OnPreDataItem();
					begin
						FilterGroup(-1);
						SetRange("Pmt. Discount Date",Args."Payment Date", Args."Payment Discount Date");
						SetRange("Due Date",0D,Args."Due Date Filter");
						FilterGroup(0);
						SetCurrentkey("Original Pmt. Disc. Possible");
					end;
					
				}
				trigger OnPreDataItem();
				begin
					if (Args."Due Date Filter" = 0D)  then
					  Args.TestField("Consider Discount");
				
					if not Args."Consider Discount" then
					  Args.TestField("Due Date Filter");
				end;
				
			}
			trigger OnAfterGetRecord();
			begin
				if Args."Payment Date" = 0D then
				  Args."Payment Date" := WorkDate;
				if "Consider Discount" and (Args."Payment Discount Date" < Args."Payment Date") then
				  Args."Payment Discount Date" := Args."Payment Date";
			end;
			
		}
	}

	requestpage
	{
		SaveValues = true;

		layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(PaymentDate;Args."Payment Date")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Payment Date';
					}
					field(DueDateFilter;Args."Due Date Filter")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Due Date Filter';
					}
					field(TakePaymentDiscounts;Args."Consider Discount")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Consider Discount';
					}
					field(LastDiscDateToTake;Args."Payment Discount Date")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Payment Discount Date';
					}
					field(UseLocalCurrency;Args."Print Amounts in LCY")
					{
						ApplicationArea = Suite;
						Caption = 'Print Amounts in LCY';
					}
					field(UseExternalDocumentNo;Args."External Document No.")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'External Document No.';
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		actions
		{
		}

		trigger OnClosePage()
		begin
			if not Args."Consider Discount" then
			  Args."Payment Discount Date" := 0D
			else
			  if Args."Payment Discount Date" < Args."Payment Date" then
				Args."Payment Discount Date" := Args."Payment Date";
		end;

		trigger OnOpenPage()
		begin
			if (Args."Due Date Filter" = 0D) and (not Args."Consider Discount") then
			  Args."Consider Discount" := true;
		end;
	}

	trigger OnInitReport()
	begin
		Codeunit.Run(Codeunit::"ForNAV First Time Setup");
		Commit;
		LoadWatermark;
		;ReportForNav:= ReportForNav.Report(CurrReport.ObjectId, CurrReport.Language, SerialNumber, UserId, COMPANYNAME); ReportForNav.Init;
	end;


	trigger OnPostReport()
	begin
		ReportForNav.Post;
	end;


	trigger OnPreReport()
	begin
		Args.Insert;
		;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;if not ReportForNav.Pre then CurrReport.Quit;
	end;

	var
		DiscountToTake: Decimal;

	procedure CalcAmounts(VendorLedgerEntry: Record "Vendor Ledger Entry")
	var
		DiscountToTakeLCY: Decimal;
		Currency: Record Currency;
		CurrExchRate: Record "Currency Exchange Rate";
	begin
		VendorLedgerEntry.SetRange("Date Filter",0D,Args."Due Date Filter");
		VendorLedgerEntry.CalcFields(Amount,"Remaining Amount","Remaining Amt. (LCY)");
		if (VendorLedgerEntry."Original Pmt. Disc. Possible" < 0) and (VendorLedgerEntry."Pmt. Discount Date" >= Args."Payment Date") then
		  DiscountToTake := -VendorLedgerEntry."Original Pmt. Disc. Possible"
		else
		  DiscountToTake := 0;
		if (Vendor."Currency Code" <> '')  then begin
		  if VendorLedgerEntry."Remaining Amount" <> 0 then
			DiscountToTakeLCY := DiscountToTake * VendorLedgerEntry."Remaining Amt. (LCY)" / VendorLedgerEntry."Remaining Amount"
		  else
			DiscountToTakeLCY := 0;
		  if Args."Print Amounts in LCY" then begin
			if VendorLedgerEntry."Currency Code" <> Vendor."Currency Code" then
			  DiscountToTake :=
				ROUND(
				  CurrExchRate.ExchangeAmtFCYToFCY(
					Args."Payment Date",
					VendorLedgerEntry."Currency Code",
					Vendor."Currency Code",
					DiscountToTake),
				  Currency."Amount Rounding Precision");
		  end else
			DiscountToTake := DiscountToTakeLCY;
		end;
	end;

	local procedure LoadWatermark()
	var
		ForNAVSetup: Record "ForNAV Setup";
		OutStream: OutStream;
	begin
		with ForNAVSetup do begin
		  Get;
		  CalcFields("List Report Watermark");
		  if not "List Report Watermark".Hasvalue then
			exit;
		  "List Report Watermark".CreateOutstream(OutStream);
		  ReportForNav.Watermark.Image.Load(OutStream);
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport70211;
		[RunOnClient]
		ReportForNavClient : DotNet ForNavReport70211;
		ReportForNavDialog : Dialog;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	trigger ReportForNav::OnInit();
	begin
		if ReportForNav.IsWindowsClient then begin
			ReportForNav.CheckClientAddIn();
			ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
			ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
		end;
	end;

	trigger ReportForNav::OnSave(Base64Layout : Text);
	var
		CustomReportLayout : Record "Custom Report Layout";
		ReportLayoutSelection : Record "Report Layout Selection";
		LayoutId : Variant;
		TempBlob : Record TempBlob;
		OutStream : OutStream;
		Bstr : BigText;
		EmptyLayout : Text;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
		LayoutId := ReportLayoutSelection."Custom Report Layout Code";
		if ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 then begin
			if FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout then begin
				LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
			end else begin
			if ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) then begin
				LayoutId := ReportLayoutSelection."Custom Report Layout Code";
			end;
		end;
		end else begin
			if CONFIRM('Default custom layout not found. Create one?') then;
		end;
		if FORMAT(LayoutId) <> EmptyLayout then begin
			TempBlob.Blob.CREATEOUTSTREAM(OutStream);
			Bstr.ADDTEXT(Base64Layout);
			Bstr.WRITE(OutStream);
			CustomReportLayout.GET(LayoutId);
			CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
		end;
	end;

	trigger ReportForNav::OnParameters(Parameters : Text);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
	end;

	trigger ReportForNav::OnPreview(Parameters : Text;FileName : Text);
	var
		PdfFile : File;
		InStream : InStream;
		OutStream : OutStream;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		COMMIT;
		PdfFile.CREATETEMPFILE;
		PdfFile.CREATEOUTSTREAM(OutStream);
		REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
		PdfFile.CREATEINSTREAM(InStream);
		ReportForNavClient.ShowDesigner;
		if ReportForNav.IsValidPdf(PdfFile.NAME) then DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
		PdfFile.CLOSE;
	end;

	trigger ReportForNav::OnSelectPrinter();
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
	end;

	trigger ReportForNav::OnPrint(InStream : DotNet SystemIOStream70211);
	var
		ClientFileName : Text[255];
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
		ReportForNavClient.Print(ClientFileName); 
	end;

	trigger ReportForNav::OnDesign(Data : Text);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNavClient.Data := Data;
		while ReportForNavClient.DesignReport do begin
			ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
			SLEEP(100);
		end;
	end;

	trigger ReportForNav::OnView(ClientFileName : Text;Parameters : Text;ServerFileName : Text);
	var
		ServerFile : File;
		ServerInStream : InStream;
		"Filter" : Text;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ServerFile.OPEN(ServerFileName);
		ServerFile.CREATEINSTREAM(ServerInStream);
		if STRLEN(ClientFileName) >= 4 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' then Filter := 'PDF (*.pdf)|*.pdf';
		if STRLEN(ClientFileName) >= 4 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' then Filter := 'Microsoft Word (*.doc)|*.doc';
		if STRLEN(ClientFileName) >= 5 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' then Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
		DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
	end;

	trigger ReportForNav::OnMessage(Operation : Text;Parameter : Text;ParameterNo : Integer);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		case Operation of
			'Open'	: ReportForNavDialog.Open(Parameter);
			'Update'  : ReportForNavDialog.Update(ParameterNo,Parameter);
			'Close'   : ReportForNavDialog.Close();
			'Message' : Message(Parameter);
			'Error'   : Error(Parameter);
		end;
	end;

	trigger ReportForNav::OnPrintPreview(InStream : DotNet SystemIOStream70211;Preview : Boolean);
	var
		ClientFileName : Text[255];
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		CurrReport.Language := System.GlobalLanguage;
		DownloadFromStream(InStream, '', '<TEMP>', '', ClientFileName);
		ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
	end;

	trigger ReportForNav::OnGetWordLayout(reportNo: Integer)
	var
		layoutStream : InStream;
		zip: Codeunit "Zip Stream Wrapper";
		oStream: OutStream;
		iStream: InStream;
		layout: Text;
		dataContract: Text;
		tempBlob: Record "TempBlob";
		ReportLayoutSelection: Record "Report Layout Selection";
		CustomReportLayout: Record "Custom Report Layout";
		CustomLayoutID: Variant;
		EmptyLayout: Text;
		props: XmlDocument;
		prop: XmlNode;
		layoutNode: XmlNode;
	begin
		EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
		CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
		if Format(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout then
			CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
		else
			if ReportLayoutSelection.HasCustomLayout(reportNo) = 2 then
				CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

		if (Format(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) then begin
			CustomReportLayout.TestField(Type, CustomReportLayout.Type::Word);
			CustomReportLayout.CalcFields(Layout);
			CustomReportLayout.Layout.CreateInstream(layoutStream, TEXTENCODING::UTF8);
		end else
			Report.WordLayout(reportNo, layoutStream);
		zip.OpenZipFromStream(layoutStream, false);
		tempBlob.Blob.CreateOutStream(oStream);
		zip.WriteEntryFromZipToOutStream('docProps/custom.xml', oStream);
		tempBlob.Blob.CreateInStream(iStream);
		XmlDocument.ReadFrom(iStream, props);
		props.GetChildNodes().Get(1, prop);
		prop.AsXmlElement().GetChildNodes().Get(1, layoutNode);
		layout := layoutNode.AsXmlElement().InnerText();
		ReportForNav.WordLayout := layout;
	end;
	procedure ReportForNav_GetPageNo() : Integer
	begin
		exit(ReportForNav.PageNo);
	end;

	trigger ReportForNav::OnTotals(DataItemId: Text; Operation: Text; GroupTotalFieldNo: Integer)
	begin
		// Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
		case DataItemId of
			'Vendor':
				with Vendor do case Operation of
				end;
			'VendorLedgerEntry':
				with "Vendor Ledger Entry" do case Operation of
					'Add': begin
						ReportForNav.AddTotal(DataItemId,0,"Remaining Amount");
						ReportForNav.AddTotal(DataItemId,1,Amount);
						ReportForNav.AddTotal(DataItemId,2,"Remaining Amt. (LCY)");
						ReportForNav.AddTotal(DataItemId,3,"Amount (LCY)");
					end;
					'Restore': begin
						"Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
						Amount := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
						"Remaining Amt. (LCY)" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
						"Amount (LCY)" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
					end;
				end;
			end;
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
