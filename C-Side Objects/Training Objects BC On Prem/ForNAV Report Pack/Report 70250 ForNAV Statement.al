dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.3.2.0.1579")
	{
		type(ForNav.Report; ForNavReport70250){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream70250){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 70250 "ForNAV Statement"
{

	Caption = 'Statement';
	WordLayout = './Layouts/ForNAV Statement.docx'; DefaultLayout = Word;

	dataset
	{
		DataItem(Args;"ForNAV Statement Arguments")
		{
			DataItemTableView = sorting("Start Date");
			column(ReportForNavId_1000000001; 1000000001) {}
		}
		DataItem(Customer;Customer)
		{
			CalcFields = Balance;
			PrintOnlyIfDetail = true;
			RequestFilterFields = "No.";
			column(ReportForNavId_2; 2) {}
			DataItem(CurrencyLoop;Currency)
			{
				DataItemTableView = sorting(Code);
				PrintOnlyIfDetail = true;
				UseTemporary = true;
				column(ReportForNavId_6523; 6523) {}
				DataItem("Cust. Ledger Entry";"Cust. Ledger Entry")
				{
					CalcFields = "Remaining Amount","Original Amount";
					DataItemTableView = sorting("Customer No.","Posting Date","Currency Code");
					column(ReportForNavId_3; 3) {}
					trigger OnPreDataItem();
					begin
						SetRange("Customer No.", Customer."No.");
						SetRange("Posting Date", Args."Start Date", Args."Ending Date");
						SetRange("Currency Code",CurrencyLoop.Code);
						SetRange("Date Filter", Args."Start Date", Args."Ending Date");
					end;
					
				}
				DataItem(OverdueEntry;"Cust. Ledger Entry")
				{
					CalcFields = "Original Amount","Remaining Amount";
					DataItemLink = "Customer No."=field("No.");
					DataItemLinkReference = Customer;
					DataItemTableView = sorting("Customer No.",Open,Positive,"Due Date");
					column(ReportForNavId_9065; 9065) {}
					trigger OnAfterGetRecord();
					begin
						if Args."Include Aging Band" then begin
						  if ("Posting Date" > Args."Ending Date") and ("Due Date" >= Args."Ending Date") then
							CurrReport.Skip;
						  if Args.Date = Args.Date::"Due Date" then
							if "Due Date" >= Args."Ending Date" then
							  CurrReport.Skip;
						end;
					
						CalcFields("Remaining Amount");
						if "Remaining Amount" = 0 then
						  CurrReport.Skip;
					
						if "Due Date" >= Args."Ending Date" then
						  CurrReport.Skip;
					end;
					
					trigger OnPreDataItem();
					begin
						SetRange("Customer No.", Customer."No.");
						if not Args."Include Aging Band" then
						  SetRange("Due Date", 0D, Args."Ending Date"- 1);
						SetRange("Currency Code", CurrencyLoop.Code);
						if (not Args."Show Overdue Entries") and (not Args."Include Aging Band") then
						  CurrReport.Break;
					end;
					
				}
				trigger OnAfterGetRecord();
				begin
					Customer.SetRange("Date Filter",0D, Args."Start Date" - 1);
					Customer.SetRange("Currency Filter",CurrencyLoop.Code);
					Customer.CalcFields("Net Change");
				end;
				
				trigger OnPostDataItem();
				begin
					Customer.SetRange("Currency Filter");
				end;
				
			}
			DataItem(AgingBuffer;"ForNAV Aging Buffer")
			{
				DataItemLink = "Account No."=field("No.");
				DataItemTableView = sorting("Entry No.");
				UseTemporary = true;
				column(ReportForNavId_1000000000; 1000000000) {}
			}
			trigger OnAfterGetRecord();
			begin
				
				ChangeLanguage("Language Code");
				ProcessCustomer;
				UpdateAging;
			end;
			
		}
	}

	requestpage
	{
		SaveValues = true;

		layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(DocumentDate;Args."Document Date")
					{
						ApplicationArea = Basic;
						Caption = 'Document Date';
					}
					field(StartDate;Args."Start Date")
					{
						ApplicationArea = Basic;
						Caption = 'Start Date';
					}
					field(EndDate;Args."Ending Date")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Ending Date';
					}
					field(ShowOverdueEntries;Args."Show Overdue Entries")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Show Overdue Entries';
					}
					group(Include)
					{
						Caption = 'Include';
						field(IncludeAllCustomerswithLE;Args."Print All Having Balance")
						{
							ApplicationArea = Basic,Suite;
							Caption = 'Include All Customers with a Balance';
							MultiLine = true;

							trigger OnValidate()
							begin
								if not Args."Print All Having Entries" then
								  Args."Print All Having Balance" := true;
							end;
						}
						field(IncludeAllCustomerswithBalance;Args."Print All Having Entries")
						{
							ApplicationArea = Basic,Suite;
							Caption = 'Include All Customers with Ledger Entries';
							MultiLine = true;

							trigger OnValidate()
							begin
								if not Args."Print All Having Balance" then
								  Args."Print All Having Entries" := true;
							end;
						}
					}
					group("Aging Band by")
					{
						Caption = 'Aging Band by';
						field(IncludeAgingBand;Args."Include Aging Band")
						{
							ApplicationArea = Basic,Suite;
							Caption = 'Include Aging Band';
						}
						field(AgingBandPeriodLengt;Args."Period Length")
						{
							ApplicationArea = Basic,Suite;
							Caption = 'Period Length';
						}
						field(AgingBandby;Args.Date)
						{
							ApplicationArea = Basic,Suite;
							Caption = 'Aging Band by';
						}
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
				group("Output Options")
				{
					Caption = 'Output Options';
					field(ReportOutput;SupportedOutputMethod)
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Report Output';
						OptionCaption = 'Print,Preview,Word,PDF,Email,XML';

						trigger OnValidate()
						var
							CustomLayoutReporting: Codeunit "Custom Layout Reporting";
						begin
							//ShowPrintRemaining := (SupportedOutputMethod = SupportedOutputMethod::Email);

							case SupportedOutputMethod of
							  Supportedoutputmethod::Print:
								ChosenOutputMethod := CustomLayoutReporting.GetPrintOption;
							  Supportedoutputmethod::Preview:
								ChosenOutputMethod := CustomLayoutReporting.GetPreviewOption;
							  Supportedoutputmethod::Word:
								ChosenOutputMethod := CustomLayoutReporting.GetWordOption;
							  Supportedoutputmethod::Pdf:
								ChosenOutputMethod := CustomLayoutReporting.GetPDFOption;
							  Supportedoutputmethod::Email:
								ChosenOutputMethod := CustomLayoutReporting.GetEmailOption;
							  Supportedoutputmethod::Xml:
								ChosenOutputMethod := CustomLayoutReporting.GetXMLOption;
							end;
						end;
					}
					field(ChosenOutput;ChosenOutputMethod)
					{
						ApplicationArea = Advanced;
						Visible = false;
					}
				}
			}
		}

		actions
		{
		}

		trigger OnOpenPage()
		begin
			InitRequestPageDataInternal
		end;
	}

	trigger OnInitReport()
	begin
		GLSetup.Get;
		;ReportForNav:= ReportForNav.Report(CurrReport.ObjectId, CurrReport.Language, SerialNumber, UserId, COMPANYNAME); ReportForNav.Init;
	end;


	trigger OnPostReport()
	begin
		ReportForNav.Post;
	end;


	trigger OnPreReport()
	begin
		Codeunit.Run(Codeunit::"ForNAV First Time Setup");
		Commit;
		LoadWatermark;
		;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;if not ReportForNav.Pre then CurrReport.Quit;
	end;

	var
		GLSetup: Record "General Ledger Setup";
		Language: Record Language;
		SupportedOutputMethod: Option Print,Preview,Word,Pdf,Email,Xml;
		ChosenOutputMethod: Integer;

	local procedure ChangeLanguage(LanguageCode: Code[10])
	var
		ForNAVSetup: Record "ForNAV Setup";
		Language: Record Language;
	begin
		ForNAVSetup.Get;
		if ForNAVSetup."Inherit Language Code" then
		  CurrReport.Language(Language.GetLanguageID(LanguageCode));
	end;

	local procedure ProcessCustomer()
	var
		Currency: Record Currency;
	begin
		CurrencyLoop.Reset;
		CurrencyLoop.DeleteAll;
		with Customer do begin
		  if not CurrReport.Preview then begin
			LockTable;
			Find;
			"Last Statement No." := "Last Statement No." + 1;
			Modify;
			Commit;
		  end else
			"Last Statement No." := "Last Statement No." + 1;
		  SetRange("Date Filter",0D, Args."Ending Date");
		  CalcFields("Net Change");
		  if ("Net Change" <> 0) or Args."Print All Having Balance" then begin
			CurrencyLoop.Code := '';
			CurrencyLoop.Insert;
			Copyfilter("Currency Filter", Currency.Code);
			if Currency.FindSet then
			  repeat
				CurrencyLoop := Currency;
				CurrencyLoop.Insert;
			  until Currency.Next = 0;
		  end;
		end;
	end;

	local procedure GetDate(PostingDate: Date;DueDate: Date): Date
	begin
		if Args.Date = Args.Date::"Posting Date" then
		  exit(PostingDate);
		exit(DueDate);
	end;

	local procedure InitRequestPageDataInternal()
	begin
		with Args do begin
		  if (not "Print All Having Entries") and (not "Print All Having Balance") then
			"Print All Having Balance" := true;
		  if Format("Period Length") = '' then
			Evaluate("Period Length",'<1M+CM>');
		  if "Document Date" = 0D then
			"Document Date" := Today;
		  if "Start Date" = 0D then
			"Start Date" := WorkDate;
		  if "Ending Date" = 0D then
			"Ending Date" := WorkDate;
		end;
	end;

	local procedure UpdateAging()
	var
		AgingArgs: Record "ForNAV Aged Accounts Args.";
		CustomerAging: Codeunit "ForNAV Customer Aging";
	begin
		if not Args."Include Aging Band" then
		  exit;
		case Args.Date of
		  Args.Date::"Due Date":
			AgingArgs."Aging By" := AgingArgs."aging by"::"Due Date";
		  Args.Date::"Posting Date":
			AgingArgs."Aging By" := AgingArgs."aging by"::"Posting Date";
		end;
		AgingArgs."Ending Date" := Args."Ending Date";
		AgingArgs."Period Length" := Args."Period Length";
		AgingArgs."Column Count" := 5;
		AgingArgs.CalcDates;
		CustomerAging.GetAging(Customer, AgingBuffer, AgingArgs);
	end;

	local procedure LoadWatermark()
	var
		ForNAVSetup: Record "ForNAV Setup";
		OutStream: OutStream;
	begin
		with ForNAVSetup do begin
		  Get;
		  CalcFields("Document Watermark");
		  if not "Document Watermark".Hasvalue then
			exit;
		  "Document Watermark".CreateOutstream(OutStream);
		  ReportForNav.Watermark.Image.Load(OutStream);
		end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport70250;
		[RunOnClient]
		ReportForNavClient : DotNet ForNavReport70250;
		ReportForNavDialog : Dialog;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	trigger ReportForNav::OnInit();
	begin
		if ReportForNav.IsWindowsClient then begin
			ReportForNav.CheckClientAddIn();
			ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
			ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
		end;
	end;

	trigger ReportForNav::OnSave(Base64Layout : Text);
	var
		CustomReportLayout : Record "Custom Report Layout";
		ReportLayoutSelection : Record "Report Layout Selection";
		LayoutId : Variant;
		TempBlob : Record TempBlob;
		OutStream : OutStream;
		Bstr : BigText;
		EmptyLayout : Text;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
		LayoutId := ReportLayoutSelection."Custom Report Layout Code";
		if ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 then begin
			if FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout then begin
				LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
			end else begin
			if ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) then begin
				LayoutId := ReportLayoutSelection."Custom Report Layout Code";
			end;
		end;
		end else begin
			if CONFIRM('Default custom layout not found. Create one?') then;
		end;
		if FORMAT(LayoutId) <> EmptyLayout then begin
			TempBlob.Blob.CREATEOUTSTREAM(OutStream);
			Bstr.ADDTEXT(Base64Layout);
			Bstr.WRITE(OutStream);
			CustomReportLayout.GET(LayoutId);
			CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
		end;
	end;

	trigger ReportForNav::OnParameters(Parameters : Text);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
	end;

	trigger ReportForNav::OnPreview(Parameters : Text;FileName : Text);
	var
		PdfFile : File;
		InStream : InStream;
		OutStream : OutStream;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		COMMIT;
		PdfFile.CREATETEMPFILE;
		PdfFile.CREATEOUTSTREAM(OutStream);
		REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
		PdfFile.CREATEINSTREAM(InStream);
		ReportForNavClient.ShowDesigner;
		if ReportForNav.IsValidPdf(PdfFile.NAME) then DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
		PdfFile.CLOSE;
	end;

	trigger ReportForNav::OnSelectPrinter();
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
	end;

	trigger ReportForNav::OnPrint(InStream : DotNet SystemIOStream70250);
	var
		ClientFileName : Text[255];
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
		ReportForNavClient.Print(ClientFileName); 
	end;

	trigger ReportForNav::OnDesign(Data : Text);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNavClient.Data := Data;
		while ReportForNavClient.DesignReport do begin
			ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
			SLEEP(100);
		end;
	end;

	trigger ReportForNav::OnView(ClientFileName : Text;Parameters : Text;ServerFileName : Text);
	var
		ServerFile : File;
		ServerInStream : InStream;
		"Filter" : Text;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ServerFile.OPEN(ServerFileName);
		ServerFile.CREATEINSTREAM(ServerInStream);
		if STRLEN(ClientFileName) >= 4 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' then Filter := 'PDF (*.pdf)|*.pdf';
		if STRLEN(ClientFileName) >= 4 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' then Filter := 'Microsoft Word (*.doc)|*.doc';
		if STRLEN(ClientFileName) >= 5 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' then Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
		DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
	end;

	trigger ReportForNav::OnMessage(Operation : Text;Parameter : Text;ParameterNo : Integer);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		case Operation of
			'Open'	: ReportForNavDialog.Open(Parameter);
			'Update'  : ReportForNavDialog.Update(ParameterNo,Parameter);
			'Close'   : ReportForNavDialog.Close();
			'Message' : Message(Parameter);
			'Error'   : Error(Parameter);
		end;
	end;

	trigger ReportForNav::OnPrintPreview(InStream : DotNet SystemIOStream70250;Preview : Boolean);
	var
		ClientFileName : Text[255];
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		CurrReport.Language := System.GlobalLanguage;
		DownloadFromStream(InStream, '', '<TEMP>', '', ClientFileName);
		ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
	end;

	trigger ReportForNav::OnGetWordLayout(reportNo: Integer)
	var
		layoutStream : InStream;
		zip: Codeunit "Zip Stream Wrapper";
		oStream: OutStream;
		iStream: InStream;
		layout: Text;
		dataContract: Text;
		tempBlob: Record "TempBlob";
		ReportLayoutSelection: Record "Report Layout Selection";
		CustomReportLayout: Record "Custom Report Layout";
		CustomLayoutID: Variant;
		EmptyLayout: Text;
		props: XmlDocument;
		prop: XmlNode;
		layoutNode: XmlNode;
	begin
		EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
		CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
		if Format(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout then
			CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
		else
			if ReportLayoutSelection.HasCustomLayout(reportNo) = 2 then
				CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

		if (Format(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) then begin
			CustomReportLayout.TestField(Type, CustomReportLayout.Type::Word);
			CustomReportLayout.CalcFields(Layout);
			CustomReportLayout.Layout.CreateInstream(layoutStream, TEXTENCODING::UTF8);
		end else
			Report.WordLayout(reportNo, layoutStream);
		zip.OpenZipFromStream(layoutStream, false);
		tempBlob.Blob.CreateOutStream(oStream);
		zip.WriteEntryFromZipToOutStream('docProps/custom.xml', oStream);
		tempBlob.Blob.CreateInStream(iStream);
		XmlDocument.ReadFrom(iStream, props);
		props.GetChildNodes().Get(1, prop);
		prop.AsXmlElement().GetChildNodes().Get(1, layoutNode);
		layout := layoutNode.AsXmlElement().InnerText();
		ReportForNav.WordLayout := layout;
	end;
	procedure ReportForNav_GetPageNo() : Integer
	begin
		exit(ReportForNav.PageNo);
	end;

	trigger ReportForNav::OnTotals(DataItemId: Text; Operation: Text; GroupTotalFieldNo: Integer)
	begin
		// Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
		case DataItemId of
			'OverdueEntry':
				with OverdueEntry do case Operation of
					'Add': begin
						ReportForNav.AddTotal(DataItemId,0,"Remaining Amount");
						ReportForNav.AddTotal(DataItemId,1,"Remaining Amount");
					end;
					'Restore': begin
						"Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
						"Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
					end;
				end;
			'AgingBuffer':
				with AgingBuffer do case Operation of
					'Add': begin
						ReportForNav.AddTotal(DataItemId,0,"Amount 1");
						ReportForNav.AddTotal(DataItemId,1,"Amount 2");
						ReportForNav.AddTotal(DataItemId,2,"Amount 3");
						ReportForNav.AddTotal(DataItemId,3,"Amount 4");
						ReportForNav.AddTotal(DataItemId,4,"Amount 5");
					end;
					'Restore': begin
						"Amount 1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
						"Amount 2" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
						"Amount 3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
						"Amount 4" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
						"Amount 5" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
					end;
				end;
			end;
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
