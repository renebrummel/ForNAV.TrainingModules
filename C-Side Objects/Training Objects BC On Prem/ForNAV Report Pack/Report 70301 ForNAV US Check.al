dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.3.2.0.1579")
	{
		type(ForNav.Report; ForNavReport70301){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream70301){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 70301 "ForNAV US Check"
{

	Caption = 'Check';
	WordLayout = './Layouts/ForNAV US Check.docx'; DefaultLayout = Word;

	dataset
	{
		dataitem(Args;"ForNAV Check Arguments")
		{
			DataItemTableView = sorting("Primary Key");
			UseTemporary = true;
			column(ReportForNavId_1000000002; 1000000002) {}
			dataitem(VoidGenJnlLine;"Gen. Journal Line")
			{
				DataItemTableView = sorting("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
				RequestFilterFields = "Journal Template Name","Journal Batch Name","Posting Date";
				column(ReportForNavId_9788; 9788) {}
				trigger OnAfterGetRecord();
				var
					CheckManagement: Codeunit CheckManagement;
				begin
					CheckManagement.VoidCheck(VoidGenJnlLine);
				end;
				
				trigger OnPreDataItem();
				var
					TestVoidCheck: Codeunit "ForNAV Test Void Check";
				begin
					if not TestVoidCheck.TestVoidCheck(VoidGenJnlLine, Args, CurrReport.Preview) then
					  CurrReport.Break;
				end;
				
			}
			dataitem(GenJnlLnBuffer;"Gen. Journal Line")
			{
				DataItemTableView = sorting("Journal Template Name","Journal Batch Name","Line No.");
				UseTemporary = true;
				column(ReportForNavId_1000000001; 1000000001) {}
				dataitem(Model;"ForNAV Check Model")
				{
					DataItemTableView = sorting("Page No.","Part No.","Line No.");
					UseTemporary = true;
					column(ReportForNavId_1000000004; 1000000004) {}
				}
				trigger OnAfterGetRecord();
				begin
					if not Args.CreateModelFromGenJnlLn(GenJnlLnBuffer, Model) then
					  CurrReport.Skip;
				end;
				
				trigger OnPreDataItem();
				begin
					CreateGenJnlLnBuffer;
				end;
				
			}
		}
	}

	requestpage
	{
		SaveValues = true;

		layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(BankAccount;Args."Bank Account No.")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Bank Account';
						TableRelation = "Bank Account";

						trigger OnValidate()
						begin
							InputBankAccount;
						end;
					}
					field(LastCheckNo;Args."Check No.")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Last Check No.';
					}
					field(OneCheckPerVendorPerDocumentNo;Args."One Check Per Vendor")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'One Check per Vendor per Document No.';
						MultiLine = true;

						trigger OnValidate()
						begin
							Args.TestField("Test Print", false);
						end;
					}
					field(ReprintChecks;Args."Reprint Checks")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Reprint Checks';
					}
					field(TestPrinting;Args."Test Print")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Test Print';

						trigger OnValidate()
						begin
							Args."One Check Per Vendor" := false;
						end;
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		actions
		{
		}

		trigger OnClosePage()
		begin
			Args.Modify;
		end;

		trigger OnOpenPage()
		begin
			if not Args.Get then
			  Args.Insert;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportForNav:= ReportForNav.Report(CurrReport.ObjectId, CurrReport.Language, SerialNumber, UserId, COMPANYNAME); ReportForNav.Init;
	end;


	trigger OnPostReport()
	begin
		ReportForNav.Post;
	end;


	trigger OnPreReport()
	begin
		Codeunit.Run(Codeunit::"ForNAV First Time Setup");
		Commit;
		CheckSetupIsValid;
		LoadWatermark;
		Args.TestMandatoryFields;
		if CurrReport.Preview then
		  Args."Test Print" := true;
		;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;if not ReportForNav.Pre then CurrReport.Quit;
	end;


	procedure SetArgs(Value: Record "ForNAV Check Arguments")
	begin
		Args := Value;
	end;

	[Scope('Personalization')]
	procedure InputBankAccount()
	var
		BankAccount: Record "Bank Account";
	begin
		if Args."Bank Account No." <> '' then begin
		  BankAccount.Get(Args."Bank Account No.");
		  BankAccount.TestField(Blocked,false);
		  BankAccount.TestField("Last Check No.");
		  Args."Check No." := BankAccount."Last Check No.";
		end;
	end;

	local procedure CheckSetupIsValid()
	var
		CheckSetup: Record "ForNAV Check Setup";
	begin
		with CheckSetup do begin
		  Get;
		  if Layout = Layout::" " then
			FieldError(Layout);
		end;
	end;

	local procedure LoadWatermark()
	var
		CheckSetup: Record "ForNAV Check Setup";
		OutStream: OutStream;
	begin
		with CheckSetup do begin
		  Get;
		  CalcFields(Watermark);
		  if not Watermark.Hasvalue then
			exit;
		Watermark.CreateOutstream(OutStream);
		end;
		ReportForNav.Watermark.Image.Load(OutStream);
	end;

	local procedure CreateGenJnlLnBuffer()
	var
		GenJnlLn: Record "Gen. Journal Line";
	begin
		if Args."Test Print" then begin
		  GenJnlLnBuffer.Init;
		  GenJnlLnBuffer.Insert;
		end else
		  with GenJnlLn do begin
			Copy(VoidGenJnlLine);
			if not Args."Test Print" then begin
			  SetRange("Bank Payment Type","bank payment type"::"Computer Check");
			  SetRange("Check Printed",false);
			end;
			SetRange("Account Type","account type"::"Fixed Asset");
			if Find('-') then
			  FieldError("Account Type");
			SetRange("Account Type");
			if FindSet then repeat
			  GenJnlLnBuffer := GenJnlLn;
			  GenJnlLnBuffer.Insert;
			until Next = 0;
		  end;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport70301;
		[RunOnClient]
		ReportForNavClient : DotNet ForNavReport70301;
		ReportForNavDialog : Dialog;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	trigger ReportForNav::OnInit();
	begin
		if ReportForNav.IsWindowsClient then begin
			ReportForNav.CheckClientAddIn();
			ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
			ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
		end;
	end;

	trigger ReportForNav::OnSave(Base64Layout : Text);
	var
		CustomReportLayout : Record "Custom Report Layout";
		ReportLayoutSelection : Record "Report Layout Selection";
		LayoutId : Variant;
		TempBlob : Record TempBlob;
		OutStream : OutStream;
		Bstr : BigText;
		EmptyLayout : Text;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
		LayoutId := ReportLayoutSelection."Custom Report Layout Code";
		if ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 then begin
			if FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout then begin
				LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
			end else begin
			if ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) then begin
				LayoutId := ReportLayoutSelection."Custom Report Layout Code";
			end;
		end;
		end else begin
			if CONFIRM('Default custom layout not found. Create one?') then;
		end;
		if FORMAT(LayoutId) <> EmptyLayout then begin
			TempBlob.Blob.CREATEOUTSTREAM(OutStream);
			Bstr.ADDTEXT(Base64Layout);
			Bstr.WRITE(OutStream);
			CustomReportLayout.GET(LayoutId);
			CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
		end;
	end;

	trigger ReportForNav::OnParameters(Parameters : Text);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
	end;

	trigger ReportForNav::OnPreview(Parameters : Text;FileName : Text);
	var
		PdfFile : File;
		InStream : InStream;
		OutStream : OutStream;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		COMMIT;
		PdfFile.CREATETEMPFILE;
		PdfFile.CREATEOUTSTREAM(OutStream);
		REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
		PdfFile.CREATEINSTREAM(InStream);
		ReportForNavClient.ShowDesigner;
		if ReportForNav.IsValidPdf(PdfFile.NAME) then DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
		PdfFile.CLOSE;
	end;

	trigger ReportForNav::OnSelectPrinter();
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
	end;

	trigger ReportForNav::OnPrint(InStream : DotNet SystemIOStream70301);
	var
		ClientFileName : Text[255];
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
		ReportForNavClient.Print(ClientFileName); 
	end;

	trigger ReportForNav::OnDesign(Data : Text);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNavClient.Data := Data;
		while ReportForNavClient.DesignReport do begin
			ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
			SLEEP(100);
		end;
	end;

	trigger ReportForNav::OnView(ClientFileName : Text;Parameters : Text;ServerFileName : Text);
	var
		ServerFile : File;
		ServerInStream : InStream;
		"Filter" : Text;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ServerFile.OPEN(ServerFileName);
		ServerFile.CREATEINSTREAM(ServerInStream);
		if STRLEN(ClientFileName) >= 4 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' then Filter := 'PDF (*.pdf)|*.pdf';
		if STRLEN(ClientFileName) >= 4 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' then Filter := 'Microsoft Word (*.doc)|*.doc';
		if STRLEN(ClientFileName) >= 5 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' then Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
		DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
	end;

	trigger ReportForNav::OnMessage(Operation : Text;Parameter : Text;ParameterNo : Integer);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		case Operation of
			'Open'	: ReportForNavDialog.Open(Parameter);
			'Update'  : ReportForNavDialog.Update(ParameterNo,Parameter);
			'Close'   : ReportForNavDialog.Close();
			'Message' : Message(Parameter);
			'Error'   : Error(Parameter);
		end;
	end;

	trigger ReportForNav::OnPrintPreview(InStream : DotNet SystemIOStream70301;Preview : Boolean);
	var
		ClientFileName : Text[255];
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		CurrReport.Language := System.GlobalLanguage;
		DownloadFromStream(InStream, '', '<TEMP>', '', ClientFileName);
		ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
	end;

	trigger ReportForNav::OnGetWordLayout(reportNo: Integer)
	var
		layoutStream : InStream;
		zip: Codeunit "Zip Stream Wrapper";
		oStream: OutStream;
		iStream: InStream;
		layout: Text;
		dataContract: Text;
		tempBlob: Record "TempBlob";
		ReportLayoutSelection: Record "Report Layout Selection";
		CustomReportLayout: Record "Custom Report Layout";
		CustomLayoutID: Variant;
		EmptyLayout: Text;
		props: XmlDocument;
		prop: XmlNode;
		layoutNode: XmlNode;
	begin
		EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
		CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
		if Format(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout then
			CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
		else
			if ReportLayoutSelection.HasCustomLayout(reportNo) = 2 then
				CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

		if (Format(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) then begin
			CustomReportLayout.TestField(Type, CustomReportLayout.Type::Word);
			CustomReportLayout.CalcFields(Layout);
			CustomReportLayout.Layout.CreateInstream(layoutStream, TEXTENCODING::UTF8);
		end else
			Report.WordLayout(reportNo, layoutStream);
		zip.OpenZipFromStream(layoutStream, false);
		tempBlob.Blob.CreateOutStream(oStream);
		zip.WriteEntryFromZipToOutStream('docProps/custom.xml', oStream);
		tempBlob.Blob.CreateInStream(iStream);
		XmlDocument.ReadFrom(iStream, props);
		props.GetChildNodes().Get(1, prop);
		prop.AsXmlElement().GetChildNodes().Get(1, layoutNode);
		layout := layoutNode.AsXmlElement().InnerText();
		ReportForNav.WordLayout := layout;
	end;
	procedure ReportForNav_GetPageNo() : Integer
	begin
		exit(ReportForNav.PageNo);
	end;

	trigger ReportForNav::OnTotals(DataItemId: Text; Operation: Text; GroupTotalFieldNo: Integer)
	begin
		// Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
		case DataItemId of
			'Model':
				with Model do case Operation of
					'Add': begin
						ReportForNav.AddTotal(DataItemId,0,Amount);
						ReportForNav.AddTotal(DataItemId,1,"Discount Amount");
						ReportForNav.AddTotal(DataItemId,2,"Net Amount");
					end;
					'Restore': begin
						Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
						"Discount Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
						"Net Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
					end;
				end;
			end;
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
