dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.3.2.0.1579")
	{
		type(ForNav.Report; ForNavReport70242){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream70242){}   
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 70242 "ForNAV Inventory Valuation"
{
	Caption = 'Inventory Valuation';
	WordLayout = './Layouts/ForNAV Inventory Valuation.docx'; DefaultLayout = Word;

	dataset
	{
		DataItem(Args;"ForNAV Inv. Valuation Args.")
		{
			DataItemTableView = sorting("Starting Date");
			UseTemporary = true;
			column(ReportForNavId_42; 42) {}
			DataItem(Item;Item)
			{
				DataItemTableView = sorting("Inventory Posting Group") where(Type=const(Inventory));
				RequestFilterFields = "No.","Inventory Posting Group","Statistics Group";
				column(ReportForNavId_8129; 8129) {}
				trigger OnAfterGetRecord();
				begin
					CalcFields("Assembly BOM");
					if Args."Ending Date" = 0D then
					  Args."Ending Date" := Dmy2date(31,12,9999);
				
					InventoryValuation.StartingInvoicedValue := 0;
					InventoryValuation.StartingExpectedValue := 0;
					InventoryValuation.StartingInvoicedQty := 0;
					InventoryValuation.StartingExpectedQty := 0;
					InventoryValuation.IncreaseInvoicedValue := 0;
					InventoryValuation.IncreaseExpectedValue := 0;
					InventoryValuation.IncreaseInvoicedQty := 0;
					InventoryValuation.IncreaseExpectedQty := 0;
					InventoryValuation.DecreaseInvoicedValue := 0;
					InventoryValuation.DecreaseExpectedValue := 0;
					InventoryValuation.DecreaseInvoicedQty := 0;
					InventoryValuation.DecreaseExpectedQty := 0;
					InventoryValuation.InvCostPostedToGL := 0;
					InventoryValuation.CostPostedToGL := 0;
					InventoryValuation.ExpCostPostedToGL := 0;
					IsEmptyLine := true;
				
					ValueEntry.Reset;
					ValueEntry.SetRange("Item No.","No.");
					ValueEntry.SetFilter("Variant Code",GetFilter("Variant Filter"));
					ValueEntry.SetFilter("Location Code",GetFilter("Location Filter"));
					ValueEntry.SetFilter("Global Dimension 1 Code",GetFilter("Global Dimension 1 Filter"));
					ValueEntry.SetFilter("Global Dimension 2 Code",GetFilter("Global Dimension 2 Filter"));
					if Args."Starting Date" > 0D then begin
					  ValueEntry.SetRange("Posting Date",0D,CalcDate('<-1D>',Args."Starting Date"));
					  ValueEntry.CalcSums("Item Ledger Entry Quantity","Cost Amount (Actual)","Cost Amount (Expected)","Invoiced Quantity");
					  AssignAmounts(ValueEntry,InventoryValuation.StartingInvoicedValue,InventoryValuation.StartingInvoicedQty,InventoryValuation.StartingExpectedValue,InventoryValuation.StartingExpectedQty,1);
					  IsEmptyLine := IsEmptyLine and ((InventoryValuation.StartingInvoicedValue = 0) and (InventoryValuation.StartingInvoicedQty = 0));
					  if Args."Expected Cost" then
						IsEmptyLine := IsEmptyLine and ((InventoryValuation.StartingExpectedValue = 0) and (InventoryValuation.StartingExpectedQty = 0));
					end;
					ValueEntry.SetRange("Posting Date",Args."Starting Date",Args."Ending Date");
					ValueEntry.SetFilter(
					  "Item Ledger Entry Type",'%1|%2|%3|%4',
					  ValueEntry."item ledger entry type"::Purchase,
					  ValueEntry."item ledger entry type"::"Positive Adjmt.",
					  ValueEntry."item ledger entry type"::Output,
					  ValueEntry."item ledger entry type"::"Assembly Output");
					ValueEntry.CalcSums("Item Ledger Entry Quantity","Cost Amount (Actual)","Cost Amount (Expected)","Invoiced Quantity");
					AssignAmounts(ValueEntry,InventoryValuation.IncreaseInvoicedValue,InventoryValuation.IncreaseInvoicedQty,InventoryValuation.IncreaseExpectedValue,InventoryValuation.IncreaseExpectedQty,1);
					ValueEntry.SetRange("Posting Date",Args."Starting Date",Args."Ending Date");
					ValueEntry.SetFilter(
					  "Item Ledger Entry Type",'%1|%2|%3|%4',
					  ValueEntry."item ledger entry type"::Sale,
					  ValueEntry."item ledger entry type"::"Negative Adjmt.",
					  ValueEntry."item ledger entry type"::Consumption,
					  ValueEntry."item ledger entry type"::"Assembly Consumption");
					ValueEntry.CalcSums("Item Ledger Entry Quantity","Cost Amount (Actual)","Cost Amount (Expected)","Invoiced Quantity");
					AssignAmounts(ValueEntry,InventoryValuation.DecreaseInvoicedValue,InventoryValuation.DecreaseInvoicedQty,InventoryValuation.DecreaseExpectedValue,InventoryValuation.DecreaseExpectedQty,-1);
					ValueEntry.SetRange("Posting Date",Args."Starting Date",Args."Ending Date");
					ValueEntry.SetRange("Item Ledger Entry Type",ValueEntry."item ledger entry type"::Transfer);
					if ValueEntry.FindSet then
					  repeat
						if true in [ValueEntry."Valued Quantity" < 0,not GetOutboundItemEntry(ValueEntry."Item Ledger Entry No.")] then
						  AssignAmounts(ValueEntry,InventoryValuation.DecreaseInvoicedValue,InventoryValuation.DecreaseInvoicedQty,InventoryValuation.DecreaseExpectedValue,InventoryValuation.DecreaseExpectedQty,-1)
						else
						  AssignAmounts(ValueEntry,InventoryValuation.IncreaseInvoicedValue,InventoryValuation.IncreaseInvoicedQty,InventoryValuation.IncreaseExpectedValue,InventoryValuation.IncreaseExpectedQty,1);
					  until ValueEntry.Next = 0;
					IsEmptyLine := IsEmptyLine and ((InventoryValuation.IncreaseInvoicedValue = 0) and (InventoryValuation.IncreaseInvoicedQty = 0));
					IsEmptyLine := IsEmptyLine and ((InventoryValuation.DecreaseInvoicedValue = 0) and (InventoryValuation.DecreaseInvoicedQty = 0));
					if Args."Expected Cost" then begin
					  IsEmptyLine := IsEmptyLine and ((InventoryValuation.IncreaseExpectedValue = 0) and (InventoryValuation.IncreaseExpectedQty = 0));
					  IsEmptyLine := IsEmptyLine and ((InventoryValuation.DecreaseExpectedValue = 0) and (InventoryValuation.DecreaseExpectedQty = 0));
					end;
					ValueEntry.SetRange("Posting Date",0D,Args."Ending Date");
					ValueEntry.SetRange("Item Ledger Entry Type");
					ValueEntry.CalcSums("Cost Posted to G/L","Expected Cost Posted to G/L");
					InventoryValuation.ExpCostPostedToGL += ValueEntry."Expected Cost Posted to G/L";
					InventoryValuation.InvCostPostedToGL += ValueEntry."Cost Posted to G/L";
					InventoryValuation.StartingExpectedValue += InventoryValuation.StartingInvoicedValue;
					InventoryValuation.IncreaseExpectedValue += InventoryValuation.IncreaseInvoicedValue;
					InventoryValuation.DecreaseExpectedValue += InventoryValuation.DecreaseInvoicedValue;
					InventoryValuation.CostPostedToGL := InventoryValuation.ExpCostPostedToGL + InventoryValuation.InvCostPostedToGL;
					if IsEmptyLine then
					  CurrReport.Skip;
					InventoryValuation."Item No." := "No.";
					InventoryValuation.Description := Description;
					InventoryValuation."Inventory Posting Group" := "Inventory Posting Group";
					InventoryValuation.SetPrintExpectedCost(Args);
					InventoryValuation.Insert;
					InventoryValuation.SetRange("Item No.", "No.");
				end;
				
				trigger OnPostDataItem();
				begin
					InventoryValuation.Reset;
				end;
				
			}
			DataItem(InventoryValuation;"ForNAV Inventory Valuation")
			{
				DataItemTableView = sorting("Inventory Posting Group");
				UseTemporary = true;
				column(ReportForNavId_1; 1) {}
			}
			trigger OnPreDataItem();
			begin
				Insert;
			end;
			
		}
	}

	requestpage
	{
		SaveValues = true;

		layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(StartingDate;Args."Starting Date")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Starting Date';
					}
					field(EndingDate;Args."Ending Date")
					{
						ApplicationArea = Basic,Suite;
						Caption = 'Ending Date';
					}
					group(Show)
					{
						Caption = 'Show';
						field(IncludeExpectedCost;Args."Expected Cost")
						{
							ApplicationArea = Basic,Suite;
							Caption = 'Expected Cost';
						}
					}
					field(ForNavOpenDesigner;ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
					}
				}
			}
		}

		actions
		{
		}

		trigger OnOpenPage()
		begin
			if (Args."Starting Date" = 0D) and (Args."Ending Date" = 0D) then begin
			  Args."Ending Date" := WorkDate;
			  Args."Expected Cost" := true;
			end;
		end;
	}

	trigger OnInitReport()
	begin
		Codeunit.Run(Codeunit::"ForNAV First Time Setup");
		Commit;
		LoadWatermark;
		;ReportForNav:= ReportForNav.Report(CurrReport.ObjectId, CurrReport.Language, SerialNumber, UserId, COMPANYNAME); ReportForNav.Init;
	end;


	trigger OnPostReport()
	begin
		ReportForNav.Post;
	end;


	trigger OnPreReport()
	begin
		if (Args."Starting Date" = 0D) and (Args."Ending Date" = 0D) then
		  Args."Ending Date" := WorkDate;
		if Args."Starting Date" in [0D,00000101D] then
		  StartDateText := ''
		else
		  StartDateText := Format(Args."Starting Date" - 1);
		ItemFilter := Item.GetFilters;
		;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;if not ReportForNav.Pre then CurrReport.Quit;
	end;

	var
		ValueEntry: Record "Value Entry";
		ItemFilter: Text;
		StartDateText: Text[10];
		IsEmptyLine: Boolean;

	local procedure LoadWatermark()
	var
		ForNAVSetup: Record "ForNAV Setup";
		OutStream: OutStream;
	begin
		with ForNAVSetup do begin
		  Get;
		  CalcFields("List Report Watermark");
		  if not "List Report Watermark".Hasvalue then
			exit;
		  "List Report Watermark".CreateOutstream(OutStream);
		  ReportForNav.Watermark.Image.Load(OutStream);
		end;
	end;

	local procedure AssignAmounts(ValueEntry: Record "Value Entry";var InvoicedValue: Decimal;var InvoicedQty: Decimal;var ExpectedValue: Decimal;var ExpectedQty: Decimal;Sign: Decimal)
	begin
		InvoicedValue += ValueEntry."Cost Amount (Actual)" * Sign;
		InvoicedQty += ValueEntry."Invoiced Quantity" * Sign;
		ExpectedValue += ValueEntry."Cost Amount (Expected)" * Sign;
		ExpectedQty += ValueEntry."Item Ledger Entry Quantity" * Sign;
	end;

	local procedure GetOutboundItemEntry(ItemLedgerEntryNo: Integer): Boolean
	var
		ItemApplnEntry: Record "Item Application Entry";
		ItemLedgEntry: Record "Item Ledger Entry";
	begin
		ItemApplnEntry.SetCurrentkey("Item Ledger Entry No.");
		ItemApplnEntry.SetRange("Item Ledger Entry No.",ItemLedgerEntryNo);
		if not ItemApplnEntry.FindFirst then
		  exit(true);
		ItemLedgEntry.SetRange("Item No.",Item."No.");
		ItemLedgEntry.SetFilter("Variant Code",Item.GetFilter("Variant Filter"));
		ItemLedgEntry.SetFilter("Location Code",Item.GetFilter("Location Filter"));
		ItemLedgEntry.SetFilter("Global Dimension 1 Code",Item.GetFilter("Global Dimension 1 Filter"));
		ItemLedgEntry.SetFilter("Global Dimension 2 Code",Item.GetFilter("Global Dimension 2 Filter"));
		ItemLedgEntry."Entry No." := ItemApplnEntry."Outbound Item Entry No.";
		exit(not ItemLedgEntry.Find);
	end;

	procedure SetStartDate(DateValue: Date)
	begin
		Args."Starting Date" := DateValue;
	end;

	procedure SetEndDate(DateValue: Date)
	begin
		Args."Ending Date" := DateValue;
	end;

	procedure InitializeRequest(NewStartDate: Date;NewEndDate: Date;NewShowExpected: Boolean)
	begin
		Args."Starting Date" := NewStartDate;
		Args."Ending Date" := NewEndDate;
		Args."Expected Cost" := NewShowExpected;
	end;
	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport70242;
		[RunOnClient]
		ReportForNavClient : DotNet ForNavReport70242;
		ReportForNavDialog : Dialog;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	trigger ReportForNav::OnInit();
	begin
		if ReportForNav.IsWindowsClient then begin
			ReportForNav.CheckClientAddIn();
			ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
			ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
		end;
	end;

	trigger ReportForNav::OnSave(Base64Layout : Text);
	var
		CustomReportLayout : Record "Custom Report Layout";
		ReportLayoutSelection : Record "Report Layout Selection";
		LayoutId : Variant;
		TempBlob : Record TempBlob;
		OutStream : OutStream;
		Bstr : BigText;
		EmptyLayout : Text;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
		LayoutId := ReportLayoutSelection."Custom Report Layout Code";
		if ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 then begin
			if FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout then begin
				LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
			end else begin
			if ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) then begin
				LayoutId := ReportLayoutSelection."Custom Report Layout Code";
			end;
		end;
		end else begin
			if CONFIRM('Default custom layout not found. Create one?') then;
		end;
		if FORMAT(LayoutId) <> EmptyLayout then begin
			TempBlob.Blob.CREATEOUTSTREAM(OutStream);
			Bstr.ADDTEXT(Base64Layout);
			Bstr.WRITE(OutStream);
			CustomReportLayout.GET(LayoutId);
			CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
		end;
	end;

	trigger ReportForNav::OnParameters(Parameters : Text);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
	end;

	trigger ReportForNav::OnPreview(Parameters : Text;FileName : Text);
	var
		PdfFile : File;
		InStream : InStream;
		OutStream : OutStream;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		COMMIT;
		PdfFile.CREATETEMPFILE;
		PdfFile.CREATEOUTSTREAM(OutStream);
		REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
		PdfFile.CREATEINSTREAM(InStream);
		ReportForNavClient.ShowDesigner;
		if ReportForNav.IsValidPdf(PdfFile.NAME) then DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
		PdfFile.CLOSE;
	end;

	trigger ReportForNav::OnSelectPrinter();
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
	end;

	trigger ReportForNav::OnPrint(InStream : DotNet SystemIOStream70242);
	var
		ClientFileName : Text[255];
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
		ReportForNavClient.Print(ClientFileName); 
	end;

	trigger ReportForNav::OnDesign(Data : Text);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNavClient.Data := Data;
		while ReportForNavClient.DesignReport do begin
			ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
			SLEEP(100);
		end;
	end;

	trigger ReportForNav::OnView(ClientFileName : Text;Parameters : Text;ServerFileName : Text);
	var
		ServerFile : File;
		ServerInStream : InStream;
		"Filter" : Text;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ServerFile.OPEN(ServerFileName);
		ServerFile.CREATEINSTREAM(ServerInStream);
		if STRLEN(ClientFileName) >= 4 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' then Filter := 'PDF (*.pdf)|*.pdf';
		if STRLEN(ClientFileName) >= 4 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' then Filter := 'Microsoft Word (*.doc)|*.doc';
		if STRLEN(ClientFileName) >= 5 then if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' then Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
		DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
	end;

	trigger ReportForNav::OnMessage(Operation : Text;Parameter : Text;ParameterNo : Integer);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		case Operation of
			'Open'	: ReportForNavDialog.Open(Parameter);
			'Update'  : ReportForNavDialog.Update(ParameterNo,Parameter);
			'Close'   : ReportForNavDialog.Close();
			'Message' : Message(Parameter);
			'Error'   : Error(Parameter);
		end;
	end;

	trigger ReportForNav::OnPrintPreview(InStream : DotNet SystemIOStream70242;Preview : Boolean);
	var
		ClientFileName : Text[255];
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		CurrReport.Language := System.GlobalLanguage;
		DownloadFromStream(InStream, '', '<TEMP>', '', ClientFileName);
		ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
	end;

	trigger ReportForNav::OnGetWordLayout(reportNo: Integer)
	var
		layoutStream : InStream;
		zip: Codeunit "Zip Stream Wrapper";
		oStream: OutStream;
		iStream: InStream;
		layout: Text;
		dataContract: Text;
		tempBlob: Record "TempBlob";
		ReportLayoutSelection: Record "Report Layout Selection";
		CustomReportLayout: Record "Custom Report Layout";
		CustomLayoutID: Variant;
		EmptyLayout: Text;
		props: XmlDocument;
		prop: XmlNode;
		layoutNode: XmlNode;
	begin
		EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout Code");
		CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";
		if Format(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout then
			CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
		else
			if ReportLayoutSelection.HasCustomLayout(reportNo) = 2 then
				CustomLayoutID := ReportLayoutSelection."Custom Report Layout Code";

		if (Format(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) then begin
			CustomReportLayout.TestField(Type, CustomReportLayout.Type::Word);
			CustomReportLayout.CalcFields(Layout);
			CustomReportLayout.Layout.CreateInstream(layoutStream, TEXTENCODING::UTF8);
		end else
			Report.WordLayout(reportNo, layoutStream);
		zip.OpenZipFromStream(layoutStream, false);
		tempBlob.Blob.CreateOutStream(oStream);
		zip.WriteEntryFromZipToOutStream('docProps/custom.xml', oStream);
		tempBlob.Blob.CreateInStream(iStream);
		XmlDocument.ReadFrom(iStream, props);
		props.GetChildNodes().Get(1, prop);
		prop.AsXmlElement().GetChildNodes().Get(1, layoutNode);
		layout := layoutNode.AsXmlElement().InnerText();
		ReportForNav.WordLayout := layout;
	end;
	procedure ReportForNav_GetPageNo() : Integer
	begin
		exit(ReportForNav.PageNo);
	end;

	trigger ReportForNav::OnTotals(DataItemId: Text; Operation: Text; GroupTotalFieldNo: Integer)
	begin
		// Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
		case DataItemId of
			'Item':
				with Item do case Operation of
				end;
			'InventoryValuation':
				with InventoryValuation do case Operation of
					'Add': begin
						ReportForNav.AddTotal(DataItemId,0,CostPostedToGL);
						ReportForNav.AddTotal(DataItemId,1,DecreaseExpectedQty);
						ReportForNav.AddTotal(DataItemId,2,DecreaseExpectedValue);
						ReportForNav.AddTotal(DataItemId,3,DecreaseInvoicedQty);
						ReportForNav.AddTotal(DataItemId,4,DecreaseInvoicedValue);
						ReportForNav.AddTotal(DataItemId,5,ExpCostPostedToGL);
						ReportForNav.AddTotal(DataItemId,6,IncreaseExpectedQty);
						ReportForNav.AddTotal(DataItemId,7,IncreaseExpectedValue);
						ReportForNav.AddTotal(DataItemId,8,IncreaseInvoicedQty);
						ReportForNav.AddTotal(DataItemId,9,IncreaseInvoicedValue);
						ReportForNav.AddTotal(DataItemId,10,InvCostPostedToGL);
						ReportForNav.AddTotal(DataItemId,11,StartingExpectedQty);
						ReportForNav.AddTotal(DataItemId,12,StartingExpectedValue);
						ReportForNav.AddTotal(DataItemId,13,StartingInvoicedQty);
						ReportForNav.AddTotal(DataItemId,14,StartingInvoicedValue);
					end;
					'Restore': begin
						CostPostedToGL := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
						DecreaseExpectedQty := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
						DecreaseExpectedValue := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
						DecreaseInvoicedQty := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
						DecreaseInvoicedValue := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
						ExpCostPostedToGL := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
						IncreaseExpectedQty := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
						IncreaseExpectedValue := ReportForNav.RestoreTotal(DataItemId,7,GroupTotalFieldNo);
						IncreaseInvoicedQty := ReportForNav.RestoreTotal(DataItemId,8,GroupTotalFieldNo);
						IncreaseInvoicedValue := ReportForNav.RestoreTotal(DataItemId,9,GroupTotalFieldNo);
						InvCostPostedToGL := ReportForNav.RestoreTotal(DataItemId,10,GroupTotalFieldNo);
						StartingExpectedQty := ReportForNav.RestoreTotal(DataItemId,11,GroupTotalFieldNo);
						StartingExpectedValue := ReportForNav.RestoreTotal(DataItemId,12,GroupTotalFieldNo);
						StartingInvoicedQty := ReportForNav.RestoreTotal(DataItemId,13,GroupTotalFieldNo);
						StartingInvoicedValue := ReportForNav.RestoreTotal(DataItemId,14,GroupTotalFieldNo);
					end;
				end;
			end;
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
