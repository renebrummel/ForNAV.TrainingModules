OBJECT Table 88000 Translations
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:53:56;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Nr.;
                                                              ENU=No.;
                                                              NLD=Nr.] }
    { 2   ;   ;Description         ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Beschreibung;
                                                              ENU=Description;
                                                              NLD=Omschrijving] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
}

OBJECT Table 88050 100 Top Customer Overview
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:54:07;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No            ;Integer       ;DataClassification=ToBeClassified }
    { 2   ;   ;No.                 ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=No. }
    { 3   ;   ;Name                ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Name }
    { 4   ;   ;Sales (LCY)         ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Sales (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5   ;   ;Profit (LCY)        ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Profit (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 6   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country/Region Code }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 9   ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 10  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Code }
    { 11  ;   ;Salesperson Name    ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Name }
    { 12  ;   ;Country Region Name ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country Region Name }
  }
  KEYS
  {
    {    ;Entry No                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
}

OBJECT Table 88051 100 Top Customer Overview Args
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:54:20;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;DataClassification=ToBeClassified }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Customer No. }
    { 3   ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 4   ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 5   ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Code }
    { 6   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country/Region Code }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
}

OBJECT Report 88000 B02 Customer Top 10
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:36;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Balance (LCY)) ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY),Sales (LCY)
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
8uF5Er7gz3O5czk7/SU/qfvxPw==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88001 B02 Vendor Top 10
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:37;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(Balance (LCY)) ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY)
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
sNl3s89Zf8d/f/jpTw==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88002 I02 Sales Invoice Start
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:37;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
iItY11+i3Z7als4et1d2jtt7bsHf/wc=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88003 I02 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:37;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
dT5blxe6V4BWc6gc71rOq5Mt/zfCd/8D</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88004 I03 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:37;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=VAR
                  MyFile@1000 : File;
                  MyInStream@1001 : InStream;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                  MyFile.OPEN('C:\Temp\Append.pdf');
                  MyFile.CREATEINSTREAM(MyInStream);
                  ReportForNav.GetDataItem('Header').AppendPdf(MyInStream);
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
BtdTtZi7V8q2v1+wmaYM9vb5T056fujxu/8B</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88005 Cust. Entries List (Classic)
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:37;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 1;   ;DataItem;                   ;
               DataItemTable=Table18;
               PrintOnlyIfDetail=Yes;
                }
    { 2   ;1   ;Column  ;CustomerFIELDCAPTION_Name;
               SourceExpr=Customer.FIELDCAPTION(Name); }
    { 3   ;1   ;Column  ;CustomerFIELDCAPTION_No;
               SourceExpr=Customer.FIELDCAPTION("No."); }
    { 4   ;1   ;Column  ;Customer_No;
               SourceExpr="No."; }
    { 5   ;1   ;Column  ;Customer_Name;
               SourceExpr=Name; }
    { 6; 1 ;DataItem;                   ;
               DataItemTable=Table21;
               DataItemLink=Customer No.=FIELD(No.);
               CalcFields=Amount
                }
    { 7   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_Amount;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION(Amount); }
    { 8   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_PostingDate;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Posting Date"); }
    { 9   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_EntryNo;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Entry No."); }
    { 10   ;2   ;Column  ;CustLedgerEntry_EntryNo;
               SourceExpr="Entry No."; }
    { 11   ;2   ;Column  ;CustLedgerEntry_PostingDate;
               SourceExpr="Posting Date"; }
    { 12   ;2   ;Column  ;CustLedgerEntry_Amount;
               SourceExpr=Amount;
               AutoCalcField=Yes; }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      CASE DataItemId OF
        'CustLedgerEntry': CASE SectionId OF
          'Body6': OnPreSectionCustLedgerEntry_Body6("Cust. Ledger Entry");
          'Body7': OnPreSectionCustLedgerEntry_Body7("Cust. Ledger Entry");
        END;
      END;
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'CustLedgerEntry': WITH "Cust. Ledger Entry" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"13");
              END;
           'Restore': BEGIN
                 "13" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body6@5012(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount >= 0)
      END;
    END;
    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body7@5013(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount < 0)
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
/n8=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88006 I04 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:37;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88007 B03 - Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:37;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
e+J3tw//AQ==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88050 JavaScript Demo
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:37;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 1000000000;   ;DataItem;                   ;
               DataItemTable=Table2000000026;
               MaxIteration=1;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88051 A02 JavaScript Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:37;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88052 A04 Template Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:37;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=VAR
                  MyFile@1000 : File;
                  MyInStream@1001 : InStream;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                  MyFile.OPEN('C:\Temp\Append.pdf');
                  MyFile.CREATEINSTREAM(MyInStream);
                  ReportForNav.GetDataItem('Header').AppendPdf(MyInStream);
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.) WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
               ReqFilterFields=No.;
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               DataItemLink=Document Type=FIELD(Document Type), Document No.=FIELD(No.) ;
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88054 A03 Footers Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:38;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
Qp71qf+am6Ijt/RLxF+P1vzOwT/9Hw==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88055 A05 100 Top Customer Overview
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:38;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  FillTempListTable();
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table88050;
               DataItemTableView=SORTING(Sales (LCY)) ORDER(Descending);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    LOCAL PROCEDURE FillTempListTable@1();
    VAR
      TopCustomerOverview@1000 : Query 100;
    BEGIN
      WITH TopCustomerOverview DO BEGIN
        OPEN();
        WHILE READ() DO BEGIN
          List."Entry No" := List."Entry No" + 1;
          List."No." := No;
          List.Name := Name;
          List."Sales (LCY)" := Sales_LCY;
          List."Profit (LCY)" := Profit_LCY;
          List."Country/Region Code" := Country_Region_Code;
          List.City := City;
          List."Global Dimension 1 Code" := Global_Dimension_1_Code;
          List."Global Dimension 2 Code" := Global_Dimension_2_Code;
          List."Salesperson Code" := Salesperson_Code;
          List."Salesperson Name" := SalesPersonName;
          List."Country Region Name" := CountryRegionName;
          List.INSERT();
        END;
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88056 A06 100 Top Cust Overview Args
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:38;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 3;   ;DataItem; Args                  ;
               DataItemTable=Table88051;
               OnPreDataItem=BEGIN
                               INSERT();
                             END;
               OnAfterGetRecord=BEGIN
                                  FillTempListTable();
                                END;
               Temporary=Yes;
                }
    { 2; 1 ;DataItem; List                  ;
               DataItemTable=Table88050;
               DataItemTableView=SORTING(Sales (LCY)) ORDER(Descending);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1   ;1   ;Group     ;
                  CaptionML=ENU=Filter Fields;
                  GroupType=Group }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=Customer No.;
                  SourceExpr=Args."Customer No.";
                  TableRelation=Customer }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Dimension 1 Code;
                  SourceExpr=Args."Global Dimension 1 Code";
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1)) }

      { 4   ;2   ;Field     ;
                  CaptionML=ENU=Dimension 2 Code;
                  SourceExpr=Args."Global Dimension 2 Code";
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2)) }

      { 5   ;2   ;Field     ;
                  CaptionML=ENU=Salesperson Code;
                  SourceExpr=Args."Salesperson Code";
                  TableRelation=Salesperson/Purchaser }

      { 6   ;2   ;Field     ;
                  CaptionML=ENU=Country Region Code;
                  SourceExpr=Args."Country/Region Code";
                  TableRelation=Country/Region }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    LOCAL PROCEDURE FillTempListTable@1();
    VAR
      TopCustomerOverview@1000 : Query 100;
    BEGIN
      WITH TopCustomerOverview DO BEGIN
        SETFILTER(No, Args."Customer No.");
        SETFILTER(Global_Dimension_1_Code, Args."Global Dimension 1 Code");
        SETFILTER(Global_Dimension_2_Code, Args."Global Dimension 2 Code");
        SETFILTER(Salesperson_Code, Args."Salesperson Code");
        SETFILTER(Country_Region_Code, Args."Country/Region Code");
        OPEN();
        WHILE READ() DO BEGIN
          List."Entry No" := List."Entry No" + 1;
          List."No." := No;
          List.Name := Name;
          List."Sales (LCY)" := Sales_LCY;
          List."Profit (LCY)" := Profit_LCY;
          List."Country/Region Code" := Country_Region_Code;
          List.City := City;
          List."Global Dimension 1 Code" := Global_Dimension_1_Code;
          List."Global Dimension 2 Code" := Global_Dimension_2_Code;
          List."Salesperson Code" := Salesperson_Code;
          List."Salesperson Name" := SalesPersonName;
          List."Country Region Name" := CountryRegionName;
          List.INSERT();
        END;
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>YyMAAL1a627jNhb+v8C+g6DFbhLAK1OUqEsnbpE4kxmjmSRwnJnu/iloiU7UyqIhyZl4fvVp9sH2
SfZQlGxZoly7ztYBEovX73znRh7l/IfXeay9sDSLeDLQTQPpGksCHkbJ00Bf5rN/evoP3//1L+c/
5SkdswVP8+yGrvgyf2BpROPoG0u1zdfP64VsAxtErLbVpGu3dM4GernSNU9v6YuuDXmSpzyerBbQ
d8Ve3r8uUpZlRm1T43FUe8Q9rWPYi9imV+2qDbQKSU8bLuN8mTJoS9gSpsQ97X45jaPgR7aa8F+Z
GB26AfWYh5E7s5mNAP9VlC1iupK4L5CjmQhpE76A5bJcuwPqXiL2VbtInzJd25JrLbltAK+G6Tiu
rt1Nf2FBfssHuuch4ujadcTi8AubPoiFAvaYxgP9Oc8X3/X744vJdy5yvL5Y7+Lz5bB/d0Vz2h/y
+YImq9OT4fju9vHh7xiNkpylCc1hOxrD800eGidnFZ7HJMoH+oQl+XN2N7v4FMVxNGcwQ9c+0fQp
SrKBjpHf0zzS0zBCxS9du6dP7EsU5s/Qa1YNH1n09AyrYd8V5Cwi+EpsEANUCPwIQ+hp7iIHSZP7
lEkAD0EaLaC7BD5KZjydF2iNDyw/PXv3j7+9XolfF+8UQ4Y0DgqWstOT+ygQOjw5e6eDVWra+SVN
wqz4Cg+jnM3N0sSkQrYsS6pFUCgGipkgQfn0mab1eVXzhE5jaCz+CIWZujYKB7qlaxM2B9Fouhro
ebpkeomhAakGa8xmxUQFpI+MhiyVgCQK2WLWGX6InkDDIDys4kxdZs9mDp5i5uAZZXSGGZsGLMSW
jyjBU+TbWKgsjZL8LnkPZroS6ivBgssGgtvGZlK517CB7xieS/SaFCBHiTzbat2Wz64EyAVjTWl/
GhdEClm+MdjG9JDTcyyD6NoNDwptX8ecgqUIG3R8wGB7tltjobE1bD7mX5uAmqDIFiiY0IELeuqE
fylNHRnEcX1kYssuv7RhSH5Y3CJHhcdRby+mbyEVDaaphmS7lrBH8ELT9jGxiLTZB5YXrrKxZUPE
KT5n6S0XRvsKs//723/qjf1dkLGE7B4CGR8NmS9hr9XPY/YEJjHkIaugd3bvFMKSQniHCGEdK8QD
jVm2gBywLQGQ3+rZCd6W4P1DwNvHgv8Q8ymNryBNJCKHmQ0J1N07xSBSDBMdIgd5YznwbjnwLjnO
+13+fd4vnLsdm/qK4KQeXPc14fI1IvAxQdSyLMN6kyBq4mYU7QD2Z0VRsyOKKy3JOcKQbqIsN4rn
IV0IejNDdNTMSD7uE0eFZ+4N2n1b0EXY+flm+K8K+e4x+0RU4aB7i+O9rTj3KZ9F+e/IUx+0T5Q1
D8nN/v9BPzItNOyr1bNXpD0oZ6O3laVM0TJDN6RR9P0JERerIm5lxs2TgTyWC8SX/LUia1ZvJPX4
6xkQZy2358Mtz0UIEU8Vi1HjlmTa4pp0SYNfhzzmqeARWL+Mxfn8nobyCm715E+hl0uewkEdbmuX
PIfjW11ljVjUVtJwmabyNiajV5u7h3wVM7gw8DTKVyUxYOKPGZOwZzTOWPFcw7xpXEOujavwlk1N
NUvNWCrNlP4o7jAS/8MzXTBTqaeiS6UPExmub/sE28rc6DkGcn2fOG0iP/L0202UiFXzlOXBc3Vx
ukiexIXQB1zFthLHeriCVTGqFMYsJ1Vuk3RyYqs4KR0bNxOvZKG8GtcMdtNiquQvrdW2/O1rZsGi
R+D25ROX4J7pEgMT33d9yc5FDDdRODHBKp+iMIzZDZuBIQsOii6QrGhYm2SJo1i7sJB/cz4fzeE6
qjTUdgWgWmAvm8VWYXsNpDstkKjYdsrlmhlbGRvKR3PNH3DZI55h4xbzJiG2sE9cFFtcAyFJ7UYF
NSbHIiTUqSxIU2qhHLrT84vp+7FIDmbRUbHolss18+rvR1i85tK3gUjLJY7ZQWlprF6XTe8gtLS2
TYr6Q7zWV9mPXvdgel0VvV653OEJbGOqlkm6TNX2rcpUTVAC8RHavt3vYHbCQ7o6glM5fz82/YPZ
9LZLW31Fbat9yChP8ptTzx8pMMp5XQVG1Oj6HLGvkPzuxpPR7YfT4iConcJx9uxMuxtfvR+fXrEs
YInIvGeyNonbtUk4TqRASbWwGFWUObc5aNYt1xJXtUt19r3mPN8uXsqWrcLVfUwDNkrkuWWNqqs4
ual0hpjimeu6yKdoGlqEsakfUM+2PeL6lOKQURTaPq3VLj3bcMTHNhtlzgpW26Q6CpstAtSJd5eX
bRIqxp1eRry1l2HHwLbjYGzu6WVg9ukoPMLNygXUB3CFr1mHpFe1GzXcSS57SJrFrcNeSa7p+46l
PHxj2/Dhg11SO0ZP+KJ99Ktxc12cQC7CULxmOj1RnEwKTj+kfLnIjHLcSe+kp4mXLztpP2rp/ZVF
9jqHb9TUvCV1hMZuvW7pVJ30L3m4qocL8dz1poMG0wD7HmaB506JFTB/ahMERwHwEN8z2QzjEM1w
09XLJdcxwUSWYbZeaBR49/V9d+vO3AyFBxXl0K5aXLFxRz2uBcpr1uQ6cB1Zk5NE7ajLtYAdVK0+
tvRwUDWuaaT2IQXpY95sFFDVNbg9qm5r2GXJwu7QtBL2Me8yCoAdtbZ9qmtr4OWN3u4oGyuBH/Me
Y8PscTW1tQDl9ds+pO58zAuMQoA3KaQVInQW02RvV5LuKKrtmtSZMqDr0zLOoyGPl/OkpNPuOqLj
xhG99V69MWp7RB1cved8zAJIh43/GZBQRIznA13cxrtqERVYIGW9znl/x3/HfP8/</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88057 A01 Customer Top 10 Chart
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:38;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Balance (LCY)) ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY),Sales (LCY)
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
R/Z1nqBlz2u6azoHw55f/f3u3w==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88058 A01 Sales Invoice Chart
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:38;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
rv5QQd6Na+3V+Eejlj/o+Of/BQ==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


OBJECT Report 88101 Customer - List(101)
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=7-5-19;
    Time=10:09:38;
    Version List=TRN1.0.0,FORNAV4.1.0.1667/1667;
    
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer - List;
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;
    OnPreReport=VAR
                  CaptionManagement@1000 : Codeunit 42;
                BEGIN
                  CustFilter := CaptionManagement.GetRecordFiltersWithCaptions(Customer);
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 6836;   ;DataItem;                   ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Balance (LCY)");
                                  FormatAddr.FormatAddr(
                                    CustAddr,Name,"Name 2",'',Address,"Address 2",
                                    City,"Post Code",County,"Country/Region Code");
                                END;
               ReqFilterFields=No.,Search Name,Customer Posting Group;
                }
    { 3   ;1   ;Column  ;COMPANYNAME;
               SourceExpr=COMPANYPROPERTY.DISPLAYNAME; }
    { 5   ;1   ;Column  ;CurrReport_PAGENO;
               SourceExpr=ReportForNav.PageNo; }
    { 8   ;1   ;Column  ;Customer_TABLECAPTION__________CustFilter;
               SourceExpr=TABLECAPTION + ': ' + CustFilter; }
    { 7   ;1   ;Column  ;CustFilter;
               SourceExpr=CustFilter; }
    { 20   ;1   ;Column  ;Customer__No__;
               SourceExpr="No."; }
    { 21   ;1   ;Column  ;Customer__Customer_Posting_Group_;
               SourceExpr="Customer Posting Group"; }
    { 22   ;1   ;Column  ;Customer__Customer_Disc__Group_;
               SourceExpr="Customer Disc. Group"; }
    { 23   ;1   ;Column  ;Customer__Invoice_Disc__Code_;
               SourceExpr="Invoice Disc. Code"; }
    { 24   ;1   ;Column  ;Customer__Customer_Price_Group_;
               SourceExpr="Customer Price Group"; }
    { 25   ;1   ;Column  ;Customer__Fin__Charge_Terms_Code_;
               SourceExpr="Fin. Charge Terms Code"; }
    { 26   ;1   ;Column  ;Customer__Payment_Terms_Code_;
               SourceExpr="Payment Terms Code"; }
    { 27   ;1   ;Column  ;Customer__Salesperson_Code_;
               SourceExpr="Salesperson Code"; }
    { 28   ;1   ;Column  ;Customer__Currency_Code_;
               SourceExpr="Currency Code"; }
    { 29   ;1   ;Column  ;Customer__Credit_Limit__LCY__;
               DecimalPlaces=0:0;
               SourceExpr="Credit Limit (LCY)"; }
    { 30   ;1   ;Column  ;Customer__Balance__LCY__;
               SourceExpr="Balance (LCY)"; }
    { 31   ;1   ;Column  ;CustAddr_1_;
               SourceExpr=CustAddr[1]; }
    { 32   ;1   ;Column  ;CustAddr_2_;
               SourceExpr=CustAddr[2]; }
    { 33   ;1   ;Column  ;CustAddr_3_;
               SourceExpr=CustAddr[3]; }
    { 34   ;1   ;Column  ;CustAddr_4_;
               SourceExpr=CustAddr[4]; }
    { 35   ;1   ;Column  ;CustAddr_5_;
               SourceExpr=CustAddr[5]; }
    { 37   ;1   ;Column  ;Customer_Contact;
               SourceExpr=Contact; }
    { 39   ;1   ;Column  ;Customer__Phone_No__;
               SourceExpr="Phone No."; }
    { 40   ;1   ;Column  ;CustAddr_6_;
               SourceExpr=CustAddr[6]; }
    { 43   ;1   ;Column  ;CustAddr_7_;
               SourceExpr=CustAddr[7]; }
    { 1   ;1   ;Column  ;Customer___ListCaption;
               SourceExpr=Customer___ListCaptionLbl; }
    { 4   ;1   ;Column  ;CurrReport_PAGENOCaption;
               SourceExpr=CurrReport_PAGENOCaptionLbl; }
    { 9   ;1   ;Column  ;Customer__No__Caption;
               SourceExpr=FIELDCAPTION("No."); }
    { 10   ;1   ;Column  ;Customer__Customer_Posting_Group_Caption;
               SourceExpr=Customer__Customer_Posting_Group_CaptionLbl; }
    { 11   ;1   ;Column  ;Customer__Customer_Disc__Group_Caption;
               SourceExpr=Customer__Customer_Disc__Group_CaptionLbl; }
    { 12   ;1   ;Column  ;Customer__Invoice_Disc__Code_Caption;
               SourceExpr=Customer__Invoice_Disc__Code_CaptionLbl; }
    { 13   ;1   ;Column  ;Customer__Customer_Price_Group_Caption;
               SourceExpr=Customer__Customer_Price_Group_CaptionLbl; }
    { 14   ;1   ;Column  ;Customer__Fin__Charge_Terms_Code_Caption;
               SourceExpr=FIELDCAPTION("Fin. Charge Terms Code"); }
    { 15   ;1   ;Column  ;Customer__Payment_Terms_Code_Caption;
               SourceExpr=Customer__Payment_Terms_Code_CaptionLbl; }
    { 16   ;1   ;Column  ;Customer__Salesperson_Code_Caption;
               SourceExpr=FIELDCAPTION("Salesperson Code"); }
    { 17   ;1   ;Column  ;Customer__Currency_Code_Caption;
               SourceExpr=Customer__Currency_Code_CaptionLbl; }
    { 18   ;1   ;Column  ;Customer__Credit_Limit__LCY__Caption;
               SourceExpr=FIELDCAPTION("Credit Limit (LCY)"); }
    { 19   ;1   ;Column  ;Customer__Balance__LCY__Caption;
               SourceExpr=FIELDCAPTION("Balance (LCY)"); }
    { 36   ;1   ;Column  ;Customer_ContactCaption;
               SourceExpr=FIELDCAPTION(Contact); }
    { 38   ;1   ;Column  ;Customer__Phone_No__Caption;
               SourceExpr=FIELDCAPTION("Phone No."); }
    { 41   ;1   ;Column  ;Total__LCY_Caption;
               SourceExpr=Total__LCY_CaptionLbl; }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FormatAddr@1002 : Codeunit 365;
      CustFilter@1000 : Text;
      CustAddr@1001 : ARRAY [8] OF Text[50];
      Customer___ListCaptionLbl@1458 : TextConst 'ENU=Customer - List';
      CurrReport_PAGENOCaptionLbl@8565 : TextConst 'ENU=Page';
      Customer__Customer_Posting_Group_CaptionLbl@8050 : TextConst 'ENU=Customer Posting Group';
      Customer__Customer_Disc__Group_CaptionLbl@8520 : TextConst 'ENU=Cust./Item Disc. Gr.';
      Customer__Invoice_Disc__Code_CaptionLbl@5201 : TextConst 'ENU=Invoice Disc. Code';
      Customer__Customer_Price_Group_CaptionLbl@3738 : TextConst 'ENU=Price Group Code';
      Customer__Payment_Terms_Code_CaptionLbl@5049 : TextConst 'ENU=Payment Terms Code';
      Customer__Currency_Code_CaptionLbl@7330 : TextConst 'ENU=Currency Code';
      Total__LCY_CaptionLbl@4467 : TextConst 'ENU=Total (LCY)';
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1667, Version=4.1.0.1667, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Balance (LCY)");
              END;
           'Restore': BEGIN
                 "Balance (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}


