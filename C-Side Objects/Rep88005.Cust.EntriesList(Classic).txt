OBJECT Report 88005 Cust. Entries List (Classic)
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:36;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 1;   ;DataItem;                   ;
               DataItemTable=Table18;
               PrintOnlyIfDetail=Yes;
                }
    { 2   ;1   ;Column  ;CustomerFIELDCAPTION_Name;
               SourceExpr=Customer.FIELDCAPTION(Name); }
    { 3   ;1   ;Column  ;CustomerFIELDCAPTION_No;
               SourceExpr=Customer.FIELDCAPTION("No."); }
    { 4   ;1   ;Column  ;Customer_No;
               SourceExpr="No."; }
    { 5   ;1   ;Column  ;Customer_Name;
               SourceExpr=Name; }
    { 6; 1 ;DataItem;                   ;
               DataItemTable=Table21;
               DataItemLink=Customer No.=FIELD(No.);
               CalcFields=Amount
                }
    { 7   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_Amount;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION(Amount); }
    { 8   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_PostingDate;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Posting Date"); }
    { 9   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_EntryNo;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Entry No."); }
    { 10   ;2   ;Column  ;CustLedgerEntry_EntryNo;
               SourceExpr="Entry No."; }
    { 11   ;2   ;Column  ;CustLedgerEntry_PostingDate;
               SourceExpr="Posting Date"; }
    { 12   ;2   ;Column  ;CustLedgerEntry_Amount;
               SourceExpr=Amount;
               AutoCalcField=Yes; }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      CASE DataItemId OF
        'CustLedgerEntry': CASE SectionId OF
          'Body6': OnPreSectionCustLedgerEntry_Body6("Cust. Ledger Entry");
          'Body7': OnPreSectionCustLedgerEntry_Body7("Cust. Ledger Entry");
        END;
      END;
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'CustLedgerEntry': WITH "Cust. Ledger Entry" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"13");
              END;
           'Restore': BEGIN
                 "13" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body6@5012(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount >= 0)
      END;
    END;
    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body7@5013(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount < 0)
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



