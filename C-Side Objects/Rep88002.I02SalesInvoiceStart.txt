OBJECT Report 88002 I02 Sales Invoice Start
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:36;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
uv4C7fbUtnD2uL2yc9zecwX+/j8=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



