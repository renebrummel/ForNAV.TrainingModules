OBJECT Table 88000 Translations
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:53:56;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Nr.;
                                                              ENU=No.;
                                                              NLD=Nr.] }
    { 2   ;   ;Description         ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Beschreibung;
                                                              ENU=Description;
                                                              NLD=Omschrijving] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
}

OBJECT Table 88050 100 Top Customer Overview
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:54:07;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No            ;Integer       ;DataClassification=ToBeClassified }
    { 2   ;   ;No.                 ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=No. }
    { 3   ;   ;Name                ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Name }
    { 4   ;   ;Sales (LCY)         ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Sales (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5   ;   ;Profit (LCY)        ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Profit (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 6   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country/Region Code }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 9   ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 10  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Code }
    { 11  ;   ;Salesperson Name    ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Name }
    { 12  ;   ;Country Region Name ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country Region Name }
  }
  KEYS
  {
    {    ;Entry No                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
}

OBJECT Table 88051 100 Top Customer Overview Args
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:54:20;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;DataClassification=ToBeClassified }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Customer No. }
    { 3   ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 4   ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 5   ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Code }
    { 6   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country/Region Code }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
}

OBJECT Report 88000 B02 Customer Top 10
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:27;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Balance (LCY)) ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY),Sales (LCY)
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
J+EL/jyXO5ez01/ye7of/wM=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88001 B02 Vendor Top 10
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:28;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(Balance (LCY)) ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY)
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
N/uc9Xf834ef/gQ=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88002 I02 Sales Invoice Start
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:28;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
uv4C7fbUtnD2uL2yc9zecwX+/j8=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88003 I02 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:28;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
XV7oXgFazaFyvGs5r062/McI3/0P</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88004 I03 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:28;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=VAR
                  MyFile@1000 : File;
                  MyInStream@1001 : InStream;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                  MyFile.OPEN('C:\Temp\Append.pdf');
                  MyFile.CREATEINSTREAM(MyInStream);
                  ReportForNav.GetDataItem('Header').AppendPdf(MyInStream);
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
wOB6qhZz90rZ9vcLNtOUwd4+/8lJz688fvc/</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88005 Cust. Entries List (Classic)
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:28;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 1;   ;DataItem;                   ;
               DataItemTable=Table18;
               PrintOnlyIfDetail=Yes;
                }
    { 2   ;1   ;Column  ;CustomerFIELDCAPTION_Name;
               SourceExpr=Customer.FIELDCAPTION(Name); }
    { 3   ;1   ;Column  ;CustomerFIELDCAPTION_No;
               SourceExpr=Customer.FIELDCAPTION("No."); }
    { 4   ;1   ;Column  ;Customer_No;
               SourceExpr="No."; }
    { 5   ;1   ;Column  ;Customer_Name;
               SourceExpr=Name; }
    { 6; 1 ;DataItem;                   ;
               DataItemTable=Table21;
               DataItemLink=Customer No.=FIELD(No.);
               CalcFields=Amount
                }
    { 7   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_Amount;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION(Amount); }
    { 8   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_PostingDate;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Posting Date"); }
    { 9   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_EntryNo;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Entry No."); }
    { 10   ;2   ;Column  ;CustLedgerEntry_EntryNo;
               SourceExpr="Entry No."; }
    { 11   ;2   ;Column  ;CustLedgerEntry_PostingDate;
               SourceExpr="Posting Date"; }
    { 12   ;2   ;Column  ;CustLedgerEntry_Amount;
               SourceExpr=Amount;
               AutoCalcField=Yes; }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      CASE DataItemId OF
        'CustLedgerEntry': CASE SectionId OF
          'Body6': OnPreSectionCustLedgerEntry_Body6("Cust. Ledger Entry");
          'Body7': OnPreSectionCustLedgerEntry_Body7("Cust. Ledger Entry");
        END;
      END;
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'CustLedgerEntry': WITH "Cust. Ledger Entry" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"13");
              END;
           'Restore': BEGIN
                 "13" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body6@5012(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount >= 0)
      END;
    END;
    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body7@5013(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount < 0)
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88006 I04 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:28;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88007 B03 - Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:28;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
R7cP/wE=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88050 JavaScript Demo
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:28;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 1000000000;   ;DataItem;                   ;
               DataItemTable=Table2000000026;
               MaxIteration=1;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88051 A02 JavaScript Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:28;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88052 A04 Template Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:28;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=VAR
                  MyFile@1000 : File;
                  MyInStream@1001 : InStream;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                  MyFile.OPEN('C:\Temp\Append.pdf');
                  MyFile.CREATEINSTREAM(MyInStream);
                  ReportForNav.GetDataItem('Header').AppendPdf(MyInStream);
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.) WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
               ReqFilterFields=No.;
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               DataItemLink=Document Type=FIELD(Document Type), Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88054 A03 Footers Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:29;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
hDzrU/81N0VHbumXiL8erfmFg3/6Pw==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88055 A05 100 Top Customer Overview
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:29;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  FillTempListTable();
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table88050;
               DataItemTableView=SORTING(Sales (LCY)) ORDER(Descending);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    LOCAL PROCEDURE FillTempListTable@1();
    VAR
      TopCustomerOverview@1000 : Query 100;
    BEGIN
      WITH TopCustomerOverview DO BEGIN
        OPEN();
        WHILE READ() DO BEGIN
          List."Entry No" := List."Entry No" + 1;
          List."No." := No;
          List.Name := Name;
          List."Sales (LCY)" := Sales_LCY;
          List."Profit (LCY)" := Profit_LCY;
          List."Country/Region Code" := Country_Region_Code;
          List.City := City;
          List."Global Dimension 1 Code" := Global_Dimension_1_Code;
          List."Global Dimension 2 Code" := Global_Dimension_2_Code;
          List."Salesperson Code" := Salesperson_Code;
          List."Salesperson Name" := SalesPersonName;
          List."Country Region Name" := CountryRegionName;
          List.INSERT();
        END;
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88056 A06 100 Top Cust Overview Args
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:29;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 3;   ;DataItem; Args                  ;
               DataItemTable=Table88051;
               OnPreDataItem=BEGIN
                               INSERT();
                             END;
               OnAfterGetRecord=BEGIN
                                  FillTempListTable();
                                END;
               Temporary=Yes;
                }
    { 2; 1 ;DataItem; List                  ;
               DataItemTable=Table88050;
               DataItemTableView=SORTING(Sales (LCY)) ORDER(Descending);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1   ;1   ;Group     ;
                  CaptionML=ENU=Filter Fields;
                  GroupType=Group }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=Customer No.;
                  SourceExpr=Args."Customer No.";
                  TableRelation=Customer }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Dimension 1 Code;
                  SourceExpr=Args."Global Dimension 1 Code";
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1)) }

      { 4   ;2   ;Field     ;
                  CaptionML=ENU=Dimension 2 Code;
                  SourceExpr=Args."Global Dimension 2 Code";
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2)) }

      { 5   ;2   ;Field     ;
                  CaptionML=ENU=Salesperson Code;
                  SourceExpr=Args."Salesperson Code";
                  TableRelation=Salesperson/Purchaser }

      { 6   ;2   ;Field     ;
                  CaptionML=ENU=Country Region Code;
                  SourceExpr=Args."Country/Region Code";
                  TableRelation=Country/Region }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    LOCAL PROCEDURE FillTempListTable@1();
    VAR
      TopCustomerOverview@1000 : Query 100;
    BEGIN
      WITH TopCustomerOverview DO BEGIN
        SETFILTER(No, Args."Customer No.");
        SETFILTER(Global_Dimension_1_Code, Args."Global Dimension 1 Code");
        SETFILTER(Global_Dimension_2_Code, Args."Global Dimension 2 Code");
        SETFILTER(Salesperson_Code, Args."Salesperson Code");
        SETFILTER(Country_Region_Code, Args."Country/Region Code");
        OPEN();
        WHILE READ() DO BEGIN
          List."Entry No" := List."Entry No" + 1;
          List."No." := No;
          List.Name := Name;
          List."Sales (LCY)" := Sales_LCY;
          List."Profit (LCY)" := Profit_LCY;
          List."Country/Region Code" := Country_Region_Code;
          List.City := City;
          List."Global Dimension 1 Code" := Global_Dimension_1_Code;
          List."Global Dimension 2 Code" := Global_Dimension_2_Code;
          List."Salesperson Code" := Salesperson_Code;
          List."Salesperson Name" := SalesPersonName;
          List."Country Region Name" := CountryRegionName;
          List.INSERT();
        END;
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88057 A01 Customer Top 10 Chart
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:29;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Balance (LCY)) ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY),Sales (LCY)
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
dZ6gZc9rums6B8Oen/z97t8=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88058 A01 Sales Invoice Chart
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:29;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
VJB341p7Nf7RqOWvOf75fwE=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



OBJECT Report 88101 Customer - List(101)
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=15-10-19;
    Time=14:44:29;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1696;
    
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer - List;
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=VAR
                  CaptionManagement@1000 : Codeunit 42;
                BEGIN
                  CustFilter := CaptionManagement.GetRecordFiltersWithCaptions(Customer);
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 6836;   ;DataItem;                   ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Balance (LCY)");
                                  FormatAddr.FormatAddr(
                                    CustAddr,Name,"Name 2",'',Address,"Address 2",
                                    City,"Post Code",County,"Country/Region Code");
                                END;
               ReqFilterFields=No.,Search Name,Customer Posting Group;
                }
    { 3   ;1   ;Column  ;COMPANYNAME;
               SourceExpr=COMPANYPROPERTY.DISPLAYNAME; }
    { 5   ;1   ;Column  ;CurrReport_PAGENO;
               SourceExpr=ReportForNav.PageNo; }
    { 8   ;1   ;Column  ;Customer_TABLECAPTION__________CustFilter;
               SourceExpr=TABLECAPTION + ': ' + CustFilter; }
    { 7   ;1   ;Column  ;CustFilter;
               SourceExpr=CustFilter; }
    { 20   ;1   ;Column  ;Customer__No__;
               SourceExpr="No."; }
    { 21   ;1   ;Column  ;Customer__Customer_Posting_Group_;
               SourceExpr="Customer Posting Group"; }
    { 22   ;1   ;Column  ;Customer__Customer_Disc__Group_;
               SourceExpr="Customer Disc. Group"; }
    { 23   ;1   ;Column  ;Customer__Invoice_Disc__Code_;
               SourceExpr="Invoice Disc. Code"; }
    { 24   ;1   ;Column  ;Customer__Customer_Price_Group_;
               SourceExpr="Customer Price Group"; }
    { 25   ;1   ;Column  ;Customer__Fin__Charge_Terms_Code_;
               SourceExpr="Fin. Charge Terms Code"; }
    { 26   ;1   ;Column  ;Customer__Payment_Terms_Code_;
               SourceExpr="Payment Terms Code"; }
    { 27   ;1   ;Column  ;Customer__Salesperson_Code_;
               SourceExpr="Salesperson Code"; }
    { 28   ;1   ;Column  ;Customer__Currency_Code_;
               SourceExpr="Currency Code"; }
    { 29   ;1   ;Column  ;Customer__Credit_Limit__LCY__;
               DecimalPlaces=0:0;
               SourceExpr="Credit Limit (LCY)"; }
    { 30   ;1   ;Column  ;Customer__Balance__LCY__;
               SourceExpr="Balance (LCY)"; }
    { 31   ;1   ;Column  ;CustAddr_1_;
               SourceExpr=CustAddr[1]; }
    { 32   ;1   ;Column  ;CustAddr_2_;
               SourceExpr=CustAddr[2]; }
    { 33   ;1   ;Column  ;CustAddr_3_;
               SourceExpr=CustAddr[3]; }
    { 34   ;1   ;Column  ;CustAddr_4_;
               SourceExpr=CustAddr[4]; }
    { 35   ;1   ;Column  ;CustAddr_5_;
               SourceExpr=CustAddr[5]; }
    { 37   ;1   ;Column  ;Customer_Contact;
               SourceExpr=Contact; }
    { 39   ;1   ;Column  ;Customer__Phone_No__;
               SourceExpr="Phone No."; }
    { 40   ;1   ;Column  ;CustAddr_6_;
               SourceExpr=CustAddr[6]; }
    { 43   ;1   ;Column  ;CustAddr_7_;
               SourceExpr=CustAddr[7]; }
    { 1   ;1   ;Column  ;Customer___ListCaption;
               SourceExpr=Customer___ListCaptionLbl; }
    { 4   ;1   ;Column  ;CurrReport_PAGENOCaption;
               SourceExpr=CurrReport_PAGENOCaptionLbl; }
    { 9   ;1   ;Column  ;Customer__No__Caption;
               SourceExpr=FIELDCAPTION("No."); }
    { 10   ;1   ;Column  ;Customer__Customer_Posting_Group_Caption;
               SourceExpr=Customer__Customer_Posting_Group_CaptionLbl; }
    { 11   ;1   ;Column  ;Customer__Customer_Disc__Group_Caption;
               SourceExpr=Customer__Customer_Disc__Group_CaptionLbl; }
    { 12   ;1   ;Column  ;Customer__Invoice_Disc__Code_Caption;
               SourceExpr=Customer__Invoice_Disc__Code_CaptionLbl; }
    { 13   ;1   ;Column  ;Customer__Customer_Price_Group_Caption;
               SourceExpr=Customer__Customer_Price_Group_CaptionLbl; }
    { 14   ;1   ;Column  ;Customer__Fin__Charge_Terms_Code_Caption;
               SourceExpr=FIELDCAPTION("Fin. Charge Terms Code"); }
    { 15   ;1   ;Column  ;Customer__Payment_Terms_Code_Caption;
               SourceExpr=Customer__Payment_Terms_Code_CaptionLbl; }
    { 16   ;1   ;Column  ;Customer__Salesperson_Code_Caption;
               SourceExpr=FIELDCAPTION("Salesperson Code"); }
    { 17   ;1   ;Column  ;Customer__Currency_Code_Caption;
               SourceExpr=Customer__Currency_Code_CaptionLbl; }
    { 18   ;1   ;Column  ;Customer__Credit_Limit__LCY__Caption;
               SourceExpr=FIELDCAPTION("Credit Limit (LCY)"); }
    { 19   ;1   ;Column  ;Customer__Balance__LCY__Caption;
               SourceExpr=FIELDCAPTION("Balance (LCY)"); }
    { 36   ;1   ;Column  ;Customer_ContactCaption;
               SourceExpr=FIELDCAPTION(Contact); }
    { 38   ;1   ;Column  ;Customer__Phone_No__Caption;
               SourceExpr=FIELDCAPTION("Phone No."); }
    { 41   ;1   ;Column  ;Total__LCY_Caption;
               SourceExpr=Total__LCY_CaptionLbl; }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FormatAddr@1002 : Codeunit 365;
      CustFilter@1000 : Text;
      CustAddr@1001 : ARRAY [8] OF Text[50];
      Customer___ListCaptionLbl@1458 : TextConst 'ENU=Customer - List';
      CurrReport_PAGENOCaptionLbl@8565 : TextConst 'ENU=Page';
      Customer__Customer_Posting_Group_CaptionLbl@8050 : TextConst 'ENU=Customer Posting Group';
      Customer__Customer_Disc__Group_CaptionLbl@8520 : TextConst 'ENU=Cust./Item Disc. Gr.';
      Customer__Invoice_Disc__Code_CaptionLbl@5201 : TextConst 'ENU=Invoice Disc. Code';
      Customer__Customer_Price_Group_CaptionLbl@3738 : TextConst 'ENU=Price Group Code';
      Customer__Payment_Terms_Code_CaptionLbl@5049 : TextConst 'ENU=Payment Terms Code';
      Customer__Currency_Code_CaptionLbl@7330 : TextConst 'ENU=Currency Code';
      Total__LCY_CaptionLbl@4467 : TextConst 'ENU=Total (LCY)';
      ReportForNav@5000 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.4.1.0.1696, Version=4.1.0.1696, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_4_1_0_1696\ForNav.Reports.4.1.0.1696.dll') THEN
        ERROR('Please install the ForNAV DLL version 4.1.0.1696 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);
      ReportForNav.Init;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Balance (LCY)");
              END;
           'Restore': BEGIN
                 "Balance (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}



