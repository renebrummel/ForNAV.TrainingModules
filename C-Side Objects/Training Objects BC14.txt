OBJECT Table 88000 Translations
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:53:56;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Nr.;
                                                              ENU=No.;
                                                              NLD=Nr.] }
    { 2   ;   ;Description         ;Boolean       ;DataClassification=ToBeClassified;
                                                   CaptionML=[DEU=Beschreibung;
                                                              ENU=Description;
                                                              NLD=Omschrijving] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
}

OBJECT Table 88050 100 Top Customer Overview
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:54:07;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No            ;Integer       ;DataClassification=ToBeClassified }
    { 2   ;   ;No.                 ;Code20        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=No. }
    { 3   ;   ;Name                ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Name }
    { 4   ;   ;Sales (LCY)         ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Sales (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5   ;   ;Profit (LCY)        ;Decimal       ;FieldClass=Normal;
                                                   CaptionML=ENU=Profit (LCY);
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 6   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country/Region Code }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 9   ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 10  ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Code }
    { 11  ;   ;Salesperson Name    ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Name }
    { 12  ;   ;Country Region Name ;Text50        ;DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country Region Name }
  }
  KEYS
  {
    {    ;Entry No                                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
}

OBJECT Table 88051 100 Top Customer Overview Args
{
  OBJECT-PROPERTIES
  {
    Date=27-03-19;
    Time=07:54:20;
    Modified=Yes;
    Version List=TRN1.0.0;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;DataClassification=ToBeClassified }
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Customer No. }
    { 3   ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 4   ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 5   ;   ;Salesperson Code    ;Code20        ;TableRelation=Salesperson/Purchaser;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Salesperson Code }
    { 6   ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   DataClassification=ToBeClassified;
                                                   CaptionML=ENU=Country/Region Code }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
}

OBJECT Report 88000 B02 Customer Top 10
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:05;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Balance (LCY)) ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY),Sales (LCY)
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>5TcAAO1b63LbuBX+35m+A4edyWVGlgiA4GVtbcaXOOupnbiWkzj904FIyOaGIlWKcuz91afpS/RH
36Uv0FfoAQFKvICyZDvb7UzHGUUEgYOD7xwcfAeA9t7cTWPjlmfzKE2GJupbpsGTIA2j5HpoLvLJ
jme++fH3v9u7yjN2wWdpls9P2X26yEc8i1gc/cIzY/X101KQ3cd9KqTVikzjPZvyoXlgYeNwMc/T
KTS/TGcGgpqHaZJnaXx5P4MaR/z27d0s4/N5v9J1/+NJ5RH3jI5qt6KzXtm3MTRKfXrQbZwvMg5l
CV9Ak7hnnC/GcRT8kd9fpl+5qB26AfO4hy13YnPbAt2OovksZvdrtFddH6fZe3a7HLTdB0j7yPEd
0/gw/pkH+ft0aHqeJYSqgm6ZxxGPw898DADfRgH/mMVD8ybPZz8MBjGb5elsx/LJYpZe3/7gWo43
ODhEtjVgs2gg1Rjsz2ZnLGHXfMqTfHALugzeBOl0xpL7IeV2OA4duuOxINyxA9/Z8Wx3vMOp6zMa
TMIw5KZxDo1/4tH1TT40se9asuRzFOY3UIDEMM5Ydh0lc3i0/J7h0Z6BLav4KFH5mETQ/BJ0uJl/
mOyfRXEcTXnOMwB2FkFDagMayXnGZf1RkEUzaHEoVT1JJmk2ZTkg2n/H81evd1/84e5IfOzvaqoc
sjgokJu/enkeBcLaL1/vAprgX0NzX/hqz3BnuQl+bRh7BywJ58VXeDjJ+RQpJz2N5nnDKyWsRyxn
oqJoCRWW3YEVWcySgBuvTg+/vO6NWMzn8jsMVDX6xLKq+LL4ko1jKCz+Q16j/FPEvw3N0YeLy5P3
717VOnltfLg4envx6ojPA56IaftaWOQO2mYFHDDxwA4nIaBsqlE2Bl0Z+AWfDE2iHfRPnIU8k0OW
A5AlqGrDUXSdMAE4PGOXIcdlxCG+wzA8TsYosKnHPMcJCeYY2S7nPjhUFiX5h+QtRKF74VxDM88W
4HojmBwwgEZn0hmPQU3f6XsuNSujgHEozee10vr47HIAucAWN0Z7dVFALsbyC4dukGc5fZiuCPcc
0qemcZoGBbDHccrAn8DTCSF9ApqsgGj0Dv1fpN+aOjX1ojW9oEGHavCmivlnNTutPnVcH/QktvrS
VkNCxOMWPjp9HH33onlNU1FQHbxxkGZgK5gO+6Jmbdp5s7xnzPN78PWDNA6r2iNCkEVdx3V87CEq
p8CI58XcWk2ZfvF8COEPbDDvv09N45LfgYR//e3v8NAxLhjZSPQKvpZmUX4vR+iaxsc5lwpOWDzn
xfNSfVU06MJqUIC1Dkks+/G2QNJ5OpKEYA8T3wU3IC52XX9TLOFFFU3xuBWe/jPgidfhSWQ/Lbaw
DlD36YBSy/WIQy2PWNiD7xviuR+GgplUIC1LtkIVoWeAlayD1VYddQQcLazCBk92VAhWlu/4MOVd
l2wK6zm7F3TmkmfT+WEaVl229Wo7oMlGQEOR6HA/hsVO9LahBex1FqBKA3sLC3jPEHNdHyOKbGph
x3OQjzc0gaIgfwEGUqL/QK3tDEGfweOpfvUbdC1/XeF8b6BZu/WVqzEfNZdPSaMEWAfpXWnMSbWQ
VkmHB2GcELfnCysB/6CejnpYDVsjG3itccCCr4dpnGbCLGDqg3hRUPlQpnWkJ//qjnOQ5pB9VH2q
vhJoPONwkWWSsff1i4XWuB2r7krnVeFS5c2dQL+K1FYPr0R/dMNmHGntVLzS2QNZfde3fYptLRX0
gCy6vk+dNpA/pdkvp1EipOYZz4ObkujuJ9eC+/tgzKJbqceyugZVUUsNxleNyrmadGLSXAKqoR83
V1SJgkqfKg67KkG68StvtYlfTwsKFD3q9z2fuhT3kEv7mPq+4CaNYHoWhWHMT/kEHFlgULyCkRUF
q0gv9ShkFx7y5zSdnkwhfdA6ajtLLAVs5LMYbRH29eG+GuZxc6HVxgb1iJb4AZY96vVt3EIeUWoL
/8RF8u1CviKhXZmgguSFCAm1RfOad1hBVV0784vmm6FItkaxGcQLFB0lrrlYPhxh8RJL3wYgIWlz
UAekylm9Lp9eA6jythWdfhSuVSmbwUu3htfRwesqcdsvYCtXJYh2uartk9JVERiB+iK33hDZyzRk
90/AVLbfDE13azTd+lbEQLMX0eYNVc6Am4mihPwgDe+rGy/iuWvbxXUQgwgbMGxjN3BCPiGBN2HY
sgLuITuwJsjDPMSN7RUlcrm5gizSR4/aXcF+jag2V9c12yvLPvU8p7JTGIaFwWQ3gRRflKDH7bwQ
q7n10qH2r7X1Qjr612diepXUfopNfcfyKLGcTm7f3EPpJtYVXyXbJItYr6LcqIB/1PZ938bdGxW6
rYn1aiqyR5q7mevUJB3GLdJ/17Ec6sLC6j2QJb3L0sWskv2fLeI8EsSs5Hut7YD1I1EUjWyTG/od
gMuEG/nI95GN7G6fKJ5P0/SrGEo1rRYbzWJ3HqZnR+JdrbFV2ke2WcCWgjZOrsk2G5p2x6QqEmZM
kE9t8AWne8+iK0WulesH9R1zVO2iBMWFj0L6tZgmCiy3rl07rarNMv3CdZymef3M4PCGZXkV2lN+
y+OhuYNqqxiZjLEPH8R2OCYuRoyzsQ1hAoeW5YW2F04sEnCnehzguH3XtTzbbixtssut1zHi13TW
Z4lqOMuc9H0q0i/5qJLZgxgS29qIdYtbO8+sjudqChD9+x//fBHnu7UD2xd/XaT5Lupb8svq6FY+
F+e38uubF9d55dhMSCqUB9GVk9yGXHVoKp/qAgxjKcLYn804y4RXC8BKccWBlmx6xCcMHEwpOeKx
tM9ZGpY1BHDL11nE57pK8o1eG6nPUcSuMzY1hI06dLn6oip1yZGS9u+i+ZXxKZpH0PQkOWeJ0Kkl
bQcprQddgtTYhQDjbSKaCtFfRLq6MtSxiHFK0qrS1SaVvowCcMr4QVnrqnUqX3TwNBSEmEEJud5o
EEDF3GKwRGZi8sGaeCMKPyRA26E0V92I1VN1dJAuklB5ChD71bBajiQEnfHpmGfLGup9642Iz+u9
Qoq85NNZzHLejVvpwyukdDVl3cqRc9XNjRLTTyxe8JWuOvwra4pqtJ9dL8TyOQpYLPeT5Is/LaBp
DvHndq3tV5phjWZ4c82KI/Dn06twpk3AlV5XdSxd+BoU8asdGQft0CgqaZILGQDlsbII47WopZYD
XUAzZaGOH+2VQUxKhYVHG83MZSDryDWqgUeKAt6qiUDmsSRYmrjTflWJNpp27ZcdBEfGFakVkO41
AaZgBmukXCkp9uOk7JWhSWuIZmCCfqjZjiumyJmqz8XVDr3ObefdIB0UPH3tZDNrrFJtbqswYmom
nVmZb5ule7b7kArLqd5QAD9WgT3NTNebsGonDTcuJuljyXF777yalNmbEt/ziG/IfS2fhJiFNgrH
NndtHjILUo6Q2s44IJR5iE8ch7Owwn2p5TVI77K77W/H1Hmvfqf6uXmv6+BeMYj/M93nY7qjCGgK
VxXJker0Is0LM5yxPIvuNM3QrlX+9enujtX3HMcCC1rEhWSE+OpVqxQqlw0foIO/MuFrs6MnM79u
ziSu6hmjb5zPjqJM2lX1cQgjgKAQxGnw9Vu05N5rDAiTmBzJjoXYDYnROh1/C9xU39t/FT2FXzHa
/zXaSb8L7aSdtLMRVcx1AcV8jljSQdw05IxiHTmrUaOtWNoyz5PSSddu5l7htrKS3YVbwx3Nppub
TQ9/iBaV2j0jz6T0KTyze6+3go/z3fFZfzHzt0Qq7SapVBvV1N2QVMqS2vnPOdAuSIHkZZ7ywKHz
hvWKdXoWmfiUTQjBNh57E29Cw3AcTEIrsBAKfMdlnucwr3pGiP0+xQihJvks1dqae1I9m1535Ly6
XYJx55Ez9ZA6Y6wfJHadNOs38Dc/cW613+jEmfpbnzivu4Dm6K/06C+Z4NYWtEIT+b5Duq6eLfn/
ZTpr33eqnLsfF9du1HHXq5ea6ziak7OXvZc94+XrB470nyR6I7s46NEXz9ZM/tXNlr1B/dcYxdJ2
2QhMtYv5y99RlRsPHYe6g6aA0jXI8ipBc3F86CSrJVKdADnLX1VU9gE6BFZqDCooNIdddfEqRtJG
oxvOy/hbA8ctFalfDFDOWjwNzZNkzvPKlUirJ//klcjVVcR3EP7n4zRLi0t7UFW6GyAPeeBu8WEV
KUiRILIA4l6ZA5aDgxWnru/eBQ9Al7lOeXE1MYV8eJWEt/x5JXclZ2+w5vd5P/4H</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88001 B02 Vendor Top 10
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(Balance (LCY)) ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY)
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88002 I02 Sales Invoice Start
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88003 I02 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88004 I03 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=VAR
                  MyFile@1000 : File;
                  MyInStream@1001 : InStream;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                  MyFile.OPEN('C:\Temp\Append.pdf');
                  MyFile.CREATEINSTREAM(MyInStream);
                  ReportForNav.GetDataItem('Header').AppendPdf(MyInStream);
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88005 Cust. Entries List (Classic)
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 1;   ;DataItem;                   ;
               DataItemTable=Table18;
               PrintOnlyIfDetail=Yes;
                }
    { 2   ;1   ;Column  ;CustomerFIELDCAPTION_Name;
               SourceExpr=Customer.FIELDCAPTION(Name); }
    { 3   ;1   ;Column  ;CustomerFIELDCAPTION_No;
               SourceExpr=Customer.FIELDCAPTION("No."); }
    { 4   ;1   ;Column  ;Customer_No;
               SourceExpr="No."; }
    { 5   ;1   ;Column  ;Customer_Name;
               SourceExpr=Name; }
    { 6; 1 ;DataItem;                   ;
               DataItemTable=Table21;
               DataItemLink=Customer No.=FIELD(No.);
               CalcFields=Amount
                }
    { 7   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_Amount;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION(Amount); }
    { 8   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_PostingDate;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Posting Date"); }
    { 9   ;2   ;Column  ;CustLedgerEntryFIELDCAPTION_EntryNo;
               SourceExpr="Cust. Ledger Entry".FIELDCAPTION("Entry No."); }
    { 10   ;2   ;Column  ;CustLedgerEntry_EntryNo;
               SourceExpr="Entry No."; }
    { 11   ;2   ;Column  ;CustLedgerEntry_PostingDate;
               SourceExpr="Posting Date"; }
    { 12   ;2   ;Column  ;CustLedgerEntry_Amount;
               SourceExpr=Amount;
               AutoCalcField=Yes; }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      CASE DataItemId OF
        'CustLedgerEntry': CASE SectionId OF
          'Body6': OnPreSectionCustLedgerEntry_Body6("Cust. Ledger Entry");
          'Body7': OnPreSectionCustLedgerEntry_Body7("Cust. Ledger Entry");
        END;
      END;
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'CustLedgerEntry': WITH "Cust. Ledger Entry" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"13");
              END;
           'Restore': BEGIN
                 "13" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body6@5012(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount >= 0)
      END;
    END;
    LOCAL PROCEDURE OnPreSectionCustLedgerEntry_Body7@5013(VAR "Cust. Ledger Entry"@1000 : Record 21);
    BEGIN
      WITH "Cust. Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(Amount < 0)
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88006 I04 Sales Invoice Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>eWMAAO1d63LbOJb+P1X7DlxNVXdPrUwRIAiAcTRdtmx3u8Z2vLGT9M6fFEhCNqcpUU1RdtxTWzVP
Mw+2T7IALxIvIEVKStIz1anqRAKFw3M+HJwbDtmvv/80C7QnHi39cD4eAN0YaHzuhp4/fxgPVvH0
iA6+//N//OH1T3HE3vJFGMXLK/YSruI7Hvks8H/lkbb5+H5NCOlQtyS10tBAu2EzPh5cGki7YwFf
apfzp9B3uXbhz/3l40CbhPM4CoP7l4X42Rl/Ov+0iPhyqRfur7+7LHyFQ63hZ0/yjsOcAW2s5UwN
tckqiFcRF2NzvhJTgqF2u3IC3/0Lf7kPf+by1x5xGeUUGmSKODKEKGf+chGwl20iZPe/CKMb9rQW
H+kCXB1gGw+0N87fuBvfhOMBpYaxGdhC+MLngfeBOwLvJzH+LgrGg8c4XrwajQK2iMPFkWGbq0X4
8PSKGJiOTicAGSO28EcpL6OTxeKazdkDn/F5PHoSDI2+d8PZgs1fxhZHnuNh64gy1ztCro2PKCLO
EbeIzSx36nkeH2i3YvKP3H94jMcDaBMjHfnge/GjGAASpWsWPfjzpfhq2EONWkON4KFmkRyYd3Nf
TL4XHDwu30xPrv0g8Gc85pEAeOGLaRYSgMxvI57+/s6N/IWYMUkZvZxPw2jGYgGq/gOPv/vT8Td/
/HQm/zo5VvxkwgI3wW353be3vitX/dvilM0nidHJ+zserxY1wsVrRYpX4UMoyImlEWo7HpzIfTDU
7EU81NxHFokJY2Mgto+mvT5lc2+ZfBRfLmM+A9le+JEzTwpf0vx0wc5YzORP5VyxdfizBPuWR2+5
G0beeBBHK7EmG4YEB7NwNY8H2n0YsyAfxFJ3M1LvWVS+bX7hnjmBGE7+AQDK1frlwg/EuuRkbkJ9
oF2K2yYXlzyW3NysZg6PMlYy8SrSFiR+y6fjgamUNeUnk7TAISiqxZ3/MGdyDcV+mhoEuY4FLMsz
EcXcdbFQVNNhpulOiYMsl08BEZNuI38ev5mfCyv3IlnOcbsTW06oSOVmqXZfiK2JhbFAgAwKYghB
MtaXpdGygEgp4D3/FJ+Gn3Lpsq/QkFL9yuUNTVNHJrEwGFpUR9AwkGkPtKvQTVT5IgiZ0DFhvSCF
OjGAhe0iNpJgLoeerNlEGAUxcanfhNp/ad++0r4V/2Q/uAnTpRcqmvy2iEK32SMVAjBFwOqDQA2A
oQV0W4hPkFUTn+piGCF4fmQIy2IioAMIcBEHYXHjk0AoirhDuBALGka/Zt+v+DRWAfVDFK4WS/1U
mKKPcXjiedKXpD9MZkpzmVBLCbTj1kBswubiynN1p6zRu4tfAi5UNYz8+CVFUYj1bskrXExZsOQK
9EcJ/Ko1MVNqpMeaSESzRYHA0qkllmWoWA0AkaULhaXC0mOMdYzEAK5r5f/9459iZ/984rrSPKl1
T2G8y3pYoVAGVK2OKBWd9hEd7SA6BNtEl/fYWep0cheBrVRgu4/AsL/AFmld6/cn92/5g78UkVVi
YXdbbwWVLhDgFAJg9MHA6I8BQq2LfvsYzvmOkq/ndpGXZPKCHvLusL2Fi20Ud6tA5x+vmR/shEU+
tQsUNIMC9oCC7qD9ZuvK/xjOuIwzdhJ3M7mLwHYmsDqkUgu8sW8EUZ0QEaVDAHRKqIlgXW7DsoXc
0KRDDYiPto0xtTv627cylCog0+JZs592RyxzsznJTg5V2vaeHtVWxnlGRq9PnGOucbcR1oGBkAmG
tkgJiTrQowJtalsCd6OSXwC8iIsr0IJ46jkqAl/7nhfwZsRXUZSmXnoyvRu0abCS8pkh2hNqYCix
zoJqoI5fspyuAPdmBGyJHo1yapHuCQvpBoZiQYZAODlDxKSQNiCYRoMN8aUAX2aHCeGkmPLXMJxd
zhrsQjHBTKZ1A532BxkoQc7idtArcNhYTgulKUvdfFgCT1NgKOAu6non5U3t4M7Km0zvhKNMwvri
qAy1QRZrwz7OmKxxNIVhsAHGECtdEBIWQSikxFLtglqw3PiVnnjWze+aVDdsYX9sTSW2WTAP+zg7
awds1ZFOE7YKgPKQZW+kM0LdcO7v2wBS4pzlELCPc7N3wVkZQLfZgzws3hvYnFI3ZPvn4cBSIpul
JrBXKg52MQ/K/KwFWkWutTfIdZrd4N7BqWEl3FlmBHs5NXMHuNX5fwvcm6R+b5TXpDqBa+7g6YgS
3CzXMvt4OrCLOVbXlbaAW6gTHQThDb1uMO/g9Gi5zjxSFJqzX1br6lnwZqod40UYxuXCejpSRPM2
YC6/nJ+GcRzO8oyzsW6+KcITxi2TWxB7HAIHusSFtmPZwPQINoFBiGkC6Mq0a11WB5TILBsQWKnA
Z1z1rrab6nL7FXN4kEucfNnUuQA1TF3oFTYbwlaYxKwEECRsqfgFsCk1SRGxLGG/vhoPzm/ejb/5
ZRXGx98E8fF/nr2Z3P/P7bn2GM8C7fbd6dXlRMsuJ38fjUYfzMlodHZ/pv304/31lQZ0Q7uP2Hzp
S5IsGI3Ob4ozStOzA7/n52f92dTD6GF0/3b0Sd4MSJLZx6O4QE/3Yq9I4puHuHgCFkiigtdPs2C+
HLffC9i2nd6imaCWUOTMqwwn4zMeM03SPeK/rPyn0u3kKoqNciSXsSS/m14o/TgWe2skGTlOjtqW
PB4nx9WliaOEBXHb2I8DruJn1HhlKbe1FkuVqt3XXS5b5Nc03V3Cc4rPzBP8dznhiEkr8MoVQvAo
IXHkzz3x7ZWxEJgkJ6byo1b473+rFPGEInJ6Mfm7GwZh9OqPFxeG+HPsMPfnh0hYJ+8ovZAs/YJF
gvzxVCB3NGUzP3h5NRFMOJGfji3FTngFwCL7yXOyPV/NpdELsl9I+fORGjMnwCSWyKU3zMg/dWZy
Lj8bI7Z1Tgk8M4o4ByIP3xVlcArw+fmplQtmGF8J5UQ7k8uK7TVS7C857oTei0qZF5obsGV5d290
tKbLUv2FG1ROytWwOumaR9FLxrWYu5VOrkFVOpPHSMSMM7askRot8k9qcXJV6CVOvt61SWy2OJ47
y8VxCx+jOt7p6kgDWR5OCB+fnf/uK373FZ/fV0xOAbmwzfONFTs1rK/lKxCyT7FhnGz1FYZBP5uv
+MrmlGlzGYkWL330Pn2cRuzh413MovhCfJJpgmryiG01Y/mCV6dfROEj72GV87Wq0vnA/cc5cx/F
3qoRa5PtfO51k2wPo3pzdfa7Uf3dqH52o0oNKqzo6cnGqEIDfy2jStHEhheT0w5G1TDEhX9Ho9po
xfKVqk66jXgc+w897GEOc5XSX3i0jKecL+MDhofr3jRxvb3BzuzVYWdWKx+kQ92jeupslw+dO3Z+
ZJV22UGopS2EzeX4432aZbreYdS1zAarZTYzLyb5c96hXbfUgitr0LUW3JSQugHXrFx47/Pn8eDu
zdv7y5sfvjsL3ZV0qdpNqA8lGfnhT5spYuhnoSdcmCBX0esrL48HRSLji8vzq7PvUiqyx9eUnd3S
guVz5GBGp4xgtdW3Vp9Tn3aciq1RLEpKKeRYQ7uv6VoGw4BMAeeOizAlgEFGGCLIQJRjBKwpt5LD
kmJRcUN1XYDEpm4pqrgNlcaaNDRnOJbLUi25/vQ2Wa3ifsPD5I5bttpaaMX9BQdvw2cVZzXu7BJ3
YlYDg+JKEegPWUu/oVuY2AaAJso+qPlJEeOBEi4VY6jajZfxIWmUWJYDAKh5Q8Sk1LBsYgBkQ0va
wLq9kCuu53X/tAdG0axc4zOzq6h6nNHKJ9yXzzO+TJ5uEGpRYLg0upXzrOUAVZveWjk39+X8v1ds
LiK3l/bzlZZTmjWBFvnUhyvI7HG4UiKW2PVqc0EN0KzPAFXPFVoBRfsCKh+LCafXnC2FvSvgVBnf
qg7Z6T2qBgit3Fv7cr9+7mQ3Zcim91eFPkfzdVWontIXr7dZt/o5XPFag61umqQMQbJL16sg9idh
sJrNM4FJ4/lhS7SI1A3w9Udu5FqugwWVG7awJzzv1HUg5IR5Dgf21ATuFJMpZMBxxCfZs0gUbjin
eyBHjNSn+vVjv0L/BAY6bIh8jUo7YOV8TwRGSZnhJtKTGq74N1ff5LEola6VHogxSpuuwbRswgaE
kE7VgUMqxeFiBgtUY4YG7r50zGD18mhkXxNWzioO4ZnztW+IwdRy0MPK8RX9tNWnI61ETPksUw3e
LPCxenk6+7DwHsprZzGH7HHpLAs0DivLV/Lh8sngPdSk2sNYvP6ZfHhdMxt9+PbH8iy1b6537cgV
q3fuFJ+IJZQxipFn2VPXAzYyTYt4JqaAuAQbLpoiRJhDCy4484U1X63qxUkY7+icrV4td7TkoYFt
U2g39ZOnjrHsq7crZc8msOxxzjaNVj6v2ae5rl0Hi/4D92qxI1268oFt6sA0USWO2OB2t3KS+tWW
Fvu7WCgoizY2ZDOvLu+WTaJs+s7sIm54oksW2utRbGG46elx17AtyByHuFPXcJhtQhHCYmAzSjmx
IbYRJy5zjGLjGpRPJVc2S+lWO28X3KelHVrV7WJboHm7ELnQ5lBLY0nFUudbZEtmty3Cxb2eekc9
trxBTR0bBoR1IVp2vuTFn6+4t8cTJDX13hDtbhSsnYyCKvopug2MS/FAQwzUoQ5pHDCVwKSaSjTw
9aVTCVx1sq1x1d7lx+r7E3YsRuKqF23leu9i5OEToPzNA32Kv3Dv0uRvJgEi4IsUKkmfPBnuXaj8
PAlQVrYkfXJluHfZ8jeRAJH98uSvUMSsa+aW2E75oFm+5A1H2TKyqmdBheGm2I4QgBh1KDao5RjA
ho6DsMiNEPIcKOI7Ezg2JfKorDUPKt1p59COVDP61rAI7xYWdc2GfisxEemb8ndLlEif97xAslMY
rU6Xdo6ht+yb8t5+Paq9Vqu2HTPHkN78/cl9eutdWhbAEA/NIUz/VnQvVIir2higbQza2hgECe1S
dmH5U59HQ/lVvsxsFSTga5LR4T37pCXvehDse3wo1EYTQ8PbUDbXPfGsXQEY2R8gV2UmNJVFL+sH
mQ7TyEDVb5Sp559CjtZDFGKLXBICx6Su4TJkJ0/Fe6Y1ZQTaU4dQaiOTsWnFIBXIHugMhZZL/w1x
xBdOIiisJhENfH3pJIL2iU3wHqFJaWfVX4q02THlB3iL411TDNrnkHufI5YtMt26laeRk4GuCQbt
cwSwzwFLmxRyqBhBpq8AKQx2PQSgfQ4B9jnP2LImNWEKY13jeVpt/mo9nNnnQGOLMKdsycuipCPN
gvwWWgC2H+1TdcxT7a6T8rY010HoMk6mNrYJogZ0gE09g0HIgGuRKXJNi2GAWd0hHbS3jpa71xpa
sb6wO7KNqjtq4OtLuyO7V6vawXbWgR2Q3at4cUgp9nM5dp9gYJ+SVpnvgzkZu4/j36dmVMP9EG7F
7uPw96kS1bj/1/QjqlYy+SLy/m+RtdXd3PVCjUCm9bR6yjHwqGmZAJAp51NuYo9gSJntQA8bUxcT
7mDibqnSbG6zs9uxe5UN4J6H1XXV6ax1247g7D6n7hAcoNak2sM9TECjQGb+DtdeL3G1y51+hmGQ
phd8EAh11CRM0Z72Mch7Hnk3lXeKxdPMCK45mQRstexS2lGVb/LJqtKNhdtLN7IYU629wD1rLyUA
qwWwMjpFC1i88jp9NX7lRfuZMok1lv/PBbIOM+sPCm0WsbixgGFlU6WYm9forN/ZmE8TFnt9/9ej
lv9nxp//Hw==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88007 B03 - Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>ChwAAK2Z3XKjNhTH7zvTd2C42e3UxkiIr53QnXzuZpo4mdjJ9q4jg5zQxYgB7I33qk/TB+uT9Aiw
jW3ZC6Q3CQjp6Px/OqCj45OPr7NIWbA0C3nsqUjTVYXFPg/C+NlT5/m076gff/v5p5M/8pQ+sISn
eXZDl3yej1ga0ij8zlJlc/m0NkQ0rJnC2laTqgzpjHnqmW4ofWVEI5Yp1/GChz5TlXMe5ymPxssE
elywxeVrkrIs02pTa4/XtVvcUw50W4jJequ5FU9Z+dNTzudRPk8ZtMVsDkOinnI/n0Sh/ztbjvlX
JnoHtk8d5mDdnhJGdFBxEWZJRJdHvK+mvuLpkC7WookGSDVkuZaq3E3+Yn4+5J7qOLpurxsO27wK
WRR8YRMAvICGxzTy1Jc8Tz4MBhFNcp70ddeYJ/x58cHWLWdwdo6IPqBJOCjdGJwmyS2N6TObsTgf
LMCXwUefzxIaLz2TkWASWGbfoX7QJ75r9R1iT/rMtF1q+tMgCNayHuMw99QxGHnJ7qant2EUhTOW
s1RVbmn6HMaZp2Ld7SmO2VOwrhd/VOUeZv4SBvkLPEWrhs8sfH4Ba9i1BdgkhEuTgFhYfk89FaHU
U9wk7yn+C01HLPeg2118n7LSl5Gfhgn0VCEsFeXkjMZBVlzCzXXOZqiKsc+MBsLBrbAquVzQnIqu
YiyEJPsm/Lpn6QPzeRp4ap7OQfqq1xNNty2uHozpJILm4h9CENzXMBYLZhnLhcnhfDZhaWWv8nHH
5ZrbD2zqqYbU4XLmyt2aL6gOcBQ+x1TEtqf69tRnE51ghgzD9g3s62iqm7Zvwj8jmCCDUqIzEHmf
hnF+F1/CJ2ApXF6JH0FkQgTvTFau3ZWn2paruYZtqjUZIKRyPdtq3RZIpALH7DU/468rddUt1oWq
7wwmdAxDIzChhXqmoxEIL2K4qnLDfSr8vIo4hZiAwCPY0TDGZp2MMLdSoRUv1Tm8PjAs04Zc+VV5
90F5B/+qDkNeLjGEXtG3zqDZ6IFMPy71my30I2utHyNTc0wg0CPmnmyEiakBGgfeQMuyNItAg7VP
4N+//4EY+nrq+3we53Kd5+Xn4Tqe8nRWTLKjecfCOY0/pfzbKm6k0o1SutVGOukgHaMfSRdzdFZd
Dm4imJSC7TaCcXvBpn10rZ9Oxw/sOcxglyve5W7rLbHSBIFZInDaINDbIyDk6Jrfv/CYdRS+HttE
rlXKdVvI7fByE+fwgv9Qz+WftzSMOqFYDW1Cwi5JiMVsjMLpEPvG0YX/zGdM7Ged5G4GNxHsVIJR
C8Gbr5tNHM22IXfCCGmO7RgE7+vWTRd0Y8PpKQguXdeyHLeuGxLO/DSCBABm4Als1Dz9Xt0/iC27
RuY0CES+XLYUfURyWIyrujYnBmzmSaatTO7QAT6jfBkxyDF4GubLihPoe8zYzuxTGmUywIOCsAy7
W5mTZ0xy7MYau0ssDemEGKjnQoJuy/MJB2A7rgnY9Z0EFVlJXl+AI8DLbWNH720YBBE7DHyepmW6
qxXDm5ElBdnSzwpoS9KuNHPTK/utcpfNK22SMmfbj2vTJJphGBhODfVVaIS1fEE7Yy2GN8NqtcaI
dCnHKgVGbfICe83RgJB1kWVhS/ptJBCrulOwlH8bj7DcfPBa8tz/LqxNNWPrtGeLpGyr9Bq12YHN
DmzlW/AhthJAq730zaQrQ404i5NUW85YyrnK5XGb3c7twlma2B37HqzStTeDXVlqRrb9doYMKdnq
0IDbbGgIdfk8SI8NR9BKjgBvhrxvsxlu0h43keKuDii41aZmdMAtP5Yewb05a76Z8tpUM7gddjpT
Crc6DuFWJ+Aun2N5ueMHcGvli/+F8MZeM8wdNj1ru9A2kFTaqp67hUVcUb4J490iu6waOuY5jQrJ
oqbrSsqgpSF5EdTYefAUMjg8je4extfDT+8vuD8XYpUh13rCjLj4ZTMEmr4CIZay2JfUW8VjT60b
8a6uL28u3pdWRPXVEDVmGJ6vxojGys42wd0i7CZ2q0Ks/Px6xoNlvQ4r7g9VYe2AMcMIXOLQCUHI
d6dMR66rQ/iK+uUEB5j5ge7sVFsrk5taKyoqn5LYOlBu3ZPSZq9GdoPE3dF0mxCCL/u6WZyNJCdw
edVFrLq0RlqL19Jp3MbpTQHBNFzNNg/4jS04z9kHXb5gWfHjAgw46PtWn30R0jezenQ7j/LwnEfz
WVxpNA6+7zuv+95PBkWvTYa23aNuY/PkZHDkR7zf/gM=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88050 JavaScript Demo
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 1000000000;   ;DataItem;                   ;
               DataItemTable=Table2000000026;
               MaxIteration=1;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
umIzWW7HSHuq6x/1lz076j9yXvPb/wE=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88051 A02 JavaScript Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
/vpv</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88052 A04 Template Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=VAR
                  MyFile@1000 : File;
                  MyInStream@1001 : InStream;
                BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                  MyFile.OPEN('C:\Temp\Append.pdf');
                  MyFile.CREATEINSTREAM(MyInStream);
                  ReportForNav.GetDataItem('Header').AppendPdf(MyInStream);
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.) WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                END;
               ReqFilterFields=No.;
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               DataItemLink=Document Type=FIELD(Document Type), Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
NU2Z+PXzXxx1/OLmD/8D</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88054 A03 Footers Finish
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>BHEAAO1d/XLbOJL//6ruHTjaqtiplSkABEEyjnbKlu0Z79qOL3aSudvamgJJ0OaGIjUUZcczNVX3
NPdg9yQH8EPiByiRkpPMXiWpOBJINLp/aHQ3Gh9+/f2naaA8sHjuR+F4AFUwUFjoRK4f3o0Hi8Q7
MAff/+Xf/+31T0lM37JZFCfzC/oULZIbFvs08H9lsbL6+H5JCKtI1QW1StFAuaJTNh4cAU05i6KE
P1PO/NCf3w+USRQmcRTcPs34Cyfs4fTTLGbzuVpqWX13XvqKhkrLaw+irWHRtDJWCnaGymQRJIuY
8bKQLXiVYKhcL+zAd/7Gnm6jj0y87RoONZmJgOFhhgEX4sSfzwL61M583vJZFF/Rh6XIWOWAqpBY
ZKC8sf/JnOQqGg9ME+h4WdBK8sxngfuB2RzdB99h7+JgPLhPktmr0SigsySaHQBLW8yiu4dXBiDm
6HgCMRjRmT/KuBgdzWaXNKR3bMrCZPTAWRl970TTGQ2fxjrDru0S/cCkjnuAHYscmNiwD5huWFR3
PNd12UC55pV/ZP7dfTIeIMsAWckH303ueQEUyFzS+M4P5/wrsIaKqQ8VgwwV3SggeRf6vPIt5+B+
/sY7uvSDwJ8yLigHdebzaikU4XXMsvdvnNif8RqTjNHz0IviKU04nOoPLNl/efjiT59OxI+jQ8kr
Exo4KW7z/b1r3xE9vVeusvokMDp6f8OSxaxB2PeUfeU69sPkIrqL9l++VH5bPVSUctVyg+LlSmu/
yxp+oLHi0oRN7pnzMVXDR+WEf98XP9QweuTtqUn015s3V/sv1TnXTLbP9RYC/mUW+Mn+i18WUXJ4
kP33Uo2ZGL2Mv/vPyA/zp6P8aa1dRyh30XaFnKRCtaoXR9Myt5CrA+cKppxxUEYj5QAqNnPoYs6U
aST6W6F8oKUVgZJE/OUqSV6kyEkivcF5Ha3s5Rnlop+Hyb7zd/iPlwe8qvN38I96ZX8+uY/9eTKl
c05iP6P14i45zJh7Qaezw/RH3syLgD9KIjkY3iJ0hK6VFaSqH0J9visrybs54/o9E+8z95rOWFyr
oSgxfzEOlSResMPyk9/rhCeLOM5GipoywGLeRsKt9Tz7fhuNx3vXJ2d7n7sJrnc+e9yymfwljwbz
8lu/c6vHNYfbQ+FQhoo1S3iP3lPBwBgMuB9SlNfHNHTn6Uf+5TxhU5g7lR8ZdYVdqTiSzBZylaHi
VVGX+yD2KOzYNeNiOlHsjgeCW15xOZg5B9NoESYD5TZKaFAUEuEKclLvaVxttnhwS+2AF6f/QYiE
IfzlzA84jAWZq0gdKOe82fThnCWCm6vF1GZxwcqb8MjjNbhlylgszKJQZ5qy9oYPewMAULNbGTdq
xr6SavlYUcSLtZ6qUuHjQjQstV2Md9KGumlHbjB8y4HDheKmWzileX3opEM9f1bRnvLnGxqweU7h
wg+ZyrUjA3h/7yRyFqJcdP7eUNkzKgZ5fd2riNfI8buKqvUEtI26Z348TxruoeCfw9KokX9uHxjl
z4/3fsAkzV6xT2ta/fNY2eN//7xF4/molHRA6bVBPvRqI7E0Gt8ybzzQpOMwQzcfhaXRA8vRwI1/
F1LhuscDnTim5VoEEqIjZlNMPAdCzSEaoJqlG54LAYHAHmTW+E14ynXySQynYiDdsFTpao1lQc0Z
j8UIjwsxNAYlMbggOevzSmlVQCwV8Jb3zXH0qZAu/4pMIdWvjDcIEYQ8ItRNa6ibKkYAYM0aKBeR
k0YwZ0FERbClapqGDGjgoUIQVAlGWCdN61iGjUedyVHAsePNRjMuYxT/mn+/YJ4wZZyZ8aAy+g6z
0vQ1UZRWzd4W5iwdHNxmZcLUa05o+EMcPeZI16DiYN0kTwF3fH4U+8lTBpo+ULgzrDWZGo+BMqqD
PUrRlnUByqiRPl0All1gapqKNUMncF0X8OgCmUg1ANSJVcY5gzG3Eyk8Ex6O84pzbjX4uNt7lQ6/
pSGRQdmndgMXgYCWIWD0QaABwFCHqsXFN7DeEN9UeTHG6PQA8Jhew1xpESRb6FtZVK4ui9lcPeaT
gJ+T6Mh1xcytjwp2ILaFVpq9tVKT9QnOqFk9+kQgmncKgrpq6rxbhpLegHz4q1xhudVQCCFLe1DX
yv/97//hxvXjkeMIBy3XPcm0qaqHNQpVQOXqqGeiQ9BHdryF7CVb2CK7aGNrsbPKXSQmucSwj8So
v8S6sba33x/dvmV3fG4TpwS27HEJlS4YGDkGqA8GoD8GGK/t9ev7KGRbSr6s20VeM5dXHtvI5d1i
gGOzvcs3CnT68yX1g62wKKp2gcLKoegTBZlbaL+2tud/jKZMBHtbibuq3EVgCHKJ9R4SryycgU3V
MIA1FOGfaZgaRk3BgW5xwZFmDhXIP1oWIabV0eW+FQFtCZo1zjV/tTtkuactSHbyqcKz9Q31gBT4
PN6GfWIdbQm8hYkKAcYaHFpAhYY82DM53Kalc+BBLciGpBplr4E8cx41iS991w1YO+SrXEtavRu2
WcCS8ZlD2hdraVwN88AaymOYPKNagntVAjdEkKA6w8sGhY5VQBDvkCHkbg7wuFTMlKQIZhFhS4zJ
wReJuJRwunDxX1E0PZ+2WIZyai6t1gl0MYHoCzKSgpzH7qhX6LCynTrOpi1N+6FzPMW8kcNd1vVO
yptZwq2VN63eDUfUH0dpuA3zeBv1ccfGEkeNGwYLEoKI1AlhbhG4Qgos5U5oDZYrz9ITz6b9XZLq
hi3ujy2WYpsH9KiPt9O3wFYe67RhKwGoCFp2Rjon1A3nLZybLsU5n0agPs7N2gZnaQi9zh4UgfHO
wBaUuiHbfy4OiRTZfHKCek3H4TbmQTpDWwOtZLa1M8hNmp3g1rZwaoYU7nxupPVyatoWcMtTAGvg
Xs3rd0Z5SaobuFt4OlMKbj7b0vp4OriNOZbnljaAW8oVPQvCK3rdYN7C6VnVdP9Iku9vpp/LqWcI
5IqebeIoL3BkJZUFjvP5B8rLpjT+WMw5rwPqsPPwOEqSaLpcu7iPHt8sktmCy/NdaRH7kPche2DB
eHAA16x8rJZRNMNysQuYZwLMPESQBx3enq0bOjAdxuNE23NsD5cWRqBp1hZPCkF6r5RA0CdBhFbu
DZpAUwkxWuLd8iJJfdpWWxvpmDzJXZVIwytZHr7dnx3ukm/q2sKoq56iup5qBfZym9Gmp2hXPd1F
TSFmSMPQ0SGyTWzxmaFpYwAtx7It4hiea2OT2SLe36imaBs17ZPM0sA3NW1R07qllM8hLqjNggLU
9ItWR5QQrQOm4g1omaZmlKHMRbm8GA9Or96Ns+1NYmPPdydvJrf/eX2q3CfTQLl+d3xxPlHyx9nO
qtHogzYZjU5uT5Sffry9vFCgCpTbmIZzX5CkwWh0elWuUameb9F7fHxUHzU1iu9Gt29Hn0RjUJDM
Px4kJXqqm7hlEmLTRmkHRSCIcl4/TYNwPl7fFrQsK2uinWC6v+meUbdWnJZPWUIVQfeA/bLwHyrN
iV7kzvVAdGNFfid7UHk54bo8Eowcpjt45iwZp9tJKxVHKQu82cRPAibjZ9T6ZC5CASURKtVo15nP
18ivKKozR6cmOdGOyG+iwgEVkcMrh4ndTimJAz90+bdXYMYxSfc4io9K6d/vdYpkYmLj+GzymxMF
UfzqT2dnQOzPsanz8S7mEY17kD1Iu35GY7EXw+PIHXh06gdPryacCTv2s7I5HwmvIJzlrzymBu9V
KAZfkL8h5C9KGswcQc3QDYxXzIg/TWYKLj8bI5Z+ahroBJRxDpiXbIsyPIbk9PRYLwQD4CuhnGpn
+lgyvEaS8SXK7ch9kinzTHECOq+O7pWONnRZqD83x9JKhRrWK12yOH7KueZ1N9IpNKhOZ+nfG6RG
s+KTXJxCFXqJU/R3o5LYsBna89nhGj5GTbyz3hEGslqcEj48Of3mK775is/vKybH0DiztNOVFTsG
+tfyFRhbxwSAo42+AgDzs/mKr2xOqRKKSLT86Gf3089eTO9+vklonJzxTyK1IKs8ohvNWNHh9epn
cXTPeljloq/qdD4w/z6kzj0fWw1i62Q7Dd1uku1gVK8uTr4Z1W9G9bMbVROY3IoeH62MKgLkaxlV
E08sdDY57mBUAeAP/j8a1VYrVvRUvdJ1LE6a3PWwhwXMdUp/Y/E88RibJ88YHi73tPLnPZJzWj05
h4vUiHwHc1tyrpzf2JiIKx1POuyUfdMtRDSku5jp4hAgtTXHcUyxhYBptu3puqUBjIwu2bdtkm+9
tjI3UkVdkm8QWSqXzMJQloU75gNzIkbkeHAeuj4N3zK3DPhZmve6SeJ0g0nHjTogW84s0e6x2X2N
RuG6RulFIs0PWYcTUJVTTSLj3jjVlBGSn2nSag/e++xxPLh58/b2/OqH/eIIjnIVqUNBRnx4uarC
iz5ydBg3v47k+JR4PB6UiYzPzk8vTvYzKuLYlCbOoQrrXdQRhTmdKoL1Eyp1tdPkA/CYm4Xy8BNS
iLKWUyqQYGwSx7I8yue3BNmGgXRDh7ZNbcuwge5ZYv1Fq42VFdXlgCKaqktUq2UANaQxCoYT0S31
zP9Pb9PeKg8dMkxb3JCyXgotaZ9z8DZ6lHHW4M6scMdrtTDIn5SB/pAfQAaqTgwLQKTh/IOcnwwx
FkjhkjJW3yKQ8yFoVFgWBRDKecOGJs51WwaA2EK6psvy7tnxrai8Z1BywKPBZ55Jx/Xd9Wv5RLvy
ecLm6aFDrhYlhiulGznPV6FwfbF0Lefarpz/x4KGPGp9Wr8evWZVe0lgjXxyi4/7rPlXiEnPlTQA
zSMH3DJ05IDiXQEVh/gj75LRObd3JZxq5RvVId9VhusLbWu513flfnmUdztlyKv3V4U+h92aqlDf
L1Z+vs66yY/NFc9abHVbJWkIkj+6XASJz6OaxTTMBSbbHOLD8sCveVJU9OUyWJC5YWQTxgNVk3qO
ZbsQGTbjThd7wMAEmbruUmYDIO7iaLjhgu4zOWJcdXUt6t7BEYNn9L/YqvvfFr6+tP/Ve/k1sqs5
qB+63NIb6718mvG8XD+jb9brm3PWymE+rxxf0VPr2hfx1HovX2c9L7zP7Lf1+k6OdbIg8LyyfCUv
rvfZ6t1Ukz+2F2/uHUtLy9ZB7p2bGSrRY80sVck7M4c6yLM9zYOOaUOIKXEopIYOCAWGpkEMHOyy
8h7EPKXT8NayJFPKeEf3rJt99tGuji1qBKrQskxktZ3AwRirZu2wk7jcyg+XF1uJm0Tq96eMs9tX
ald6iOM1OZsq55ClGSRlrOy9Ze6e/HKO5lUtrUSOA+p8bCHTZST13OtbuZemJZCRDT+r5/BrHziV
myN6HVQ3uhy+gpamQk3DqNb9S9xuFnaadttwkuom4aOKxivDt6rXlHfDyF53TQFp2akv1kaawXep
uO2uFpdiUye2hUw+xoFOALR01wGmTVzHQY6nOY7mWR4q54+RuICiNsIrTW09xkmvPcd6fYxbOmwf
44boaG2oZCG7pKuLIbJhQirV37KW9tnvj3APOwVMTSUAINQUYs3IF7z44ULkxbc+KNhQ7xXRzkaB
9NnxvxoNdT+3hDv3dUSvBDEtwc4XnrURUp+1tfD1pWdtpB4ZrA0Gd86aPtOsjdRd/1qud86hfrZZ
G+mTs0Y7Z1T/MLM2o8+BtQqxXrM2o8/kHu2cX/2sszajzwQf7Zxt/UPM2ozdJvdfYdbW1MwNsZ30
3HbR5S0nWURk1Zy6lYpbYzvIiEYAo7ZlQo2YiBrMgDa1Dc9igFjAxpg/sTdM3iotbR3aGX0OpSOy
XVgE/sViIqNvnqLbRMnotS3D2CqMlk+Xto6hN4yb6th+PWpcYtl4K7/vK2v8/dFt1vQ2Oy3gkAy1
Icp+SjZd1IjLdl8gCwzW7b7gJJRzsXHO93wWD8VXca3tIkjBVwSjw1v6SUnv9OHsu2zI1UbhRcPr
SOyHfGD5LgsI8j9Q9MqUayqNn5bnAJ9n/4UhP53fnH9yOdau/Yg8EnI1gm1KDKBRDbgmt04uxroF
KdMhcqFnI7dmkEpkn2npxwQVn9rie7/wJMKE9UlEC19fehJh9olNdln5qYys5u13qxFTvaehXN51
imH2WZvfZV1og0zXTu3SibSg6wTD7LNuscuq0DopRFE5gsxueioVbpQmj+fNPisXuyzCbOiThjCl
sq7xvFnfs7Z2RWmXVZgNwhzTOauKkpW0C/LHWfNYtyPBlMc89U2BQt72PYG2zmNmwBwKNdOglDoQ
EGZCxwaao9k6sJEGHA14TYf0rFsCzepOhJZp7Zd2R42dCC18fWl3ZPXaifBsI+uZHZDVK3nxnFLs
5nKsPsHALimtKt/P5mSsPo5/l5xRA/fncCtWH4e/S5aowf2/ph+R7YCz9LYdcOvW2K2up0A4MmuX
2A3NdTCDFCNiEJ3wDgDE8pABPQgwdbGDgGG4Yu1zbZZm1czWbsfqlTZAO66wN1Wns9ZtWoKz+mwV
QPAZck2yMdzDBLQKVChbr/vwrIpACABgtF3JYiCk4jZZyua0jz3eccW7LbtTvjEwv8l8yckkEL/B
qkNmR5a9KSrLMjc6WZ+5EbmYeuoF7Zh6qQCYyb66vq+KTtkAlp+8zn4BUe03LuWX34u8QpSlcdpu
Flp1YuVWIHE+Ia0qxFwdc1vezFurVlxnJQ4HiGpiC3lWp/5rboqK3NIvGX89WvPrC//yfw==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88055 A05 100 Top Customer Overview
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  FillTempListTable();
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table88050;
               DataItemTableView=SORTING(Sales (LCY)) ORDER(Descending);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    LOCAL PROCEDURE FillTempListTable@1();
    VAR
      TopCustomerOverview@1000 : Query 100;
    BEGIN
      WITH TopCustomerOverview DO BEGIN
        OPEN();
        WHILE READ() DO BEGIN
          List."Entry No" := List."Entry No" + 1;
          List."No." := No;
          List.Name := Name;
          List."Sales (LCY)" := Sales_LCY;
          List."Profit (LCY)" := Profit_LCY;
          List."Country/Region Code" := Country_Region_Code;
          List.City := City;
          List."Global Dimension 1 Code" := Global_Dimension_1_Code;
          List."Global Dimension 2 Code" := Global_Dimension_2_Code;
          List."Salesperson Code" := Salesperson_Code;
          List."Salesperson Name" := SalesPersonName;
          List."Country Region Name" := CountryRegionName;
          List.INSERT();
        END;
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
s+6Orzp//i8=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88056 A06 100 Top Cust Overview Args
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 3;   ;DataItem; Args                  ;
               DataItemTable=Table88051;
               OnPreDataItem=BEGIN
                               INSERT();
                             END;
               OnAfterGetRecord=BEGIN
                                  FillTempListTable();
                                END;
               Temporary=Yes;
                }
    { 2; 1 ;DataItem; List                  ;
               DataItemTable=Table88050;
               DataItemTableView=SORTING(Sales (LCY)) ORDER(Descending);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1   ;1   ;Group     ;
                  CaptionML=ENU=Filter Fields;
                  GroupType=Group }

      { 2   ;2   ;Field     ;
                  CaptionML=ENU=Customer No.;
                  SourceExpr=Args."Customer No.";
                  TableRelation=Customer }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Dimension 1 Code;
                  SourceExpr=Args."Global Dimension 1 Code";
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1)) }

      { 4   ;2   ;Field     ;
                  CaptionML=ENU=Dimension 2 Code;
                  SourceExpr=Args."Global Dimension 2 Code";
                  TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2)) }

      { 5   ;2   ;Field     ;
                  CaptionML=ENU=Salesperson Code;
                  SourceExpr=Args."Salesperson Code";
                  TableRelation=Salesperson/Purchaser }

      { 6   ;2   ;Field     ;
                  CaptionML=ENU=Country Region Code;
                  SourceExpr=Args."Country/Region Code";
                  TableRelation=Country/Region }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    LOCAL PROCEDURE FillTempListTable@1();
    VAR
      TopCustomerOverview@1000 : Query 100;
    BEGIN
      WITH TopCustomerOverview DO BEGIN
        SETFILTER(No, Args."Customer No.");
        SETFILTER(Global_Dimension_1_Code, Args."Global Dimension 1 Code");
        SETFILTER(Global_Dimension_2_Code, Args."Global Dimension 2 Code");
        SETFILTER(Salesperson_Code, Args."Salesperson Code");
        SETFILTER(Country_Region_Code, Args."Country/Region Code");
        OPEN();
        WHILE READ() DO BEGIN
          List."Entry No" := List."Entry No" + 1;
          List."No." := No;
          List.Name := Name;
          List."Sales (LCY)" := Sales_LCY;
          List."Profit (LCY)" := Profit_LCY;
          List."Country/Region Code" := Country_Region_Code;
          List.City := City;
          List."Global Dimension 1 Code" := Global_Dimension_1_Code;
          List."Global Dimension 2 Code" := Global_Dimension_2_Code;
          List."Salesperson Code" := Salesperson_Code;
          List."Salesperson Name" := SalesPersonName;
          List."Country Region Name" := CountryRegionName;
          List.INSERT();
        END;
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
iBKsIGW9ztlwxz/g/Pw/</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88057 A01 Customer Top 10 Chart
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:06;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; List                  ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(Balance (LCY)) ORDER(Descending);
               MaxIteration=10;
               CalcFields=Balance (LCY),Sales (LCY)
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>lDgAAO1b63LbuhH+35m+A4edyWVGpggSIIlj+2R8iRNPbce1nBynfzoQCdlsKFKlKMc+v/o0fYn+
6Lv0BfoKXRCgxAsoS4nPaTvTUcYRQWCx+Hax2Au09+Zhmhj3PJ/HWbpvIss2DZ6GWRSnt/vmopjs
BOabH3/7m72bImdXfJblxfyMPWaLYsTzmCXxzzw3Vl8/LQlhy7GIoNZoMo0LNuX75oGNjKPFvMim
MPw6mxnINo7uWF6YxlGWFnmWXD/OoN8xv3/7MMv5fG7VGLA+ntYenYHR0+1eTDmoODD2jYqrAUye
FIucQ1vKFzAkGRiXi3ESh7/nj9fZFy56R37IAh44tj/BHNuwluN4PkvY45NrUAycZPkFu18CgC2A
10Ie9Uzjw/jPPCwusn0zCGziLxueonwS8yT6iY8B8vs45B/zZN+8K4rZD8NhwmZFNtuxqbuYZbf3
P/i2FwwPjxC2h2wWDyUzw4PZ7Jyl7JZPeVoM74Gj4Zswm85Y+rhPOI7GkUd2AhZGOzik3k6A/fEO
Jz5lJJxEUcRN4xIGv+fx7V2xbzrUt2XLT3FU3EEDEjids/w2TufwaNOBEZCB4dh2+afC5mMaw/Br
4OFu/mFycB4nSTzlBc8B5FkMAwkGTNLLnMv+ozCPZzDiSLJ6mk6yfMoKwNV6x4tXr3df/O7hWPw5
2NV0OWJJWCI3f/XyMg6F5F++3gU0QdcAbqG9A8OfFSZoumHsHbI0mpdf4eG04FOk1PYsnrc1VMJ6
zAomOoqR0GE53b55yBKWhtx4dXb0+fVgxBI+l99hoWrQJ5bXyVfN12ycQGP5Hwpa7Z9i/nXfHH24
uj69ePeqMclr48PV8durV8d8HvJUbOTXQiIPMDYv4YCtCHI4jQBlU62ytejawq/4ZN90tYt+z1nE
c7lkuQDZguoyHMW3KROAw7PjM+T5zPVc6jEHHidjFGISsMDzItfhDsI+5xQUKo/T4kP6FuzSo1Cu
fbPIF6B6I9gisIDWZFIZT4BN6lmBT8zaKmAdivN5o7W5PlwtoBDYOq3V3lyVkIu1/MxhGhTYnmXb
NnIGnmsR0zjLwhLYkyRjoE+g6a7rWi5wsgKiNTvMf5V9bfPU5os0+IIBPazBmzrmP6ndaVvE8ynw
6WL1pcuGhIgnHXx0/Hj66cXwBqeiob544zDLQVawHQ5Ez8a2C2bFwJgXj6Drh1kS1blHrovAOHq+
R50AEbkFRrwo99Zqy1jl8xGYP5DB3LrITOOaPwCFf/71b/DQsy5Y2UjMCrqW5XHxKFcIlvjjnEsG
JyyZ8/J5yb5qGvZhNSzBWoekI+cJtkDS+34kXdcJHJf6oAau7/g+3RRLeFFHUzxuhSd9BjyddXi6
ch5h0TYG1P9+QIntB65H7MC1nQC+b4jnQRQJL6UGadWyFaoIPQOs7jpYsZqox+BoYRUy+G5FBWNl
U4/Clvd9d1NYL9mjcGeueT6dH2VRXWU7r7YD2t0IaGgSEx4kcNiJ2TaUAF4nAaI4wFtIIHgGm+tT
BxGEie14gYeos6EIlAvyJ/BAKvSf6LWdIMgzaDzRn37DvuOvz5zvDTVnt75z3eaj9vEp3SgB1mH2
UAlzUm8kdacjADPuuv6ACimB/0ECnetht2SNMPi1xiELvxxlSZYLsYCoD5NF6cpHMtBzB/LTVJzD
rIAYpK5TzZNAoxlHizyXHrulPyy0wu05dVc8rxqXLG+uBPpTpHF6BBX6ozs240grp/KVTh7ItnyK
KXGw1hUMwFn0KSVeF8j3Wf7zWZwKqkXOi/CucnQP0lvh+1MQZjmt5GPZXYOq6KUWQ9Wgaq+mvZi0
j4C66XfaJ6pEQYVPNYVdtSDd+pW2Ypc2w4ISxYBQK6DEJ84A+cRyCKXCN2kZ0/M4ihJ+xiegyAKD
8hWsrGxYWXrJR0m71JA/Ztn0dArhg1ZRu1FiRWAjnXXQFmZfb+7rZt5pH7Ra26Ae0RI/wHJAAgs7
HeQRIVjop1MG3z7EKxLalQhqSF4Jk9A4NG95jxRU17U7vxy+GYru1ii2jXiJoqfItQ/Lpy2ss8SS
YgASgjYP9UCqlDXo0+k1gCptW7nT34Rrncpm8JKt4fV08PqK3PYH2EpVXUT6VBVTt1JVBEIgVMTW
GyJ7nUXs8TswleM3Q9PfGk2/mYoYanIRXb+h7jM47UBRQn6SZUUz9aLyg9rES2AzAvo6xr7HwAhM
MJrgIAzHiGM+Djl2Xe4FkUdqqRSMAsvGyBOnViPrIufZOsPi0Aaj+hNWrWF5nl9k4uiSj8oROEzA
KagvU+sArc5oYlFKg2BQX8/NNNk3//X3f7xIit1G+vvFXxZZsYssW35ZJcLlc5kNl1/fvLgtailH
QalkHkjX8uItuir5LJ+aBAxjScI4mM04y4WbLACryJXJQDn0mE/YIikUkyOeSPmcQ3Sjegjglq/z
mM91neQbPTeSn+OY3eZsaggZ9fBy81l16qMjKR08xPMb41M8j2HoaXrJUsFTh9oOUlwP+wiptQsC
xttUDBWkP4ujfiWoE7ElFaVVp5tNOn0ehaCUyZO01nXrZb6c4PtQEGSGFeR6oYG1E3uLgd+Xi82X
8/mdaPyQgsmD1kJNIzxNNdFhtkgjpSlgFFfL6iiSIHTOp2OeL3uo9503IvxbrxWS5DWfzhJW8H7c
Kh1eIaXrKfvW0vV1NTcqTD8xiHxWvOrwrwWpatBBfrsQ1n4UskT64vLFHxYwtAD7c79W9ivOHA1n
zuacleWD5+OrVKZNwJVaV1csnfkalvaraxmHXdMoOmkOXWkAZclBmPGG1VLHgc6gmbJRl1LYq4yY
pAoHj9aamUtD1pMirxseSQo8FI0FMk+kP6CxO91XNWujGdd9qU9v7Em7IrkCh3qNgTF30FoqN4oK
/jYqe5Vp0gqibZhgHmJ27YopEvj157Ispue5q7wbVDFc8AHWbjazkcxSiQFlRkzNpjNr+21NDqrm
1rn+Uywst3qLAedbGdjT7HS9COty0uS+yk26QfJrjbfrtL1dlYdx9d7uYRY91n1d8dxXZOQuC33f
DXHkwSvqTiackwhRH0NAjP0AogzquM645dYqkkv/F9muhb6plujSRlq27emuKSYu59Q7tbW6eBSV
4YmcJpTkyxb0bXVGbLcLjT1s/1qFRtwzv77uoGdJVQ8xoZ4dENf2ejPZ7YrhRlsYb1MacfQsyrIc
/ANNpRQ7/WU5XSFuPZtqS+F27X4dm26PcMtil+/ZHvFtCKeeqAm8y7PFrFbrOodzMxZpyCq72Sl+
rV+JSkjibSohtAdwWV5CFFGKMML9OlE+n2XZF7GUehFJXKsQd1Fge/aUmeo9tipy4G3SNUtCG5eS
8Dble9yzqcrykOMiSjDogtdfoesrCDXa+46qX6wioz2UoLnU0aMsWUxTBZbf5K6bMG/o5qZpGtnS
MAdn/J4n0qeqnWPEjrzIp1EQIZ9HYz4ZYycU17NssGS+R/EknHi24HKVs6G+hZHXzdlUk25/L6aZ
tdHnqJ87a+N7zqC+lP+na54vXTOKIdbmqqN7rCa9yopSGuesyOMHzTC0a1cfi+zu2FbgeTYI0nb9
AGOXqledVuhcDXwip/ErZy26If53py/6A39xV88YfeV8dhznUq5qjiNYAezMMMnCL1/jZQJpjQAv
Y+4ey4kF2Q2j+3U8PneCpYpOtIBaXeCfNSFzAa15DI39kvsPS0XJpUTxfy0nQ36RnAzpzcm0rJW5
zlCZz2GjerIamswFcXSZi4Zvs1UKY5kEldTdPsdxr1Rb2Qn34dZSR7Ot5mZbw5/KGVTcPWMShpCt
kjAaq6JxJzdI1SwtxBrXvIax94tjvP7W6H9T1ga3nV8VV4ifL2zh/DbC9UvwDPlpKm8aVfFh7/Xv
eknTnVDCJhBBY2ccTIIJiaJxOIns0EYopJ7PgsBjQT2l41CLOAiJyz4a9xht7x4Tvde/rh6+uvri
OL31cBIglRJq5n36yuD6eGvzcnhn/EblcEK3Loevux3n6e8b6W/AOJ17WApNiOs9t+9e3DJEuc5m
3ctYtUsBJ+WdIJWdePVSc1dIk+h4OXg5MF6+fuK+wXeR3kguHvrmW3FrNv/q2s3esPlTkfJ4vG4Z
psavBpY/++qcj0/lDYZtkpWyuEtjv8qT9xCs9eiQU0kyb/kDkKr20JMlHNZQaC+7ruJ1jKSMRnec
V/a3AY5fTd3M4yplLZ/2zdN0zovafU17ID/yvubqnuQ7MP/zcZZn5Y1C6CrVDdYFMepu+ccuw6My
eGUh2L0qPq0WBydOk9+9Kx4CL3Md8+LeZAYh+ypP0NHnFd0Vnb3hmp8T/vhv</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88058 A01 Sales Invoice Chart
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:07;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    OnInitReport=VAR
                   MyFile@1000 : File;
                   MyInStream@1001 : InStream;
                 BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  LoadWatermark;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 2;   ;DataItem; Header                  ;
               DataItemTable=Table112;
               OnAfterGetRecord=VAR
                                  Language@1000 : Record 8;
                                BEGIN
                                  GetVatAmountLines;
                                  GetVATClauses;
                                  CurrReport.LANGUAGE(Language.GetLanguageID("Language Code"));
                                END;
               ReqFilterFields=No.;
               CalcFields=Amount
                }
    { 3; 1 ;DataItem; Line                  ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               DataItemLinkReference=Header;
               DataItemLink=Document No.=FIELD(No.);
                }
    { 1000000001; 1 ;DataItem; VATAmountLine                  ;
               DataItemTable=Table290;
               DataItemTableView=SORTING(VAT Identifier,VAT Calculation Type,Tax Group Code,Use Tax,Positive);
               Temporary=Yes;
                }
    { 1000000002; 1 ;DataItem; VATClause                  ;
               DataItemTable=Table560;
               DataItemTableView=SORTING(Code);
               Temporary=Yes;
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Header': WITH Header DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"60");
              END;
           'Restore': BEGIN
                 "60" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'Line': WITH Line DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"29");
              END;
           'Restore': BEGIN
                 "29" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'VATAmountLine': WITH VATAmountLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"1");
                ReportForNav.AddTotal(DataItemId,1,"6");
                ReportForNav.AddTotal(DataItemId,2,"3");
                ReportForNav.AddTotal(DataItemId,3,"2");
                ReportForNav.AddTotal(DataItemId,4,"6");
                ReportForNav.AddTotal(DataItemId,5,"3");
                ReportForNav.AddTotal(DataItemId,6,"2");
              END;
           'Restore': BEGIN
                 "1" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 "6" := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 "3" := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 "2" := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetVatAmountLines@1000000000();
    VAR
      ForNAVGetVatAmountLines@1000000000 : Codeunit 70001;
    BEGIN
      VATAmountLine.DELETEALL;
      ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    END;
    LOCAL PROCEDURE GetVATClauses@1000000001();
    VAR
      ForNAVGetVatClause@1000000000 : Codeunit 70002;
    BEGIN
      VATClause.DELETEALL;
      ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    END;
    LOCAL PROCEDURE LoadWatermark@1000000007();
    VAR
      ForNAVSetup@1000000002 : Record 70000;
      OutStream@1000000001 : OutStream;
    BEGIN
      WITH ForNAVSetup DO BEGIN
        GET;
        CALCFIELDS("Document Watermark");
        IF NOT "Document Watermark".HASVALUE THEN
          EXIT;
        "Document Watermark".CREATEOUTSTREAM(OutStream);
        ReportForNav.Watermark.Image.Load(OutStream);
      END;
    END;
    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




OBJECT Report 88101 Customer - List(101)
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=16-04-20;
    Time=21:04:07;
    Version List=TRN1.0.0,FORNAV4.1.0.1696/1880;
    
  }
  PROPERTIES
  {
    CaptionML=ENU=Customer - List;
    OnInitReport=BEGIN
                                                                                                                              {;ReportForNav};ReportsForNavInit();
                 END;
    OnPreReport=VAR
                  CaptionManagement@1000 : Codeunit 42;
                BEGIN
                  CustFilter := CaptionManagement.GetRecordFiltersWithCaptions(Customer);
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 6836;   ;DataItem;                   ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Balance (LCY)");
                                  FormatAddr.FormatAddr(
                                    CustAddr,Name,"Name 2",'',Address,"Address 2",
                                    City,"Post Code",County,"Country/Region Code");
                                END;
               ReqFilterFields=No.,Search Name,Customer Posting Group;
                }
    { 3   ;1   ;Column  ;COMPANYNAME;
               SourceExpr=COMPANYPROPERTY.DISPLAYNAME; }
    { 5   ;1   ;Column  ;CurrReport_PAGENO;
               SourceExpr=ReportForNav.PageNo; }
    { 8   ;1   ;Column  ;Customer_TABLECAPTION__________CustFilter;
               SourceExpr=TABLECAPTION + ': ' + CustFilter; }
    { 7   ;1   ;Column  ;CustFilter;
               SourceExpr=CustFilter; }
    { 20   ;1   ;Column  ;Customer__No__;
               SourceExpr="No."; }
    { 21   ;1   ;Column  ;Customer__Customer_Posting_Group_;
               SourceExpr="Customer Posting Group"; }
    { 22   ;1   ;Column  ;Customer__Customer_Disc__Group_;
               SourceExpr="Customer Disc. Group"; }
    { 23   ;1   ;Column  ;Customer__Invoice_Disc__Code_;
               SourceExpr="Invoice Disc. Code"; }
    { 24   ;1   ;Column  ;Customer__Customer_Price_Group_;
               SourceExpr="Customer Price Group"; }
    { 25   ;1   ;Column  ;Customer__Fin__Charge_Terms_Code_;
               SourceExpr="Fin. Charge Terms Code"; }
    { 26   ;1   ;Column  ;Customer__Payment_Terms_Code_;
               SourceExpr="Payment Terms Code"; }
    { 27   ;1   ;Column  ;Customer__Salesperson_Code_;
               SourceExpr="Salesperson Code"; }
    { 28   ;1   ;Column  ;Customer__Currency_Code_;
               SourceExpr="Currency Code"; }
    { 29   ;1   ;Column  ;Customer__Credit_Limit__LCY__;
               DecimalPlaces=0:0;
               SourceExpr="Credit Limit (LCY)"; }
    { 30   ;1   ;Column  ;Customer__Balance__LCY__;
               SourceExpr="Balance (LCY)"; }
    { 31   ;1   ;Column  ;CustAddr_1_;
               SourceExpr=CustAddr[1]; }
    { 32   ;1   ;Column  ;CustAddr_2_;
               SourceExpr=CustAddr[2]; }
    { 33   ;1   ;Column  ;CustAddr_3_;
               SourceExpr=CustAddr[3]; }
    { 34   ;1   ;Column  ;CustAddr_4_;
               SourceExpr=CustAddr[4]; }
    { 35   ;1   ;Column  ;CustAddr_5_;
               SourceExpr=CustAddr[5]; }
    { 37   ;1   ;Column  ;Customer_Contact;
               SourceExpr=Contact; }
    { 39   ;1   ;Column  ;Customer__Phone_No__;
               SourceExpr="Phone No."; }
    { 40   ;1   ;Column  ;CustAddr_6_;
               SourceExpr=CustAddr[6]; }
    { 43   ;1   ;Column  ;CustAddr_7_;
               SourceExpr=CustAddr[7]; }
    { 1   ;1   ;Column  ;Customer___ListCaption;
               SourceExpr=Customer___ListCaptionLbl; }
    { 4   ;1   ;Column  ;CurrReport_PAGENOCaption;
               SourceExpr=CurrReport_PAGENOCaptionLbl; }
    { 9   ;1   ;Column  ;Customer__No__Caption;
               SourceExpr=FIELDCAPTION("No."); }
    { 10   ;1   ;Column  ;Customer__Customer_Posting_Group_Caption;
               SourceExpr=Customer__Customer_Posting_Group_CaptionLbl; }
    { 11   ;1   ;Column  ;Customer__Customer_Disc__Group_Caption;
               SourceExpr=Customer__Customer_Disc__Group_CaptionLbl; }
    { 12   ;1   ;Column  ;Customer__Invoice_Disc__Code_Caption;
               SourceExpr=Customer__Invoice_Disc__Code_CaptionLbl; }
    { 13   ;1   ;Column  ;Customer__Customer_Price_Group_Caption;
               SourceExpr=Customer__Customer_Price_Group_CaptionLbl; }
    { 14   ;1   ;Column  ;Customer__Fin__Charge_Terms_Code_Caption;
               SourceExpr=FIELDCAPTION("Fin. Charge Terms Code"); }
    { 15   ;1   ;Column  ;Customer__Payment_Terms_Code_Caption;
               SourceExpr=Customer__Payment_Terms_Code_CaptionLbl; }
    { 16   ;1   ;Column  ;Customer__Salesperson_Code_Caption;
               SourceExpr=FIELDCAPTION("Salesperson Code"); }
    { 17   ;1   ;Column  ;Customer__Currency_Code_Caption;
               SourceExpr=Customer__Currency_Code_CaptionLbl; }
    { 18   ;1   ;Column  ;Customer__Credit_Limit__LCY__Caption;
               SourceExpr=FIELDCAPTION("Credit Limit (LCY)"); }
    { 19   ;1   ;Column  ;Customer__Balance__LCY__Caption;
               SourceExpr=FIELDCAPTION("Balance (LCY)"); }
    { 36   ;1   ;Column  ;Customer_ContactCaption;
               SourceExpr=FIELDCAPTION(Contact); }
    { 38   ;1   ;Column  ;Customer__Phone_No__Caption;
               SourceExpr=FIELDCAPTION("Phone No."); }
    { 41   ;1   ;Column  ;Total__LCY_Caption;
               SourceExpr=Total__LCY_CaptionLbl; }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Mo§nosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             PLK=Opcje;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FormatAddr@1002 : Codeunit 365;
      CustFilter@1000 : Text;
      CustAddr@1001 : ARRAY [8] OF Text[50];
      Customer___ListCaptionLbl@1458 : TextConst 'ENU=Customer - List';
      CurrReport_PAGENOCaptionLbl@8565 : TextConst 'ENU=Page';
      Customer__Customer_Posting_Group_CaptionLbl@8050 : TextConst 'ENU=Customer Posting Group';
      Customer__Customer_Disc__Group_CaptionLbl@8520 : TextConst 'ENU=Cust./Item Disc. Gr.';
      Customer__Invoice_Disc__Code_CaptionLbl@5201 : TextConst 'ENU=Invoice Disc. Code';
      Customer__Customer_Price_Group_CaptionLbl@3738 : TextConst 'ENU=Price Group Code';
      Customer__Payment_Terms_Code_CaptionLbl@5049 : TextConst 'ENU=Payment Terms Code';
      Customer__Currency_Code_CaptionLbl@7330 : TextConst 'ENU=Currency Code';
      Total__LCY_CaptionLbl@4467 : TextConst 'ENU=Total (LCY)';
      ReportForNav@5000 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.5.2.0.1880, Version=5.2.0.1880, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_5_2_0_1880\ForNav.Reports.5.2.0.1880.dll') THEN
        ERROR('Please install the ForNAV DLL version 5.2.0.1880 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;
    
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    
    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5003(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
      Filter : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5016(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    	  ForNavOperation: Text;
    BEGIN 
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group 
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Balance (LCY)");
              END;
           'Restore': BEGIN
                 "Balance (LCY)" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Copyright (c) 2019 ForNAV ApS - All Rights Reserved
      The intellectual work and technical concepts contained in this file are proprietary to ForNAV.
      Unauthorized reverse engineering, distribution or copying of this file, parts hereof, or derived work, via any medium is strictly prohibited without written permission from ForNAV ApS.
      This source code is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      
                
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
ZtD6xs76htFqD+i8U/P/Lv3wfw==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page>
      </Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}




