dotnet // --> Reports ForNAV Autogenerated code - do not delete or modify
{	
	assembly("ForNav.Reports.5.2.0.1903")
	{
		type(ForNav.Report_5_2_0_1903; ForNavReport50002_v5_2_0_1903){}   
	}
	assembly("mscorlib")
	{
		Version='4.0.0.0';
		type("System.IO.Stream"; SystemIOStream50002){}   
		type("System.IO.Path"; System_IO_Path50002) {}
	}
} // Reports ForNAV Autogenerated code - do not delete or modify -->

Report 80140 "ForNAV 50002"
{
	Caption = 'Sales Template';
	RDLCLayout = './Layouts/ForNAV 50002.rdlc'; DefaultLayout = RDLC;

	dataset
	{
		dataitem(Header;"Sales Invoice Header")
		{
			CalcFields = "Amount Including VAT", Amount;
			MaxIteration = 1;
			RequestFilterFields = "No.", "Posting Date";
			DataItemTableView = sorting("No.");
			column(ReportForNavId_2; 2) {} // Autogenerated by ForNav - Do not delete
			column(HasDiscount; ForNAVCheckDocumentDiscount.HasDiscount(Header))
			{
				IncludeCaption = false;
			}
			dataitem(Line;"Sales Invoice Line")
			{
				DataItemLink = "Document No." = FIELD("No.");
				DataItemLinkReference = Header;
				DataItemTableView = sorting("Document No.", "Line No.");
				column(ReportForNavId_3; 3) {} // Autogenerated by ForNav - Do not delete
			}
			dataitem(VATAmountLine;"VAT Amount Line")
			{
				UseTemporary = true;
				DataItemTableView = sorting("VAT Identifier", "VAT Calculation Type", "Tax Group Code", "Use Tax", Positive);
				column(ReportForNavId_1000000001; 1000000001) {} // Autogenerated by ForNav - Do not delete
				trigger OnPreDataItem();
				begin
					if not PrintVATAmountLines then
						CurrReport.Break;
				end;
				
			}
			dataitem(VATClause;"VAT Clause")
			{
				UseTemporary = true;
				DataItemTableView = sorting(Code);
				column(ReportForNavId_1000000002; 1000000002) {} // Autogenerated by ForNav - Do not delete
			}
			trigger OnAfterGetRecord();
			begin
			
				ChangeLanguage("Language Code");
				GetVatAmountLines;
				GetVATClauses;
			end;
			
		}
	}

	requestpage
	{

		layout
		{
			area(content)
			{
				group(Options)
				{
					Caption = 'Options';
					field(NoOfCopies; NoOfCopies)
					{
						ApplicationArea = Basic;
						Caption = 'No. of Copies';
					}
					field(ForNavOpenDesigner; ReportForNavOpenDesigner)
					{
						ApplicationArea = Basic;
						Caption = 'Design';
						Visible = ReportForNavAllowDesign;
						trigger OnValidate()
						begin
							ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
							CurrReport.RequestOptionsPage.Close();
						end;
					}
				}
			}
		}

		actions
		{
		}
		trigger OnOpenPage()
		begin
			ReportForNavOpenDesigner := false;
		end;
	}

	trigger OnInitReport()
	begin
		;ReportsForNavInit;
		Codeunit.Run(Codeunit::"ForNAV First Time Setup");
		Commit;
	end;

	trigger OnPostReport()
	begin
		;ReportForNav.Post;

	end;

	trigger OnPreReport()
	var
		ForNAVSetup: Record "ForNAV Setup";
	begin
		;

		ReportForNav.GetDataItem('Header').Copies( NoOfCopies);
		LoadWatermark;
		;ReportsForNavPre;

	end;
	var
		ForNAVCheckDocumentDiscount: Codeunit "ForNAV Check Document Discount";
		NoOfCopies: Integer;

	local procedure ChangeLanguage(LanguageCode: Code[10])
	var
		ForNAVSetup: Record "ForNAV Setup";
	begin
		CurrReport.Language(ReportForNav.GetLanguageID(LanguageCode));
	end;

	local procedure GetVatAmountLines()
	var
		ForNAVGetVatAmountLines: Codeunit "ForNAV Get Vat Amount Lines";
	begin
		VATAmountLine.DeleteAll;
		ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
	end;

	local procedure GetVATClauses()
	var
		ForNAVGetVatClause: Codeunit "ForNAV Get Vat Clause";
	begin
		VATClause.DeleteAll;
		ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
	end;

	local procedure PrintVATAmountLines(): Boolean
	var
		ForNAVSetup: Record "ForNAV Setup";
	begin
		with ForNAVSetup do begin
			Get;
			case "VAT Report Type" of
				"vat report type"::Always:
					exit(true);
				"vat report type"::"Multiple Lines":
					exit(VATAmountLine.Count > 1);
				"vat report type"::Never:
					exit(false);
			end;
		end;
	end;

	local procedure LoadWatermark()
	var
		ForNAVSetup: Record "ForNAV Setup";
		OutStream: OutStream;
	begin
		with ForNAVSetup do begin
			Get;
			if not PrintLogo(ForNAVSetup) then
				exit;
			CalcFields("Document Watermark");
			if not "Document Watermark".Hasvalue then
				exit;

			ForNavSetup."Document Watermark".CreateOutstream(OutStream);
			ReportForNav.Watermark.Image.Load(OutStream);
		end;
	end;

	procedure PrintLogo(ForNAVSetup: Record "ForNAV Setup"): Boolean
	begin
		if not ForNAVSetup."Use Preprinted Paper" then
			exit(true);
		if ReportForNav.PrinterSettings.PrintTo = 'PDF' then
			exit(true);
		if ReportForNav.PrinterSettings.PrintTo = 'Preview' then
			exit(true);
		exit(false);
	end;

	// --> Reports ForNAV Autogenerated code - do not delete or modify
	var 
		[WithEvents]
		ReportForNav : DotNet ForNavReport50002_v5_2_0_1903;
		[RunOnClient]
		ReportForNavClient : DotNet ForNavReport50002_v5_2_0_1903;
		ReportForNavDialog : Dialog;
		ReportForNavOpenDesigner : Boolean;
		[InDataSet]
		ReportForNavAllowDesign : Boolean;

	local procedure ReportsForNavInit();
	var
		addInFileName : Text;
		tempAddInFileName : Text;
		path: DotNet System_IO_Path50002;
		ApplicationSystemConstants: Codeunit "Application System Constants";
	begin
		addInFileName := ApplicationPath + 'Add-ins\ReportsForNAV_5_2_0_1903\ForNav.Reports.5.2.0.1903.dll';
		if not File.Exists(addInFileName) then begin
			tempAddInFileName := path.GetTempPath() + '\Microsoft Dynamics NAV\Add-Ins\' + ApplicationSystemConstants.PlatformFileVersion() + '\ForNav.Reports.5.2.0.1903.dll';
			if not File.Exists(tempAddInFileName) then
				Error('Please install the ForNAV DLL version 5.2.0.1903 in your service tier Add-ins folder under the file name "%1"\\If you already have the ForNAV DLL on the server, you should move it to this folder and rename it to match this file name.', addInFileName);
		end;
		ReportForNav:= ReportForNav.Report_5_2_0_1903(CurrReport.OBJECTID, CurrReport.Language, SerialNumber, UserId, CompanyName);
		ReportForNav.Init;
	end;

	local procedure ReportsForNavPre();
	begin
		ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;
		if not ReportForNav.Pre then CurrReport.Quit;
	end;


	trigger ReportForNav::OnInit();
	var
		reportLayoutSelection: Record "Report Layout Selection";
	begin
		ReportForNav.OData := GETURL(CLIENTTYPE::OData, CompanyName, OBJECTTYPE::Page, 7702);
		if ReportForNav.IsWindowsClient then begin
			ReportForNav.CheckClientAddIn();
			ReportForNavClient := ReportForNavClient.Report_5_2_0_1903(ReportForNav.Definition);
			ReportForNavAllowDesign := ReportForNavClient.HasDesigner and not ReportForNav.ParameterMode;
		end else
			ReportForNavAllowDesign := reportLayoutSelection.GetTempLayoutSelected() = '';
	end;

	trigger ReportForNav::OnParameters(Parameters : Text);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
		; // Remove AL(AA0005) warning
	end;

	trigger ReportForNav::OnPreview(Parameters : Text;FileName : Text);
	var
		PdfFile : File;
		InStream : InStream;
		OutStream : OutStream;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		COMMIT;
		PdfFile.CREATETEMPFILE;
		PdfFile.CREATEOUTSTREAM(OutStream);
		REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
		PdfFile.CREATEINSTREAM(InStream);
		ReportForNavClient.ShowDesigner;
		if ReportForNav.IsValidPdf(PdfFile.NAME) then DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
		PdfFile.CLOSE;
	end;

	trigger ReportForNav::OnSelectPrinter();
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
		; // Remove AL(AA0005) warning
	end;

	trigger ReportForNav::OnPrint(InStream : DotNet SystemIOStream50002);
	var
		ClientFileName : Text[255];
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
		ReportForNavClient.Print(ClientFileName); 
	end;

	trigger ReportForNav::OnDesign(Data : Text);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ReportForNavClient.Data := Data;
		while ReportForNavClient.DesignReport do begin
			ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
			SLEEP(100);
		end;
	end;

	trigger ReportForNav::OnView(ClientFileName : Text;Parameters : Text;ServerFileName : Text);
	var
		ServerFile : File;
		ServerInStream : InStream;
		"Filter" : Text;
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		ServerFile.OPEN(ServerFileName);
		ServerFile.CREATEINSTREAM(ServerInStream);
		if STRLEN(ClientFileName) >= 4 then
			if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName) - 3, 4)) = '.pdf' then Filter := 'PDF (*.pdf)|*.pdf';
		if STRLEN(ClientFileName) >= 4 then
			if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName) - 3, 4)) = '.doc' then Filter := 'Microsoft Word (*.doc)|*.doc';
		if STRLEN(ClientFileName) >= 5 then
			if LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName) - 4, 5)) = '.xlsx' then Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
		DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
	end;

	trigger ReportForNav::OnMessage(Operation : Text;Parameter : Text;ParameterNo : Integer);
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		case Operation of
			'Open'	: ReportForNavDialog.Open(Parameter);
			'Update'  : ReportForNavDialog.Update(ParameterNo,Parameter);
			'Close'   : ReportForNavDialog.Close();
			'Message' : Message(Parameter);
			'Error'   : Error(Parameter);
		end;
		; // Remove AL(AA0005) warning
	end;

	trigger ReportForNav::OnPrintPreview(InStream : DotNet SystemIOStream50002;Preview : Boolean);
	var
		ClientFileName : Text[255];
	begin
		// This code is created automatically every time Reports ForNAV saves the report.
		// Do not modify this code.
		CurrReport.Language := System.GlobalLanguage;
		DownloadFromStream(InStream, '', '<TEMP>', '', ClientFileName);
		ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
	end;

	trigger ReportForNav::OnTotals(DataItemId: Text; Operation: Text; GroupTotalFieldNo: Integer)
	begin
		// Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
		case DataItemId of
			'Header':
				with Header do
					case Operation of
						'Add': begin
							ReportForNav.AddTotal(DataItemId,0,Amount);
							ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
						end;
						'Restore': begin
							Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
							"Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
						end;
					end;
			'Line':
				with Line do
					case Operation of
						'Add': begin
							ReportForNav.AddTotal(DataItemId,0,Amount);
						end;
						'Restore': begin
							Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
						end;
					end;
			'VATAmountLine':
				with VATAmountLine do
					case Operation of
						'Add': begin
							ReportForNav.AddTotal(DataItemId,0,"VAT %");
							ReportForNav.AddTotal(DataItemId,1,"Line Amount");
							ReportForNav.AddTotal(DataItemId,2,"VAT Amount");
							ReportForNav.AddTotal(DataItemId,3,"VAT Base");
						end;
						'Restore': begin
							"VAT %" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
							"Line Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
							"VAT Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
							"VAT Base" := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
						end;
					end;
			end;
			; // Remove AL(AA0005) warning
	end;
	// Reports ForNAV Autogenerated code - do not delete or modify -->
}
